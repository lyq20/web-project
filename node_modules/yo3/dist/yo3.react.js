(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("ReactDOM"), require("React"));
	else if(typeof define === 'function' && define.amd)
		define(["ReactDOM", "React"], factory);
	else if(typeof exports === 'object')
		exports["Yo"] = factory(require("ReactDOM"), require("React"));
	else
		root["Yo"] = factory(root["ReactDOM"], root["React"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_23__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _src = __webpack_require__(2);
	
	Object.defineProperty(exports, 'ActionSheet', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src).default;
	  }
	});
	
	var _src2 = __webpack_require__(35);
	
	Object.defineProperty(exports, 'Alert', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src2).default;
	  }
	});
	
	var _src3 = __webpack_require__(40);
	
	Object.defineProperty(exports, 'Calendar', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src3).default;
	  }
	});
	
	var _src4 = __webpack_require__(72);
	
	Object.defineProperty(exports, 'Carousel', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src4).default;
	  }
	});
	
	var _src5 = __webpack_require__(80);
	
	Object.defineProperty(exports, 'Confirm', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src5).default;
	  }
	});
	
	var _src6 = __webpack_require__(82);
	
	Object.defineProperty(exports, 'DateTimePicker', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src6).default;
	  }
	});
	
	var _src7 = __webpack_require__(90);
	
	Object.defineProperty(exports, 'Dialog', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src7).default;
	  }
	});
	
	var _src8 = __webpack_require__(92);
	
	Object.defineProperty(exports, 'GroupList', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src8).default;
	  }
	});
	
	var _src9 = __webpack_require__(94);
	
	Object.defineProperty(exports, 'InputNumber', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src9).default;
	  }
	});
	
	var _lazyimage = __webpack_require__(67);
	
	Object.defineProperty(exports, 'LazyImage', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_lazyimage).default;
	  }
	});
	
	var _src10 = __webpack_require__(97);
	
	Object.defineProperty(exports, 'List', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src10).default;
	  }
	});
	
	var _src11 = __webpack_require__(99);
	
	Object.defineProperty(exports, 'Loading', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src11).default;
	  }
	});
	Object.defineProperty(exports, 'loading', {
	  enumerable: true,
	  get: function get() {
	    return _src11.loading;
	  }
	});
	
	var _src12 = __webpack_require__(103);
	
	Object.defineProperty(exports, 'Modal', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src12).default;
	  }
	});
	
	var _src13 = __webpack_require__(105);
	
	Object.defineProperty(exports, 'MultiList', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src13).default;
	  }
	});
	
	var _src14 = __webpack_require__(109);
	
	Object.defineProperty(exports, 'Picker', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src14).default;
	  }
	});
	
	var _src15 = __webpack_require__(111);
	
	Object.defineProperty(exports, 'Popup', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src15).default;
	  }
	});
	
	var _src16 = __webpack_require__(113);
	
	Object.defineProperty(exports, 'PopupDateTimePicker', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src16).default;
	  }
	});
	
	var _src17 = __webpack_require__(116);
	
	Object.defineProperty(exports, 'PopupPicker', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src17).default;
	  }
	});
	
	var _src18 = __webpack_require__(119);
	
	Object.defineProperty(exports, 'Range', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src18).default;
	  }
	});
	
	var _src19 = __webpack_require__(123);
	
	Object.defineProperty(exports, 'Rating', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src19).default;
	  }
	});
	
	var _src20 = __webpack_require__(126);
	
	Object.defineProperty(exports, 'Scroller', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src20).default;
	  }
	});
	
	var _sticky = __webpack_require__(68);
	
	Object.defineProperty(exports, 'Sticky', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_sticky).default;
	  }
	});
	
	var _src21 = __webpack_require__(128);
	
	Object.defineProperty(exports, 'Suggest', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src21).default;
	  }
	});
	
	var _src22 = __webpack_require__(131);
	
	Object.defineProperty(exports, 'SwipeMenu', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src22).default;
	  }
	});
	
	var _src23 = __webpack_require__(135);
	
	Object.defineProperty(exports, 'SwipeMenuList', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src23).default;
	  }
	});
	
	var _src24 = __webpack_require__(138);
	
	Object.defineProperty(exports, 'Switch', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src24).default;
	  }
	});
	
	var _src25 = __webpack_require__(141);
	
	Object.defineProperty(exports, 'Toast', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src25).default;
	  }
	});
	
	var _src26 = __webpack_require__(144);
	
	Object.defineProperty(exports, 'Touchable', {
	  enumerable: true,
	  get: function get() {
	    return _interopRequireDefault(_src26).default;
	  }
	});

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(20);
	
	var _actionsheet = __webpack_require__(22);
	
	var _actionsheet2 = _interopRequireDefault(_actionsheet);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _actionsheet2.default;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _fastclick = __webpack_require__(4);
	
	var _fastclick2 = _interopRequireDefault(_fastclick);
	
	var _reactTapEventPlugin = __webpack_require__(7);
	
	var _reactTapEventPlugin2 = _interopRequireDefault(_reactTapEventPlugin);
	
	var _util = __webpack_require__(5);
	
	__webpack_require__(16);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * Created by Ellery1 on 16/7/8.
	 */
	if (!window.___yoTapEventInjected) {
	    // 不要觉得这里没用
	    // 因为yo-router也用了tap-event-plugin，如果不加try catch会报引用两次tap-event-plugin的警告
	    try {
	        (0, _reactTapEventPlugin2.default)();
	    } catch (e) {}
	
	    if (document.readyState === 'complete' || document.readyState === 'interactive') {
	        _fastclick2.default.attach(document.body);
	    }
	
	    document.addEventListener('DOMContentLoaded', function () {
	        _fastclick2.default.attach(document.body);
	    });
	
	    document.body.addEventListener('touchmove', function (evt) {
	        evt.preventDefault();
	    }, (0, _util.supportsPassiveOption)() ? {
	        passive: false
	    } : false);
	    // 因为 iOS 11.3 的 root document 的 touch 事件默认开启了 passive 模式，
	    // 所以为了让 preventDefault 生效，必须指定 passive 为 false。
	    window.___yoTapEventInjected = true;
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _util = __webpack_require__(5);
	
	(function () {
	    'use strict';
	
	    /**
	     * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.
	     *
	     * @codingstandard ftlabs-jsv2
	     * @copyright The Financial Times Limited [All Rights Reserved]
	     * @license MIT License (see LICENSE.txt)
	     */
	
	    /*jslint browser:true, node:true*/
	    /*global define, Event, Node*/
	
	    /**
	     * Instantiate fast-clicking listeners on the specified layer.
	     *
	     * @constructor
	     * @param {Element} layer The layer to listen on
	     * @param {Object} [options={}] The options to override the defaults
	     */
	
	    function FastClick(layer, options) {
	        var oldOnClick;
	
	        options = options || {};
	
	        /**
	         * Whether a click is currently being tracked.
	         *
	         * @type boolean
	         */
	        this.trackingClick = false;
	
	        /**
	         * Timestamp for when click tracking started.
	         *
	         * @type number
	         */
	        this.trackingClickStart = 0;
	
	        /**
	         * The element being tracked for a click.
	         *
	         * @type EventTarget
	         */
	        this.targetElement = null;
	
	        /**
	         * X-coordinate of touch start event.
	         *
	         * @type number
	         */
	        this.touchStartX = 0;
	
	        /**
	         * Y-coordinate of touch start event.
	         *
	         * @type number
	         */
	        this.touchStartY = 0;
	
	        /**
	         * ID of the last touch, retrieved from Touch.identifier.
	         *
	         * @type number
	         */
	        this.lastTouchIdentifier = 0;
	
	        /**
	         * Touchmove boundary, beyond which a click will be cancelled.
	         *
	         * @type number
	         */
	        this.touchBoundary = options.touchBoundary || 10;
	
	        /**
	         * The FastClick layer.
	         *
	         * @type Element
	         */
	        this.layer = layer;
	
	        /**
	         * The minimum time between tap(touchstart and touchend) events
	         *
	         * @type number
	         */
	        this.tapDelay = options.tapDelay || 200;
	
	        /**
	         * The maximum time for a tap
	         *
	         * @type number
	         */
	        this.tapTimeout = options.tapTimeout || 700;
	
	        if (FastClick.notNeeded(layer)) {
	            return;
	        }
	
	        // Some old versions of Android don't have Function.prototype.bind
	        function bind(method, context) {
	            return function () {
	                return method.apply(context, arguments);
	            };
	        }
	
	        var methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];
	        var context = this;
	        for (var i = 0, l = methods.length; i < l; i++) {
	            context[methods[i]] = bind(context[methods[i]], context);
	        }
	
	        // Set up event handlers as required
	        if (deviceIsAndroid) {
	            layer.addEventListener('mouseover', this.onMouse, true);
	            layer.addEventListener('mousedown', this.onMouse, true);
	            layer.addEventListener('mouseup', this.onMouse, true);
	        }
	
	        layer.addEventListener('click', this.onClick, true);
	
	        var supportsPassive = (0, _util.supportsPassiveOption)();
	        layer.addEventListener('touchstart', this.onTouchStart, supportsPassive ? { passive: false } : false);
	        layer.addEventListener('touchmove', this.onTouchMove, supportsPassive ? { passive: true } : true);
	        layer.addEventListener('touchend', this.onTouchEnd, false);
	        layer.addEventListener('touchcancel', this.onTouchCancel, false);
	
	        // Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
	        // which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick
	        // layer when they are cancelled.
	        if (!Event.prototype.stopImmediatePropagation) {
	            layer.removeEventListener = function (type, callback, capture) {
	                var rmv = Node.prototype.removeEventListener;
	                if (type === 'click') {
	                    rmv.call(layer, type, callback.hijacked || callback, capture);
	                } else {
	                    rmv.call(layer, type, callback, capture);
	                }
	            };
	
	            layer.addEventListener = function (type, callback, capture) {
	                var adv = Node.prototype.addEventListener;
	                if (type === 'click') {
	                    adv.call(layer, type, callback.hijacked || (callback.hijacked = function (event) {
	                        if (!event.propagationStopped) {
	                            callback(event);
	                        }
	                    }), capture);
	                } else {
	                    adv.call(layer, type, callback, capture);
	                }
	            };
	        }
	
	        // If a handler is already declared in the element's onclick attribute, it will be fired before
	        // FastClick's onClick handler. Fix this by pulling out the user-defined handler function and
	        // adding it as listener.
	        if (typeof layer.onclick === 'function') {
	
	            // Android browser on at least 3.2 requires a new reference to the function in layer.onclick
	            // - the old one won't work if passed to addEventListener directly.
	            oldOnClick = layer.onclick;
	            layer.addEventListener('click', function (event) {
	                oldOnClick(event);
	            }, false);
	            layer.onclick = null;
	        }
	    }
	
	    /**
	     * Windows Phone 8.1 fakes user agent string to look like Android and iPhone.
	     *
	     * @type boolean
	     */
	    var deviceIsWindowsPhone = navigator.userAgent.indexOf("Windows Phone") >= 0;
	
	    /**
	     * Android requires exceptions.
	     *
	     * @type boolean
	     */
	    var deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;
	
	    /**
	     * iOS requires exceptions.
	     *
	     * @type boolean
	     */
	    var deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;
	
	    /**
	     * iOS 4 requires an exception for select elements.
	     *
	     * @type boolean
	     */
	    var deviceIsIOS4 = deviceIsIOS && /OS 4_\d(_\d)?/.test(navigator.userAgent);
	
	    /**
	     * iOS 6.0-7.* requires the target element to be manually derived
	     *
	     * @type boolean
	     */
	    var deviceIsIOSWithBadTarget = deviceIsIOS && /OS [6-7]_\d/.test(navigator.userAgent);
	
	    /**
	     * BlackBerry requires exceptions.
	     *
	     * @type boolean
	     */
	    var deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;
	
	    /**
	     * Determine whether a given element requires a native click.
	     *
	     * @param {EventTarget|Element} target Target DOM element
	     * @returns {boolean} Returns true if the element needs a native click
	     */
	    FastClick.prototype.needsClick = function (target) {
	        switch (target.nodeName.toLowerCase()) {
	
	            // Don't send a synthetic click to disabled inputs (issue #62)
	            case 'button':
	            case 'select':
	            case 'textarea':
	                if (target.disabled) {
	                    return true;
	                }
	
	                break;
	            case 'input':
	
	                // File inputs need real clicks on iOS 6 due to a browser bug (issue #68)
	                if (deviceIsIOS && target.type === 'file' || target.disabled) {
	                    return true;
	                }
	
	                break;
	            case 'label':
	            case 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames
	            case 'video':
	                return true;
	        }
	
	        return (/\bneedsclick\b/.test(target.className)
	        );
	    };
	
	    /**
	     * Determine whether a given element requires a call to focus to simulate click into element.
	     *
	     * @param {EventTarget|Element} target Target DOM element
	     * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.
	     */
	    FastClick.prototype.needsFocus = function (target) {
	        switch (target.nodeName.toLowerCase()) {
	            case 'textarea':
	                return true;
	            case 'select':
	                return !deviceIsAndroid;
	            case 'input':
	                switch (target.type) {
	                    case 'button':
	                    case 'checkbox':
	                    case 'file':
	                    case 'image':
	                    case 'radio':
	                    case 'submit':
	                        return false;
	                }
	
	                // No point in attempting to focus disabled inputs
	                return !target.disabled && !target.readOnly;
	            default:
	                return (/\bneedsfocus\b/.test(target.className)
	                );
	        }
	    };
	
	    /**
	     * Send a click event to the specified element.
	     *
	     * @param {EventTarget|Element} targetElement
	     * @param {Event} event
	     */
	    FastClick.prototype.sendClick = function (targetElement, event) {
	        var clickEvent, touch;
	
	        // On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)
	        if (document.activeElement && document.activeElement !== targetElement) {
	            document.activeElement.blur();
	        }
	
	        touch = event.changedTouches[0];
	
	        // Synthesise a click event, with an extra attribute so it can be tracked
	        clickEvent = document.createEvent('MouseEvents');
	        clickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);
	        clickEvent.forwardedTouchEvent = true;
	        targetElement.dispatchEvent(clickEvent);
	    };
	
	    FastClick.prototype.determineEventType = function (targetElement) {
	
	        //Issue #159: Android Chrome Select Box does not open with a synthetic click event
	        if (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {
	            return 'mousedown';
	        }
	
	        return 'click';
	    };
	
	    /**
	     * @param {EventTarget|Element} targetElement
	     */
	    FastClick.prototype.focus = function (targetElement) {
	        var length;
	
	        // Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.
	        if (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {
	            length = targetElement.value.length;
	            targetElement.setSelectionRange(length, length);
	        } else {
	            targetElement.focus();
	        }
	    };
	
	    /**
	     * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.
	     *
	     * @param {EventTarget|Element} targetElement
	     */
	    FastClick.prototype.updateScrollParent = function (targetElement) {
	        var scrollParent, parentElement;
	
	        scrollParent = targetElement.fastClickScrollParent;
	
	        // Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the
	        // target element was moved to another parent.
	        if (!scrollParent || !scrollParent.contains(targetElement)) {
	            parentElement = targetElement;
	            do {
	                if (parentElement.scrollHeight > parentElement.offsetHeight) {
	                    scrollParent = parentElement;
	                    targetElement.fastClickScrollParent = parentElement;
	                    break;
	                }
	
	                parentElement = parentElement.parentElement;
	            } while (parentElement);
	        }
	
	        // Always update the scroll top tracker if possible.
	        if (scrollParent) {
	            scrollParent.fastClickLastScrollTop = scrollParent.scrollTop;
	        }
	    };
	
	    /**
	     * @param {EventTarget} targetElement
	     * @returns {Element|EventTarget}
	     */
	    FastClick.prototype.getTargetElementFromEventTarget = function (eventTarget) {
	
	        // On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.
	        if (eventTarget.nodeType === Node.TEXT_NODE) {
	            return eventTarget.parentNode;
	        }
	
	        return eventTarget;
	    };
	
	    /**
	     * On touch start, record the position and scroll offset.
	     *
	     * @param {Event} event
	     * @returns {boolean}
	     */
	    FastClick.prototype.onTouchStart = function (event) {
	        var targetElement, touch, selection, touchStartTime;
	
	        // iOS (at least 11.4 and 11.4 beta) can return smaller event.timeStamp values after resuming with
	        // Cordova using UIWebView (and possibly also with mobile Safari?), the timeStamp values can also
	        // be negative
	        // https://github.com/ftlabs/fastclick/issues/549
	        if (event.timeStamp < 0) {
	            touchStartTime = new Date().getTime();
	            this.isTrackingClickStartFromEvent = false;
	        } else {
	            touchStartTime = event.timeStamp;
	            this.isTrackingClickStartFromEvent = true;
	        }
	
	        // Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).
	        if (event.targetTouches.length > 1) {
	            return true;
	        }
	
	        targetElement = this.getTargetElementFromEventTarget(event.target);
	        touch = event.targetTouches[0];
	
	        if (deviceIsIOS) {
	
	            // Only trusted events will deselect text on iOS (issue #49)
	            selection = window.getSelection();
	            if (selection.rangeCount && !selection.isCollapsed) {
	                return true;
	            }
	
	            if (!deviceIsIOS4) {
	
	                // Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):
	                // when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched
	                // with the same identifier as the touch event that previously triggered the click that triggered the alert.
	                // Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an
	                // immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.
	                // Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,
	                // which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,
	                // random integers, it's safe to to continue if the identifier is 0 here.
	                if (touch.identifier && touch.identifier === this.lastTouchIdentifier) {
	                    event.preventDefault();
	                    return false;
	                }
	
	                this.lastTouchIdentifier = touch.identifier;
	
	                // If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:
	                // 1) the user does a fling scroll on the scrollable layer
	                // 2) the user stops the fling scroll with another tap
	                // then the event.target of the last 'touchend' event will be the element that was under the user's finger
	                // when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check
	                // is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).
	                this.updateScrollParent(targetElement);
	            }
	        }
	
	        this.trackingClick = true;
	        this.trackingClickStart = touchStartTime;
	        this.targetElement = targetElement;
	
	        this.touchStartX = touch.pageX;
	        this.touchStartY = touch.pageY;
	
	        // Prevent phantom clicks on fast double-tap (issue #36)
	        if (touchStartTime - this.lastClickTime < this.tapDelay) {
	            event.preventDefault();
	        }
	
	        return true;
	    };
	
	    /**
	     * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.
	     *
	     * @param {Event} event
	     * @returns {boolean}
	     */
	    FastClick.prototype.touchHasMoved = function (event) {
	        var touch = event.changedTouches[0],
	            boundary = this.touchBoundary;
	
	        if (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {
	            return true;
	        }
	
	        return false;
	    };
	
	    /**
	     * Update the last position.
	     *
	     * @param {Event} event
	     * @returns {boolean}
	     */
	    FastClick.prototype.onTouchMove = function (event) {
	        if (!this.trackingClick) {
	            return true;
	        }
	
	        // If the touch has moved, cancel the click tracking
	        if (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {
	            this.trackingClick = false;
	            this.targetElement = null;
	        }
	
	        return true;
	    };
	
	    /**
	     * Attempt to find the labelled control for the given label element.
	     *
	     * @param {EventTarget|HTMLLabelElement} labelElement
	     * @returns {Element|null}
	     */
	    FastClick.prototype.findControl = function (labelElement) {
	
	        // Fast path for newer browsers supporting the HTML5 control attribute
	        if (labelElement.control !== undefined) {
	            return labelElement.control;
	        }
	
	        // All browsers under test that support touch events also support the HTML5 htmlFor attribute
	        if (labelElement.htmlFor) {
	            return document.getElementById(labelElement.htmlFor);
	        }
	
	        // If no for attribute exists, attempt to retrieve the first labellable descendant element
	        // the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label
	        return labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');
	    };
	
	    /**
	     * On touch end, determine whether to send a click event at once.
	     *
	     * @param {Event} event
	     * @returns {boolean}
	     */
	    FastClick.prototype.onTouchEnd = function (event) {
	        var forElement,
	            trackingClickStart,
	            targetTagName,
	            scrollParent,
	            touch,
	            touchEndTime,
	            targetElement = this.targetElement;
	
	        if (this.isTrackingClickStartFromEvent) {
	            touchEndTime = event.timeStamp;
	        } else {
	            // iOS (at least 11.4 and 11.4 beta) can return smaller event.timeStamp values after resuming with
	            // Cordova using UIWebView (and possibly also with mobile Safari?), the timeStamp values can also
	            // be negative
	            // https://github.com/ftlabs/fastclick/issues/549
	            touchEndTime = new Date().getTime();
	        }
	
	        if (!this.trackingClick) {
	            return true;
	        }
	
	        // Prevent phantom clicks on fast double-tap (issue #36)
	        if (this.lastClickTime) {
	            if (touchEndTime - this.lastClickTime < this.tapDelay) {
	                this.cancelNextClick = true;
	                return true;
	            }
	        }
	
	        if (this.trackingClickStart) {
	            if (touchEndTime - this.trackingClickStart > this.tapTimeout) {
	                return true;
	            }
	        }
	
	        // Reset to prevent wrong click cancel on input (issue #156).
	        this.cancelNextClick = false;
	
	        this.lastClickTime = touchEndTime;
	
	        trackingClickStart = this.trackingClickStart;
	        this.trackingClick = false;
	        this.trackingClickStart = 0;
	
	        // On some iOS devices, the targetElement supplied with the event is invalid if the layer
	        // is performing a transition or scroll, and has to be re-detected manually. Note that
	        // for this to function correctly, it must be called *after* the event target is checked!
	        // See issue #57; also filed as rdar://13048589 .
	        if (deviceIsIOSWithBadTarget) {
	            touch = event.changedTouches[0];
	
	            // In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null
	            targetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;
	            targetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;
	        }
	
	        targetTagName = targetElement.tagName.toLowerCase();
	        if (targetTagName === 'label') {
	            forElement = this.findControl(targetElement);
	            if (forElement) {
	                this.focus(targetElement);
	                if (deviceIsAndroid) {
	                    return false;
	                }
	
	                targetElement = forElement;
	            }
	        } else if (this.needsFocus(targetElement)) {
	
	            // Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.
	            // Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).
	            if (touchEndTime - trackingClickStart > 100 || deviceIsIOS && window.top !== window && targetTagName === 'input') {
	                this.targetElement = null;
	                return false;
	            }
	
	            this.focus(targetElement);
	            this.sendClick(targetElement, event);
	
	            // Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.
	            // Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)
	            //if (!deviceIsIOS || targetTagName !== 'select') {
	            //    this.targetElement = null;
	            //    event.preventDefault();
	            //}
	
	            return false;
	        }
	
	        if (deviceIsIOS && !deviceIsIOS4) {
	
	            // Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled
	            // and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).
	            scrollParent = targetElement.fastClickScrollParent;
	            if (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {
	                return true;
	            }
	        }
	
	        // Prevent the actual click from going though - unless the target node is marked as requiring
	        // real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.
	        if (!this.needsClick(targetElement)) {
	            event.preventDefault();
	            this.sendClick(targetElement, event);
	        }
	
	        return false;
	    };
	
	    /**
	     * On touch cancel, stop tracking the click.
	     *
	     * @returns {void}
	     */
	    FastClick.prototype.onTouchCancel = function () {
	        this.trackingClick = false;
	        this.targetElement = null;
	    };
	
	    /**
	     * Determine mouse events which should be permitted.
	     *
	     * @param {Event} event
	     * @returns {boolean}
	     */
	    FastClick.prototype.onMouse = function (event) {
	
	        // If a target element was never set (because a touch event was never fired) allow the event
	        if (!this.targetElement) {
	            return true;
	        }
	
	        if (event.forwardedTouchEvent) {
	            return true;
	        }
	
	        // Programmatically generated events targeting a specific element should be permitted
	        if (!event.cancelable) {
	            return true;
	        }
	
	        // Derive and check the target element to see whether the mouse event needs to be permitted;
	        // unless explicitly enabled, prevent non-touch click events from triggering actions,
	        // to prevent ghost/doubleclicks.
	        if (!this.needsClick(this.targetElement) || this.cancelNextClick) {
	
	            // Prevent any user-added listeners declared on FastClick element from being fired.
	            if (event.stopImmediatePropagation) {
	                event.stopImmediatePropagation();
	            } else {
	
	                // Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)
	                event.propagationStopped = true;
	            }
	
	            // Cancel the event
	            event.stopPropagation();
	            event.preventDefault();
	
	            return false;
	        }
	
	        // If the mouse event is permitted, return true for the action to go through.
	        return true;
	    };
	
	    /**
	     * On actual clicks, determine whether this is a touch-generated click, a click action occurring
	     * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or
	     * an actual click which should be permitted.
	     *
	     * @param {Event} event
	     * @returns {boolean}
	     */
	    FastClick.prototype.onClick = function (event) {
	        var permitted;
	
	        // It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.
	        if (this.trackingClick) {
	            this.targetElement = null;
	            this.trackingClick = false;
	            return true;
	        }
	
	        // Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.
	        if (event.target.type === 'submit' && event.detail === 0) {
	            return true;
	        }
	
	        permitted = this.onMouse(event);
	
	        // Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.
	        if (!permitted) {
	            this.targetElement = null;
	        }
	
	        // If clicks are permitted, return true for the action to go through.
	        return permitted;
	    };
	
	    /**
	     * Remove all FastClick's event listeners.
	     *
	     * @returns {void}
	     */
	    FastClick.prototype.destroy = function () {
	        var layer = this.layer;
	
	        if (deviceIsAndroid) {
	            layer.removeEventListener('mouseover', this.onMouse, true);
	            layer.removeEventListener('mousedown', this.onMouse, true);
	            layer.removeEventListener('mouseup', this.onMouse, true);
	        }
	
	        layer.removeEventListener('click', this.onClick, true);
	        layer.removeEventListener('touchstart', this.onTouchStart, false);
	        layer.removeEventListener('touchmove', this.onTouchMove, false);
	        layer.removeEventListener('touchend', this.onTouchEnd, false);
	        layer.removeEventListener('touchcancel', this.onTouchCancel, false);
	    };
	
	    /**
	     * Check whether FastClick is needed.
	     *
	     * @param {Element} layer The layer to listen on
	     */
	    FastClick.notNeeded = function (layer) {
	        var metaViewport;
	        var chromeVersion;
	        var blackberryVersion;
	        var firefoxVersion;
	
	        // Devices that don't support touch don't need FastClick
	        if (typeof window.ontouchstart === 'undefined') {
	            return true;
	        }
	
	        // Chrome version - zero for other browsers
	        chromeVersion = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];
	
	        if (chromeVersion) {
	
	            if (deviceIsAndroid) {
	                metaViewport = document.querySelector('meta[name=viewport]');
	
	                if (metaViewport) {
	                    // Chrome on Android with user-scalable="no" doesn't need FastClick (issue #89)
	                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
	                        //HACK by zongze.li add 757--759: hack for chrome version 30、37 in vivo x5 pro and HuaWei mate7, which still has 300ms delay with user-scalable=no
	                        if (chromeVersion <= 38) {
	                            return false;
	                        }
	
	                        return true;
	                    }
	                    // Chrome 32 and above with width=device-width or less don't need FastClick
	
	                    //HACK by zongze.li change 31 into 38: hack for chrome version 30、37 in vivo x5 pro and HuaWei mate7, which still has 300ms delay with width=device-width
	
	                    //origin: if (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {
	
	                    if (chromeVersion > 38 && document.documentElement.scrollWidth <= window.outerWidth) {
	                        return true;
	                    }
	                }
	
	                // Chrome desktop doesn't need FastClick (issue #15)
	            } else {
	                return true;
	            }
	        }
	
	        if (deviceIsBlackBerry10) {
	            blackberryVersion = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/);
	
	            // BlackBerry 10.3+ does not require Fastclick library.
	            // https://github.com/ftlabs/fastclick/issues/251
	            if (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {
	                metaViewport = document.querySelector('meta[name=viewport]');
	
	                if (metaViewport) {
	                    // user-scalable=no eliminates click delay.
	                    if (metaViewport.content.indexOf('user-scalable=no') !== -1) {
	                        return true;
	                    }
	                    // width=device-width (or less than device-width) eliminates click delay.
	                    if (document.documentElement.scrollWidth <= window.outerWidth) {
	                        return true;
	                    }
	                }
	            }
	        }
	
	        // IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)
	        if (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {
	            return true;
	        }
	
	        // Firefox version - zero for other browsers
	        firefoxVersion = +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1];
	
	        if (firefoxVersion >= 27) {
	            // Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896
	
	            metaViewport = document.querySelector('meta[name=viewport]');
	            if (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {
	                return true;
	            }
	        }
	
	        // IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version
	        // http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx
	        if (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {
	            return true;
	        }
	
	        return false;
	    };
	
	    /**
	     * Factory method for creating a FastClick object
	     *
	     * @param {Element} layer The layer to listen on
	     * @param {Object} [options={}] The options to override the defaults
	     */
	    FastClick.attach = function (layer, options) {
	        return new FastClick(layer, options);
	    };
	
	    if ("function" === 'function' && _typeof(__webpack_require__(6)) === 'object' && __webpack_require__(6)) {
	
	        // AMD. Register as an anonymous module.
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return FastClick;
	        }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof module !== 'undefined' && module.exports) {
	        module.exports = FastClick.attach;
	        module.exports.FastClick = FastClick;
	    } else {
	        window.FastClick = FastClick;
	    }
	})();

/***/ },
/* 5 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	exports.getArrayByLength = getArrayByLength;
	exports.isFunction = isFunction;
	exports.isArrayLike = isArrayLike;
	exports.shallowEqual = shallowEqual;
	exports.getElementOffsetY = getElementOffsetY;
	exports.inheritProps = inheritProps;
	exports.getOnlyChild = getOnlyChild;
	exports.isBadAndroid = isBadAndroid;
	exports.getRAF = getRAF;
	exports.whichTransitionEventPrefix = whichTransitionEventPrefix;
	exports.focus = focus;
	exports.blur = blur;
	exports.supportsPassiveOption = supportsPassiveOption;
	exports.autoBlur = autoBlur;
	function getArrayByLength(length) {
	    var ret = [];
	    for (var i = 0; i < length; i++) {
	        ret[i] = null;
	    }
	    return ret;
	}
	
	function is(x, y) {
	    var ret = void 0;
	    if (x === y) {
	        ret = x !== 0 || y !== 0 || 1 / x === 1 / y;
	    } else {
	        // return x !== x && y !== y;
	        ret = isNaN(x) && isNaN(y);
	    }
	
	    return ret;
	}
	
	// 判断是否为 Function
	function isFunction(it) {
	    return Object.prototype.toString.call(it) === '[object Function]';
	}
	
	var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	
	function isArrayLike(collection) {
	    var length = collection.length;
	    return typeof length === 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	}
	
	function shallowEqual(objA, objB) {
	    if (is(objA, objB)) {
	        return true;
	    }
	
	    if ((typeof objA === 'undefined' ? 'undefined' : _typeof(objA)) !== 'object' || objA === null || (typeof objB === 'undefined' ? 'undefined' : _typeof(objB)) !== 'object' || objB === null) {
	        return false;
	    }
	
	    var keysA = Object.keys(objA);
	    var keysB = Object.keys(objB);
	
	    if (keysA.length !== keysB.length) {
	        return false;
	    }
	
	    var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	    for (var i = 0; i < keysA.length; i++) {
	        if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	            return false;
	        }
	    }
	
	    return true;
	}
	
	function getElementOffsetY(ele, parent) {
	    var y = 0;
	    while (ele !== parent && ele !== null) {
	        y += ele.offsetTop;
	        ele = ele.offsetParent;
	    }
	    return y;
	}
	
	var DELAY_TIME_FOR_INFINITE_WITHOUT_HEIGHT = exports.DELAY_TIME_FOR_INFINITE_WITHOUT_HEIGHT = 250;
	
	function inheritProps(props, attrs) {
	    return attrs.reduce(function (ret, attr) {
	        ret[attr] = props[attr];
	        return ret;
	    }, {});
	}
	
	/**
	 * @method getOnlyChild
	 * @return vnode|false
	 * @description 判断虚拟节点是否只拥有一个子节点，取代针对原生 React 的 !children.length，以支持 Qreact
	 * In React : vnode.children = {xxx}
	 * In Qreact: vnode.children = [{xxx}]
	 */
	function getOnlyChild(props) {
	    var children = props.children;
	    if (children) {
	        // for React
	        if (!children.length) return children;
	        // for Qreact
	        if (children.length === 1) return children[0];
	    }
	    return false;
	}
	/*
	    This should find all Android browsers lower than build 535.19 (both stock browser and webview)
	    - galaxy S2 is ok
	    - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`
	    - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	    - galaxy S3 is badAndroid (stock brower, webview)
	    `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	    - galaxy S4 is badAndroid (stock brower, webview)
	    `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	    - galaxy S5 is OK
	    `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
	    - galaxy S6 is OK
	    `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
	    */
	function isBadAndroid() {
	    var appVersion = window.navigator.appVersion;
	    var _isBadAndroid = false;
	    // Android browser is not a chrome browser.
	    if (/Android/.test(appVersion) && !/Chrome\/\d/.test(appVersion)) {
	        var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
	        if (safariVersion && (typeof safariVersion === 'undefined' ? 'undefined' : _typeof(safariVersion)) === 'object' && safariVersion.length >= 2) {
	            _isBadAndroid = parseFloat(safariVersion[1]) < 535.19;
	        } else {
	            _isBadAndroid = true;
	        }
	    } else {
	        _isBadAndroid = false;
	    }
	
	    return _isBadAndroid;
	}
	
	function getRAF() {
	    function basicRAF(callback) {
	        return window.setTimeout(callback, 1000 / 60);
	    }
	
	    var rAF = window.cancelAnimationFrame && window.requestAnimationFrame || window.webkitCancelAnimationFrame && window.webkitRequestAnimationFrame || window.mozCancelAnimationFrame && window.mozRequestAnimationFrame || window.oCancelAnimationFrame && window.oRequestAnimationFrame || window.msCancelAnimationFrame && window.msRequestAnimationFrame || basicRAF;
	
	    var cancelrAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || window.clearTimeout;
	
	    if (isBadAndroid()) {
	        rAF = basicRAF;
	        cancelrAF = window.clearTimeout;
	    }
	
	    return { rAF: rAF, cancelrAF: cancelrAF };
	}
	
	function whichTransitionEventPrefix() {
	    var result = void 0;
	    var el = document.createElement('fakeelement');
	    var transitions = {
	        transition: 'transition',
	        WebkitTransition: 'webkitTransition'
	    };
	    Object.keys(transitions).some(function (t) {
	        if (el.style[t] !== undefined) {
	            result = transitions[t];
	            return true;
	        }
	        return false;
	    });
	    return result;
	}
	
	function focus(dom) {
	    if (dom.focus) {
	        dom.focus();
	    }
	}
	
	function blur(dom) {
	    if (document.activeElement === dom) {
	        if (dom.blur) {
	            dom.blur();
	        } else {
	            focus(document.body);
	        }
	    }
	}
	
	function supportsPassiveOption() {
	    var _supportsPassiveOption = false;
	    try {
	        addEventListener('test', null, Object.defineProperty({}, 'passive', {
	            get: function get() {
	                _supportsPassiveOption = true;
	            }
	        }));
	    } catch (e) {}
	    return _supportsPassiveOption;
	}
	
	// 修复一些手机上 blur 行为的 bug，在 touchstart 的时候自动 blur
	function autoBlur() {
	    // 防止多次调用
	    if (!window.__autoBlur) {
	        window.__autoBlur = true;
	    } else {
	        return;
	    }
	
	    var focusTags = ['INPUT', 'TEXTAREA'];
	    var _contains = document.compareDocumentPosition ? function (a, b) {
	        return !!(a.compareDocumentPosition(b) & 16);
	    } : function (a, b) {
	        return a !== b && (a.contains ? a.contains(b) : true);
	    };
	
	    function _blur(container) {
	        var el = document.activeElement;
	        var _container = container || document.body;
	
	        if (el && _contains(_container, el) && typeof el.blur === 'function') {
	            el.blur();
	        }
	    }
	
	    var passive = supportsPassiveOption() ? {
	        passive: true
	    } : false;
	
	    document.body.addEventListener('touchstart', function (e) {
	        if (focusTags.indexOf(e.target.tagName.toUpperCase()) === -1) {
	            _blur();
	        }
	    }, passive);
	}

/***/ },
/* 6 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {module.exports = __webpack_amd_options__;
	
	/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var invariant = __webpack_require__(8);
	var defaultClickRejectionStrategy = __webpack_require__(9);
	
	var alreadyInjected = false;
	
	module.exports = function injectTapEventPlugin(strategyOverrides) {
	  strategyOverrides = strategyOverrides || {}
	  var shouldRejectClick = strategyOverrides.shouldRejectClick || defaultClickRejectionStrategy;
	
	  if (true) {
	    invariant(
	      !alreadyInjected,
	      'injectTapEventPlugin(): Can only be called once per application lifecycle.\n\n\
	It is recommended to call injectTapEventPlugin() just before you call \
	ReactDOM.render(). If you are using an external library which calls injectTapEventPlugin() \
	itself, please contact the maintainer as it shouldn\'t be called in library code and \
	should be injected by the application.'
	    )
	  }
	
	  alreadyInjected = true;
	
	  __webpack_require__(10).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.EventPluginHub.injection.injectEventPluginsByName({
	    'TapEventPlugin': __webpack_require__(11)(shouldRejectClick)
	  });
	};
	


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */
	
	var validateFormat = function validateFormat(format) {};
	
	if (true) {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}
	
	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);
	
	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }
	
	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}
	
	module.exports = invariant;

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = function(lastTouchEvent, clickTimestamp) {
	  if (lastTouchEvent && (clickTimestamp - lastTouchEvent) < 750) {
	    return true;
	  }
	};


/***/ },
/* 10 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_10__;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule TapEventPlugin
	 * @flow
	 */
	
	'use strict';
	
	var EventPropagators = __webpack_require__(10).__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.EventPropagators;
	var TouchEventUtils = __webpack_require__(12);
	var SyntheticEvent = __webpack_require__(13);
	
	function isEndish(topLevelType) {
	  return (
	    topLevelType === 'topMouseUp' ||
	    topLevelType === 'topTouchEnd' ||
	    topLevelType === 'topTouchCancel'
	  );
	}
	
	function isStartish(topLevelType) {
	  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
	}
	
	/**
	 * Number of pixels that are tolerated in between a `touchStart` and `touchEnd`
	 * in order to still be considered a 'tap' event.
	 */
	var tapMoveThreshold = 10;
	var startCoords = {x: 0, y: 0};
	
	var Axis = {
	  x: {page: 'pageX', client: 'clientX', envScroll: 'currentPageScrollLeft'},
	  y: {page: 'pageY', client: 'clientY', envScroll: 'currentPageScrollTop'}
	};
	
	function getAxisCoordOfEvent(
	  axis,
	  nativeEvent
	) {
	  var singleTouch = TouchEventUtils.extractSingleTouch(nativeEvent);
	  if (singleTouch) {
	    return singleTouch[axis.page];
	  }
	  return nativeEvent[axis.page];
	}
	
	function getDistance(coords, nativeEvent) {
	  var pageX = getAxisCoordOfEvent(Axis.x, nativeEvent);
	  var pageY = getAxisCoordOfEvent(Axis.y, nativeEvent);
	  return Math.pow(
	    Math.pow(pageX - coords.x, 2) + Math.pow(pageY - coords.y, 2),
	    0.5
	  );
	}
	
	var touchEvents = [
	  'topTouchStart',
	  'topTouchCancel',
	  'topTouchEnd',
	  'topTouchMove'
	];
	
	var dependencies = ['topMouseDown', 'topMouseMove', 'topMouseUp'].concat(
	  touchEvents
	);
	
	var eventTypes = {
	  touchTap: {
	    phasedRegistrationNames: {
	      bubbled: 'onTouchTap',
	      captured: 'onTouchTapCapture'
	    },
	    dependencies: dependencies
	  }
	};
	
	var usedTouchTime = 0;
	
	// var TapEventPlugin = {
	function createTapEventPlugin(shouldRejectClick) {
	  return {
	    tapMoveThreshold: tapMoveThreshold,
	
	    eventTypes: eventTypes,
	
	    extractEvents: function(
	      topLevelType,
	      targetInst,
	      nativeEvent,
	      nativeEventTarget
	    ) {
	      if (!isStartish(topLevelType) && !isEndish(topLevelType)) {
	        return null;
	      }
	      // on ios, there is a delay after touch event and synthetic
	      // mouse events, so that user can perform double tap
	      // solution: ignore mouse events following touchevent within small timeframe
	      if (touchEvents.indexOf(topLevelType) !== -1) {
	        usedTouchTime = Date.now();
	      } else {
	        if (shouldRejectClick(usedTouchTime, Date.now())) {
	          return null;
	        }
	      }
	      var event = null;
	      var distance = getDistance(startCoords, nativeEvent);
	      if (isEndish(topLevelType) && distance < tapMoveThreshold) {
	        event = SyntheticEvent.getPooled(
	          eventTypes.touchTap,
	          targetInst,
	          nativeEvent,
	          nativeEventTarget
	        );
	      }
	      if (isStartish(topLevelType)) {
	        startCoords.x = getAxisCoordOfEvent(Axis.x, nativeEvent);
	        startCoords.y = getAxisCoordOfEvent(Axis.y, nativeEvent);
	      } else if (isEndish(topLevelType)) {
	        startCoords.x = 0;
	        startCoords.y = 0;
	      }
	      EventPropagators.accumulateTwoPhaseDispatches(event);
	      return event;
	    }
	  };
	}
	
	module.exports = createTapEventPlugin;


/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	var TouchEventUtils = {
	  /**
	   * Utility function for common case of extracting out the primary touch from a
	   * touch event.
	   * - `touchEnd` events usually do not have the `touches` property.
	   *   http://stackoverflow.com/questions/3666929/
	   *   mobile-sarai-touchend-event-not-firing-when-last-touch-is-removed
	   *
	   * @param {Event} nativeEvent Native event that may or may not be a touch.
	   * @return {TouchesObject?} an object with pageX and pageY or null.
	   */
	  extractSingleTouch: function extractSingleTouch(nativeEvent) {
	    var touches = nativeEvent.touches;
	    var changedTouches = nativeEvent.changedTouches;
	    var hasTouches = touches && touches.length > 0;
	    var hasChangedTouches = changedTouches && changedTouches.length > 0;
	
	    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
	  }
	};
	
	module.exports = TouchEventUtils;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule SyntheticEvent
	 */
	
	/* eslint valid-typeof: 0 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(14);
	var invariant = __webpack_require__(8);
	
	var didWarnForAddedNewProperty = false;
	var isProxySupported = typeof Proxy === 'function';
	var EVENT_POOL_SIZE = 10;
	
	var __DEV__ = ("dev") !== 'production';
	
	if (__DEV__) {
	  var warning = __webpack_require__(15);
	}
	
	var shouldBeReleasedProperties = [
	  'dispatchConfig',
	  '_targetInst',
	  'nativeEvent',
	  'isDefaultPrevented',
	  'isPropagationStopped',
	  '_dispatchListeners',
	  '_dispatchInstances'
	];
	
	/**
	 * @interface Event
	 * @see http://www.w3.org/TR/DOM-Level-3-Events/
	 */
	var EventInterface = {
	  type: null,
	  target: null,
	  // currentTarget is set when dispatching; no use in copying it here
	  currentTarget: emptyFunction.thatReturnsNull,
	  eventPhase: null,
	  bubbles: null,
	  cancelable: null,
	  timeStamp: function(event) {
	    return event.timeStamp || Date.now();
	  },
	  defaultPrevented: null,
	  isTrusted: null
	};
	
	/**
	 * Synthetic events are dispatched by event plugins, typically in response to a
	 * top-level event delegation handler.
	 *
	 * These systems should generally use pooling to reduce the frequency of garbage
	 * collection. The system should check `isPersistent` to determine whether the
	 * event should be released into the pool after being dispatched. Users that
	 * need a persisted event should invoke `persist`.
	 *
	 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
	 * normalizing browser quirks. Subclasses do not necessarily have to implement a
	 * DOM interface; custom application-specific events can also subclass this.
	 *
	 * @param {object} dispatchConfig Configuration used to dispatch this event.
	 * @param {*} targetInst Marker identifying the event target.
	 * @param {object} nativeEvent Native browser event.
	 * @param {DOMEventTarget} nativeEventTarget Target node.
	 */
	function SyntheticEvent(
	  dispatchConfig,
	  targetInst,
	  nativeEvent,
	  nativeEventTarget
	) {
	  if (__DEV__) {
	    // these have a getter/setter for warnings
	    delete this.nativeEvent;
	    delete this.preventDefault;
	    delete this.stopPropagation;
	  }
	
	  this.dispatchConfig = dispatchConfig;
	  this._targetInst = targetInst;
	  this.nativeEvent = nativeEvent;
	
	  var Interface = this.constructor.Interface;
	  for (var propName in Interface) {
	    if (!Interface.hasOwnProperty(propName)) {
	      continue;
	    }
	    if (__DEV__) {
	      delete this[propName]; // this has a getter/setter for warnings
	    }
	    var normalize = Interface[propName];
	    if (normalize) {
	      this[propName] = normalize(nativeEvent);
	    } else {
	      if (propName === 'target') {
	        this.target = nativeEventTarget;
	      } else {
	        this[propName] = nativeEvent[propName];
	      }
	    }
	  }
	
	  var defaultPrevented = nativeEvent.defaultPrevented != null
	    ? nativeEvent.defaultPrevented
	    : nativeEvent.returnValue === false;
	  if (defaultPrevented) {
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  } else {
	    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
	  }
	  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
	  return this;
	}
	
	Object.assign(SyntheticEvent.prototype, {
	  preventDefault: function() {
	    this.defaultPrevented = true;
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.preventDefault) {
	      event.preventDefault();
	    } else if (typeof event.returnValue !== 'unknown') {
	      event.returnValue = false;
	    }
	    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
	  },
	
	  stopPropagation: function() {
	    var event = this.nativeEvent;
	    if (!event) {
	      return;
	    }
	
	    if (event.stopPropagation) {
	      event.stopPropagation();
	    } else if (typeof event.cancelBubble !== 'unknown') {
	      // The ChangeEventPlugin registers a "propertychange" event for
	      // IE. This event does not support bubbling or cancelling, and
	      // any references to cancelBubble throw "Member not found".  A
	      // typeof check of "unknown" circumvents this issue (and is also
	      // IE specific).
	      event.cancelBubble = true;
	    }
	
	    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * We release all dispatched `SyntheticEvent`s after each event loop, adding
	   * them back into the pool. This allows a way to hold onto a reference that
	   * won't be added back into the pool.
	   */
	  persist: function() {
	    this.isPersistent = emptyFunction.thatReturnsTrue;
	  },
	
	  /**
	   * Checks if this event should be released back into the pool.
	   *
	   * @return {boolean} True if this should not be released, false otherwise.
	   */
	  isPersistent: emptyFunction.thatReturnsFalse,
	
	  /**
	   * `PooledClass` looks for `destructor` on each instance it releases.
	   */
	  destructor: function() {
	    var Interface = this.constructor.Interface;
	    for (var propName in Interface) {
	      if (__DEV__) {
	        Object.defineProperty(
	          this,
	          propName,
	          getPooledWarningPropertyDefinition(propName, Interface[propName])
	        );
	      } else {
	        this[propName] = null;
	      }
	    }
	    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
	      this[shouldBeReleasedProperties[i]] = null;
	    }
	    if (__DEV__) {
	      Object.defineProperty(
	        this,
	        'nativeEvent',
	        getPooledWarningPropertyDefinition('nativeEvent', null)
	      );
	      Object.defineProperty(
	        this,
	        'preventDefault',
	        getPooledWarningPropertyDefinition('preventDefault', emptyFunction)
	      );
	      Object.defineProperty(
	        this,
	        'stopPropagation',
	        getPooledWarningPropertyDefinition('stopPropagation', emptyFunction)
	      );
	    }
	  }
	});
	
	SyntheticEvent.Interface = EventInterface;
	
	/**
	 * Helper to reduce boilerplate when creating subclasses.
	 *
	 * @param {function} Class
	 * @param {?object} Interface
	 */
	SyntheticEvent.augmentClass = function(Class, Interface) {
	  var Super = this;
	
	  var E = function() {};
	  E.prototype = Super.prototype;
	  var prototype = new E();
	
	  Object.assign(prototype, Class.prototype);
	  Class.prototype = prototype;
	  Class.prototype.constructor = Class;
	
	  Class.Interface = Object.assign({}, Super.Interface, Interface);
	  Class.augmentClass = Super.augmentClass;
	  addEventPoolingTo(Class);
	};
	
	/** Proxying after everything set on SyntheticEvent
	  * to resolve Proxy issue on some WebKit browsers
	  * in which some Event properties are set to undefined (GH#10010)
	  */
	if (__DEV__) {
	  if (isProxySupported) {
	    /*eslint-disable no-func-assign */
	    SyntheticEvent = new Proxy(SyntheticEvent, {
	      construct: function(target, args) {
	        return this.apply(target, Object.create(target.prototype), args);
	      },
	      apply: function(constructor, that, args) {
	        return new Proxy(constructor.apply(that, args), {
	          set: function(target, prop, value) {
	            if (
	              prop !== 'isPersistent' &&
	              !target.constructor.Interface.hasOwnProperty(prop) &&
	              shouldBeReleasedProperties.indexOf(prop) === -1
	            ) {
	              warning(
	                didWarnForAddedNewProperty || target.isPersistent(),
	                "This synthetic event is reused for performance reasons. If you're " +
	                  "seeing this, you're adding a new property in the synthetic event object. " +
	                  'The property is never released. See ' +
	                  'https://fb.me/react-event-pooling for more information.'
	              );
	              didWarnForAddedNewProperty = true;
	            }
	            target[prop] = value;
	            return true;
	          }
	        });
	      }
	    });
	    /*eslint-enable no-func-assign */
	  }
	}
	
	addEventPoolingTo(SyntheticEvent);
	
	module.exports = SyntheticEvent;
	
	/**
	  * Helper to nullify syntheticEvent instance properties when destructing
	  *
	  * @param {String} propName
	  * @param {?object} getVal
	  * @return {object} defineProperty object
	  */
	function getPooledWarningPropertyDefinition(propName, getVal) {
	  var isFunction = typeof getVal === 'function';
	  return {
	    configurable: true,
	    set: set,
	    get: get
	  };
	
	  function set(val) {
	    var action = isFunction ? 'setting the method' : 'setting the property';
	    warn(action, 'This is effectively a no-op');
	    return val;
	  }
	
	  function get() {
	    var action = isFunction ? 'accessing the method' : 'accessing the property';
	    var result = isFunction
	      ? 'This is a no-op function'
	      : 'This is set to null';
	    warn(action, result);
	    return getVal;
	  }
	
	  function warn(action, result) {
	    var warningCondition = false;
	    warning(
	      warningCondition,
	      "This synthetic event is reused for performance reasons. If you're seeing this, " +
	        "you're %s `%s` on a released/nullified synthetic event. %s. " +
	        'If you must keep the original synthetic event around, use event.persist(). ' +
	        'See https://fb.me/react-event-pooling for more information.',
	      action,
	      propName,
	      result
	    );
	  }
	}
	
	function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
	  var EventConstructor = this;
	  if (EventConstructor.eventPool.length) {
	    var instance = EventConstructor.eventPool.pop();
	    EventConstructor.call(
	      instance,
	      dispatchConfig,
	      targetInst,
	      nativeEvent,
	      nativeInst
	    );
	    return instance;
	  }
	  return new EventConstructor(
	    dispatchConfig,
	    targetInst,
	    nativeEvent,
	    nativeInst
	  );
	}
	
	function releasePooledEvent(event) {
	  var EventConstructor = this;
	  invariant(
	    event instanceof EventConstructor,
	    'Trying to release an event instance  into a pool of a different type.'
	  );
	  event.destructor();
	  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
	    EventConstructor.eventPool.push(event);
	  }
	}
	
	function addEventPoolingTo(EventConstructor) {
	  EventConstructor.eventPool = [];
	  EventConstructor.getPooled = getPooledEvent;
	  EventConstructor.release = releasePooledEvent;
	}


/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * 
	 */
	
	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}
	
	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};
	
	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};
	
	module.exports = emptyFunction;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 */
	
	'use strict';
	
	var emptyFunction = __webpack_require__(14);
	
	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	
	var warning = emptyFunction;
	
	if (true) {
	  var printWarning = function printWarning(format) {
	    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }
	
	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	
	  warning = function warning(condition, format) {
	    if (format === undefined) {
	      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	    }
	
	    if (format.indexOf('Failed Composite propType: ') === 0) {
	      return; // Ignore CompositeComponent proptype check.
	    }
	
	    if (!condition) {
	      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }
	
	      printWarning.apply(undefined, [format].concat(args));
	    }
	  };
	}
	
	module.exports = warning;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(17).polyfill()


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var now = __webpack_require__(18)
	  , root = typeof window === 'undefined' ? global : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix]
	
	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix]
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix]
	}
	
	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60
	
	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = now()
	        , next = Math.max(0, frameDuration - (_now - last))
	      last = next + _now
	      setTimeout(function() {
	        var cp = queue.slice(0)
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last)
	            } catch(e) {
	              setTimeout(function() { throw e }, 0)
	            }
	          }
	        }
	      }, Math.round(next))
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    })
	    return id
	  }
	
	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true
	      }
	    }
	  }
	}
	
	module.exports = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	}
	module.exports.cancel = function() {
	  caf.apply(root, arguments)
	}
	module.exports.polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf
	  object.cancelAnimationFrame = caf
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;
	
	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }
	
	}).call(this);
	
	//# sourceMappingURL=performance-now.js.map
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(19)))

/***/ },
/* 19 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	process.prependListener = noop;
	process.prependOnceListener = noop;
	
	process.listeners = function (name) { return [] }
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 20 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 21 */,
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _popup = __webpack_require__(31);
	
	var _popup2 = _interopRequireDefault(_popup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component ActionSheet
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 底部弹出菜单组件，基于Popup组件实现。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	类似iOS原生API调用方式。
	点击菜单选项后自动关闭组件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./actionSheet.md}{instruUrl: actionsheet.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var that = null;
	var container = document.createElement('div');
	
	var ActionSheet = function (_Component) {
	    _inherits(ActionSheet, _Component);
	
	    function ActionSheet() {
	        _classCallCheck(this, ActionSheet);
	
	        var _this = _possibleConstructorReturn(this, (ActionSheet.__proto__ || Object.getPrototypeOf(ActionSheet)).call(this));
	
	        _this.state = {
	            show: false,
	            cancelText: '',
	            menu: [],
	            title: ''
	        };
	        that = _this;
	        return _this;
	    }
	
	    _createClass(ActionSheet, [{
	        key: 'hide',
	        value: function hide() {
	            this.setState({
	                show: false
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _state = this.state,
	                show = _state.show,
	                cancelText = _state.cancelText,
	                menu = _state.menu,
	                title = _state.title;
	
	
	            var menuItem = menu.map(function (item, i) {
	                return _react2.default.createElement(
	                    _touchable2.default,
	                    {
	                        onTap: function onTap() {
	                            _this2.hide();
	                            item.onTap();
	                        },
	                        key: i + 1,
	                        touchClass: 'item-touch'
	                    },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'item' },
	                        item.text
	                    )
	                );
	            });
	
	            var titleItem = !!title ? _react2.default.createElement(
	                'div',
	                { className: 'title', key: 0 },
	                title
	            ) : null;
	            menuItem.unshift(titleItem);
	            return _react2.default.createElement(
	                _popup2.default,
	                {
	                    show: show,
	                    onMaskTap: function onMaskTap() {
	                        return _this2.hide();
	                    }
	                },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'yo-actionsheet' },
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'menu' },
	                        menuItem
	                    ),
	                    _react2.default.createElement(
	                        'ul',
	                        { className: 'action' },
	                        _react2.default.createElement(
	                            _touchable2.default,
	                            { onTap: function onTap() {
	                                    return _this2.hide();
	                                }, touchClass: 'item-touch' },
	                            _react2.default.createElement(
	                                'li',
	                                {
	                                    className: 'item',
	                                    onTouchTap: function onTouchTap() {
	                                        return _this2.hide();
	                                    }
	                                },
	                                cancelText
	                            )
	                        )
	                    )
	                )
	            );
	        }
	    }]);
	
	    return ActionSheet;
	}(_react.Component);
	
	_reactDom2.default.render(_react2.default.createElement(ActionSheet, null), container);
	
	/**
	 * @method ActionSheet
	 * @param {Object} obj 组件需要的对象参数，主要包含标题、菜单数组、取消按钮文字。
	 * @param {Array} obj.menu 菜单选项数组，包含每个选项的文字和回调函数。
	 * @param {String} [obj.title] 菜单选项标题，默认为空。
	 * @param {String} [obj.cancelText] 组件取消按钮文字，默认'取消'。
	 * @description 打开ActionSheet组件。
	 */
	
	exports.default = function (_ref) {
	    var menu = _ref.menu,
	        _ref$title = _ref.title,
	        title = _ref$title === undefined ? '' : _ref$title,
	        _ref$cancelText = _ref.cancelText,
	        cancelText = _ref$cancelText === undefined ? '取消' : _ref$cancelText;
	    return that.setState({
	        show: true,
	        menu: menu,
	        title: title,
	        cancelText: cancelText
	    });
	};

/***/ },
/* 23 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_23__;

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _gesture = __webpack_require__(30);
	
	var _gesture2 = _interopRequireDefault(_gesture);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Touchable
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description `Touchable` 组件是一个"虚拟"组件，它不会真的在文档中创建一个 `dom` 节点作为根节点，而是返回它唯一的子组件的一个克隆，并给它绑定一些手势事件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 除了能给 `dom` 绑定 `tap` 事件之外，它还解决了一些移动端的手势"顽疾"，例如触摸反馈和滚动/触摸的冲突问题。在需要绑定 `tap` 事件的情况下，应该优先使用 `Touchable`，
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 而不是直接把 `tap` 事件回调绑定给 `dom`。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./touchable.md}{instruUrl: touchable.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var Touchable = function (_Component) {
	    _inherits(Touchable, _Component);
	
	    function Touchable() {
	        _classCallCheck(this, Touchable);
	
	        return _possibleConstructorReturn(this, (Touchable.__proto__ || Object.getPrototypeOf(Touchable)).apply(this, arguments));
	    }
	
	    _createClass(Touchable, [{
	        key: 'render',
	        value: function render() {
	            if (true) {
	                if (this.props.touchClass == null && !this.props.internalUse) {
	                    console.error('yo-touchable: Touchable组件没有设置touchClass, 出于用户体验考虑, 应该尽量给触摸区域添加触摸反馈。');
	                }
	            }
	
	            var onlyChild = _react2.default.Children.only(this.props.children);
	            var gestureObj = (0, _gesture2.default)({
	                component: this,
	                scroller: this.context.scroller,
	                swipeMenuList: this.context.swipeMenuList,
	                activeClass: this.props.touchClass,
	                onTap: this.props.onTap,
	                onTouchStart: this.props.onTouchStart,
	                disabled: this.props.disabled
	            });
	            var onTouchStart = gestureObj.onTouchStart,
	                onTouchMove = gestureObj.onTouchMove,
	                onTouchEnd = gestureObj.onTouchEnd,
	                onTouchCancel = gestureObj.onTouchCancel;
	
	
	            return _react2.default.cloneElement(onlyChild, { onTouchStart: onTouchStart, onTouchMove: onTouchMove, onTouchEnd: onTouchEnd, onTouchCancel: onTouchCancel });
	        }
	    }]);
	
	    return Touchable;
	}(_react.Component);
	
	Touchable.propTypes = {
	    /**
	     * @property touchClass
	     * @type String
	     * @default null
	     * @description 触摸Touchable时附加的className，可以用来实现Native常见的触摸反馈功能(例如给触摸区域添加深色背景或者改变透明度等等)。
	     */
	    touchClass: _propTypes2.default.string,
	    /**
	     * @property onTap
	     * @type Function
	     * @default null
	     * @param {DOMElement} target tap事件的target
	     * @description 给Touchable绑定的onTap事件。
	     */
	    onTap: _propTypes2.default.func,
	    /**
	     * @property disabled
	     * @type Bool
	     * @default false
	     * @description Touchable是否处于可点击状态，如果设为true，那么onTap事件回调和触摸反馈效果都不可用。
	     * @version 3.0.7
	     */
	    disabled: _propTypes2.default.bool,
	    /**
	     * @skip 给List定制的属性
	     */
	    onTouchStart: _propTypes2.default.func,
	    /**
	     * @skip 内部使用标志
	     */
	    internalUse: _propTypes2.default.bool,
	    children: _propTypes2.default.object
	};
	Touchable.defaultProps = {
	    onTouchStart: function onTouchStart() {},
	    touchClass: null,
	    onTap: function onTap() {},
	    internalUse: false,
	    disabled: false
	};
	Touchable.contextTypes = {
	    scroller: _propTypes2.default.object,
	    swipeMenuList: _propTypes2.default.object
	};
	exports.default = Touchable;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	if (true) {
	  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
	    Symbol.for &&
	    Symbol.for('react.element')) ||
	    0xeac7;
	
	  var isValidElement = function(object) {
	    return typeof object === 'object' &&
	      object !== null &&
	      object.$$typeof === REACT_ELEMENT_TYPE;
	  };
	
	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = __webpack_require__(26)(isValidElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = require('./factoryWithThrowingShims')();
	}


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var assign = __webpack_require__(27);
	
	var ReactPropTypesSecret = __webpack_require__(28);
	var checkPropTypes = __webpack_require__(29);
	
	var printWarning = function() {};
	
	if (true) {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	
	function emptyFunctionThatReturnsNull() {
	  return null;
	}
	
	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.
	
	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }
	
	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */
	
	  var ANONYMOUS = '<<anonymous>>';
	
	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),
	
	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };
	
	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/
	
	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;
	
	  function createChainableTypeChecker(validate) {
	    if (true) {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;
	
	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (("dev") !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }
	
	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);
	
	    return chainedCheckType;
	  }
	
	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);
	
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }
	
	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	       true ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }
	
	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }
	
	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }
	
	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }
	
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }
	
	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	
	    return createChainableTypeChecker(validate);
	  }
	
	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }
	
	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }
	
	        return true;
	      default:
	        return false;
	    }
	  }
	
	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }
	
	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }
	
	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }
	
	    return false;
	  }
	
	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }
	
	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }
	
	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }
	
	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }
	
	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;
	
	  return ReactPropTypes;
	};


/***/ },
/* 27 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	
	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;
	
	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}
	
		return Object(val);
	}
	
	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}
	
			// Detect buggy property enumeration order in older V8 versions.
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}
	
			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}
	
			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}
	
	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;
	
		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);
	
			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}
	
			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}
	
		return to;
	};


/***/ },
/* 28 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
	
	module.exports = ReactPropTypesSecret;


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	
	'use strict';
	
	var printWarning = function() {};
	
	if (true) {
	  var ReactPropTypesSecret = __webpack_require__(28);
	  var loggedTypeFailures = {};
	
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}
	
	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (true) {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          )
	
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;
	
	          var stack = getStack ? getStack() : '';
	
	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}
	
	module.exports = checkPropTypes;


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = exports.TAP_DELAY = undefined;
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TAP_SLOP = 5; /**
	                   * touchable手势处理,解决Scroller内部的手势冲突
	                   * 在滚动时不会触发active
	                   * 在active之后发生滚动会取消active状态
	                   */
	var TAP_DELAY = exports.TAP_DELAY = 50;
	/**
	 * @param endPoint
	 * @param startPoint
	 * @returns {number}
	 * 根据个点的坐标计算出位移
	 */
	function getDistance(endPoint, startPoint) {
	    return Math.sqrt(Math.pow(endPoint.pageX - startPoint.pageX, 2) + Math.pow(endPoint.pageY - startPoint.pageY, 2));
	}
	
	/**
	 * @param endPoint
	 * @param startPoint
	 * @returns {boolean}
	 * 根据两个点的位移判断是否应该取消Tap事件的触发
	 */
	function onTouchMoveShouldCancelTap(endPoint, startPoint) {
	    return getDistance(endPoint, startPoint) > TAP_SLOP;
	}
	
	/**
	 * @param evt
	 * @returns {touch/null}
	 * 获取触点
	 */
	function getTouchPoint(evt) {
	    return evt.touches.length ? { pageX: evt.touches[0].pageX, pageY: evt.touches[0].pageY } : null;
	}
	
	/**
	 * @param domNode
	 * @param activeClass
	 * 移除item的activeClass
	 */
	function removeActiveClass(domNode, activeClass) {
	    if (domNode && activeClass) {
	        domNode.className = domNode.className.replace(' ' + activeClass, '');
	    }
	}
	
	/**
	 * @param scroller
	 * @returns {boolean}
	 * 判断组件是否在滚动
	 */
	function isScrolling(scroller) {
	    return scroller ? scroller.isScrolling : false;
	}
	
	function isAnySwipeMenuOpen(swipeMenuList) {
	    return swipeMenuList ? swipeMenuList.openIndex !== -1 : false;
	}
	
	// touchStart的位置,是否需要放弃Tap触发,Tap周期(start,move,end)是否已经结束
	var startPoint = void 0,
	    shouldAbortTap = void 0;
	var captured = null;
	
	function _default(_ref) {
	    var component = _ref.component,
	        scroller = _ref.scroller,
	        swipeMenuList = _ref.swipeMenuList,
	        activeClass = _ref.activeClass,
	        onTap = _ref.onTap,
	        _onTouchStart = _ref.onTouchStart,
	        disabled = _ref.disabled;
	
	    var gestureObj = {
	        onTouchStart: function onTouchStart(evt) {
	            var domNode = _reactDom2.default.findDOMNode(component);
	            removeActiveClass(domNode, activeClass);
	            // 如果组件正在滚动,直接放弃Tap触发
	            shouldAbortTap = isScrolling(scroller) || isAnySwipeMenuOpen(swipeMenuList);
	            startPoint = getTouchPoint(evt);
	            _onTouchStart(evt);
	
	            if (!captured) {
	                captured = domNode;
	            }
	            // TAP_DELAY之后再次判断是否要触发Tap,如果这段时间内出现了大的位移,if后面的逻辑就不会执行
	            setTimeout(function () {
	                var className = activeClass;
	                if (!shouldAbortTap && className && captured === domNode && !disabled) {
	                    domNode.className += ' ' + className;
	                }
	            }, TAP_DELAY);
	        },
	        onTouchMove: function onTouchMove(evt) {
	            var domNode = _reactDom2.default.findDOMNode(component);
	            var currentPoint = getTouchPoint(evt);
	            // 根据touchmove的距离判断是否要放弃tap
	            if (onTouchMoveShouldCancelTap(currentPoint, startPoint)) {
	                shouldAbortTap = true;
	                captured = null;
	                removeActiveClass(domNode, activeClass);
	            }
	        },
	        onTouchEnd: function onTouchEnd(evt) {
	            var target = evt.target;
	            var domNode = _reactDom2.default.findDOMNode(component);
	            // 如果需要触发tap,在TAP_DELAY之后触发onTap回调
	            if (!shouldAbortTap && captured === domNode) {
	                setTimeout(function () {
	                    if (!disabled) {
	                        onTap(target);
	                    }
	                    removeActiveClass(domNode, activeClass);
	                    captured = null;
	                }, TAP_DELAY + 10);
	            } else if (shouldAbortTap) {
	                captured = null;
	            }
	        },
	        onTouchCancel: function onTouchCancel() {
	            var domNode = _reactDom2.default.findDOMNode(component);
	            removeActiveClass(domNode, activeClass);
	        }
	    };
	
	    return gestureObj;
	}
	exports.default = _default;

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _modal = __webpack_require__(32);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Popup
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 弹出组件，支持上、下两个方向的弹出组件，基于Modal组件实现。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	可设置组件内容弹出的方向，高度和效果执行时间。
	可设置组件背景遮罩层的上、下偏移量。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./popup.md}{instruUrl: popup.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var noop = function noop() {};
	
	var propTypes = {
	    /**
	     * @property show
	     * @type Bool
	     * @description 组件是否显示
	     * @default false
	     */
	    show: _propTypes2.default.bool,
	    /**
	     * @property duration
	     * @type Number
	     * @description 组件内容显隐时，动画执行时间，单位：ms
	     * @default 200ms
	     */
	    duration: _propTypes2.default.number,
	    /**
	     * @property height
	     * @type String/Number
	     * @description 组件显示的内容高度
	     * @default 'auto'
	     */
	    height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
	    /**
	     * @property direction
	     * @type Enum {'up', 'down'}
	     * @description 组件动画打开方向
	     * @default 'up'
	     */
	    direction: _propTypes2.default.oneOf(['up', 'down']),
	    /**
	     * @method onMaskTap
	     * @type Function
	     * @description 组件背景遮罩层的点击回调
	     * @default () => {}
	     */
	    onMaskTap: _propTypes2.default.func,
	    /**
	     * @method onShow
	     * @type Function
	     * @description 组件打开时，动画触发之前的事件回调
	     * @default () => {}
	     */
	    onShow: _propTypes2.default.func,
	    /**
	     * @method onHide
	     * @type Function
	     * @description 组件关闭时，动画触发之前的事件回调
	     * @default () => {}
	     */
	    onHide: _propTypes2.default.func,
	    /**
	     * @property maskOffset
	     * @type Array<Number>
	     * @description 组件背景遮罩层的上、下偏移量
	     * @default [0, 0]
	     */
	    maskOffset: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    /**
	     * @property extraClass
	     * @type String
	     * @description 附加给组件模态框内容区的额外class
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property wrapperExtraClass
	     * @type String
	     * @version 3.0.10
	     * @description 组附加给组件模态框容器(包含了内容区和蒙层)的额外class
	     */
	    wrapperExtraClass: _propTypes2.default.string,
	    delayBeforeAnimationStart: _propTypes2.default.number,
	    children: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array])
	};
	
	var defaultPros = {
	    duration: 200,
	    height: 'auto',
	    direction: 'up',
	    onMaskTap: noop,
	    onShow: noop,
	    onHide: noop
	};
	
	var Popup = function (_Component) {
	    _inherits(Popup, _Component);
	
	    function Popup() {
	        _classCallCheck(this, Popup);
	
	        return _possibleConstructorReturn(this, (Popup.__proto__ || Object.getPrototypeOf(Popup)).apply(this, arguments));
	    }
	
	    _createClass(Popup, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                show = _props.show,
	                duration = _props.duration,
	                height = _props.height,
	                direction = _props.direction,
	                onMaskTap = _props.onMaskTap,
	                onShow = _props.onShow,
	                onHide = _props.onHide,
	                maskOffset = _props.maskOffset,
	                extraClass = _props.extraClass,
	                wrapperExtraClass = _props.wrapperExtraClass,
	                children = _props.children,
	                delayBeforeAnimationStart = _props.delayBeforeAnimationStart;
	
	            var animation = direction === 'up' ? ['fade-in-up', 'fade-out-down'] : ['fade-in-down', 'fade-out-up'];
	            var align = direction === 'up' ? 'bottom' : 'top';
	            return _react2.default.createElement(
	                _modal2.default,
	                {
	                    show: show,
	                    height: height,
	                    width: '100%',
	                    direction: direction,
	                    onMaskTap: onMaskTap,
	                    onShow: onShow,
	                    onHide: onHide,
	                    align: align,
	                    animation: { animation: animation, duration: duration },
	                    maskOffset: maskOffset,
	                    extraClass: wrapperExtraClass,
	                    contentExtraClass: extraClass,
	                    delayBeforeAnimationStart: delayBeforeAnimationStart
	                    // 阻止 onTouchStart 的事件冒泡。
	                    , onTouchStart: function onTouchStart(evt) {
	                        evt.stopPropagation();
	                    },
	                    onTouchMove: function onTouchMove(evt) {
	                        evt.stopPropagation();
	                    },
	                    onTouchEnd: function onTouchEnd(evt) {
	                        evt.stopPropagation();
	                    },
	                    onTouchCancel: function onTouchCancel(evt) {
	                        evt.stopPropagation();
	                    }
	                },
	                children
	            );
	        }
	    }]);
	
	    return Popup;
	}(_react.Component);
	
	exports.default = Popup;
	
	
	Popup.propTypes = propTypes;
	Popup.defaultProps = defaultPros;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _realmodal = __webpack_require__(33);
	
	var _realmodal2 = _interopRequireDefault(_realmodal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * 这个虚拟的组件将会利用renderSubtreeIntoContainer将Modal从原有的位置移动到body中
	 */
	var Modal = function (_Component) {
	    _inherits(Modal, _Component);
	
	    function Modal() {
	        _classCallCheck(this, Modal);
	
	        return _possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));
	    }
	
	    _createClass(Modal, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            this.wrapper = document.createElement('div');
	            document.body.appendChild(this.wrapper);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            // 某些情况业务的崩溃会导致 WillUnmount 在 DidMount 之前调用，所以需要加层判断
	            if (!!this.wrapper) {
	                document.body.removeChild(this.wrapper);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            if (!!this.wrapper) {
	                return _reactDom2.default.createPortal(_react2.default.createElement(
	                    _realmodal2.default,
	                    this.props,
	                    this.props.children
	                ), this.wrapper);
	            }
	            return null;
	        }
	    }]);
	
	    return Modal;
	}(_react.Component);
	
	Modal.propTypes = {
	    children: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object])
	};
	exports.default = Modal;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Modal
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 带遮罩层的模态弹层组件。支持多种位置和动画效果。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./modal.md}{instruUrl: modal.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.2
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var defaultProps = {
	    show: false,
	    extraClass: '',
	    contentExtraClass: '',
	    align: 'center',
	    onMaskTap: function onMaskTap() {},
	    contentOffset: [0, 0],
	    maskOffset: [0, 0],
	    maskExtraClass: '',
	    animation: '',
	    onShow: function onShow() {},
	    onHide: function onHide() {},
	    width: null,
	    height: null,
	    delayBeforeAnimationStart: 100
	};
	
	var propTypes = {
	    /**
	     * @property show
	     * @type Bool
	     * @default false
	     * @description 是否显示模态框
	     */
	    show: _propTypes2.default.bool.isRequired,
	    /**
	     * @property extraClass
	     * @type String
	     * @default null
	     * @description 附加给模态框容器(包含了内容区和蒙层)的额外class
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property contentExtraClass
	     * @type String
	     * @default null
	     * @description 附加给模态框内容区的额外class
	     */
	    contentExtraClass: _propTypes2.default.string,
	    /**
	     * @property align
	     * @type String
	     * @default center
	     * @description 模态框的位置,默认为center。可选值为cetner/top/bottom
	     */
	    align: _propTypes2.default.oneOf(['center', 'top', 'bottom', 'left', 'right']),
	    /**
	     * @property onMaskTap
	     * @type Function
	     * @default ()=>{}
	     * @description 点击蒙层时的回调
	     */
	    onMaskTap: _propTypes2.default.func,
	    /**
	     * @property contentOffset
	     * @type Array
	     * @default [0,0]
	     * @description 内容区在水平/垂直方向上的偏移,例如[0,-100]可以使模态框内容区向上偏移100个像素
	     */
	    contentOffset: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    /**
	     * @property maskOffset
	     * @type Array
	     * @default [0,0]
	     * @description 蒙层遮盖的范围。如果不需要蒙层遮盖住整个屏幕,可以设置这个属性。
	     *
	     * 数组的第一个元素代表蒙层上边缘距离屏幕顶部的距离,第二个元素代表下边缘距离底部的距离。
	     */
	    maskOffset: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    /**
	     * @property onShow
	     * @type Function
	     * @default ()=>{}
	     * @description 打开模态框时，动画触发之前的事件回调
	     */
	    onShow: _propTypes2.default.func,
	    /**
	     * @property onHide
	     * @type Function
	     * @default ()=>{}
	     * @description 关闭模态框时，动画触发之前的事件回调
	     */
	    onHide: _propTypes2.default.func,
	    /**
	     * @property width
	     * @type Number/String
	     * @default 'auto'
	     * @description 内容区宽度,默认为auto,可以传入数字或者百分比
	     */
	    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property height
	     * @type Number/String
	     * @default 'auto'
	     * @description 内容区高度,默认为auto,可以传入数字或者百分比
	     */
	    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property animation
	     * @type String/Object
	     * @default "none"
	     * @description 打开/关闭动画
	     *
	     * 有已经实现好的动画fade,fade-in-down,fade-in-up,zoom,也可以自己传入classNames,实现定制的动画效果,例如
	     * {animation:['actionsheet-up', 'actionsheet-down'],duration:200}
	     * 数组中的第一个元素是打开模态框时附加到内容区的className,第二个是关闭时附加到内容区的className,duration是动画的持续时间,
	     * action-sheet-up的css规则如下:
	     *
	     * ```css
	     * @keyframes actionsheet-up {
	     *     0% {
	     *         transform: translate3d(0, 100%, 0);
	     *     }
	     *     100% {
	     *         transform: translate3d(0, 0, 0);
	     *     }
	     * }
	     * ```
	     *
	     */
	    animation: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
	        animation: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
	        duration: _propTypes2.default.number
	    })]),
	    delayBeforeAnimationStart: _propTypes2.default.number,
	    children: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string, _propTypes2.default.number])
	};
	
	// 默认提供的动画效果
	var ANIMATION_MAP = {
	    fade: { animation: ['fade-in', 'fade-out'], duration: 200 },
	    zoom: { animation: ['zoom-in', 'zoom-out'], duration: 300 },
	    'fade-in-up': { animation: ['fade-in-up', 'fade-out-down'], duration: 200 },
	    'fade-in-down': { animation: ['fade-in-down', 'fade-out-up'], duration: 200 }
	};
	
	var RealModal = function (_Component) {
	    _inherits(RealModal, _Component);
	
	    function RealModal(props) {
	        _classCallCheck(this, RealModal);
	
	        var _this = _possibleConstructorReturn(this, (RealModal.__proto__ || Object.getPrototypeOf(RealModal)).call(this, props));
	
	        _this.state = {
	            show: props.show,
	            animation: _this.getAnimationClass(props.animation, props.show)
	        };
	        return _this;
	    }
	
	    _createClass(RealModal, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.props.show) {
	                this.props.onShow();
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.toggleShowStatus(nextProps);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            clearTimeout(this.hideTimeout);
	            clearTimeout(this.showTimeout);
	        }
	
	        /**
	         * 根据动画名字和打开/关闭状态获取对应的animation属性配置
	         * @param name
	         * @param isShow
	         * @returns {{name: string, duration: number}}
	         */
	
	    }, {
	        key: 'getAnimationClass',
	        value: function getAnimationClass(name, isShow) {
	            var contentAnimation = '',
	                duration = 0;
	            if (name) {
	                var targetMap = _typeof(this.props.animation) === 'object' ? this.props.animation : ANIMATION_MAP[name];
	                if (targetMap) {
	                    contentAnimation = [targetMap.animation[isShow ? 0 : 1], 'ani'].join(' ');
	                    duration = targetMap.duration;
	                }
	            }
	            return { name: contentAnimation, duration: duration };
	        }
	
	        /**
	         * 根据nextProps中的show属性更新内部state
	         * @param nextProps
	         */
	
	    }, {
	        key: 'toggleShowStatus',
	        value: function toggleShowStatus(nextProps) {
	            var _this2 = this;
	
	            var current = this.state.show;
	            var next = nextProps.show;
	            var _props = this.props,
	                onShow = _props.onShow,
	                onHide = _props.onHide;
	            // 如果新属性的show是true并且模态框处于打开状态
	
	            if (!next && current) {
	                // 提取需要指定的动画
	                var animationData = this.getAnimationClass(nextProps.animation, next);
	                clearTimeout(this.showTimeout);
	                // show动画开始前执行onHide回调
	                onHide();
	                // 先走关闭动画
	                this.setState({ animation: animationData });
	                // 等到动画结束后处理整个modal的show状态,并且保存timeout引用
	                this.hideTimeout = setTimeout(function () {
	                    _this2.setState({ show: false });
	                }, animationData.duration);
	            } else if (next && !current) {
	                // 清理关闭timeout
	                // 写这一行的目的是用户可能在关闭的同时打开modal
	                clearTimeout(this.hideTimeout);
	                this.setState({ show: next });
	                this.contentDom && (this.contentDom.style.visibility = 'hidden');
	
	                // 如果直接运行动画会出现闪烁,这里先将contentDom隐藏然后再运行动画
	                this.showTimeout = setTimeout(function () {
	                    // hide动画开始前执行onShow回调
	                    onShow();
	                    _this2.setState({ animation: _this2.getAnimationClass(nextProps.animation, next) });
	                    _this2.contentDom && (_this2.contentDom.style.visibility = 'visible');
	                }, this.props.delayBeforeAnimationStart);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var _state = this.state,
	                show = _state.show,
	                animation = _state.animation;
	            var duration = animation.duration,
	                name = animation.name;
	            var _props2 = this.props,
	                extraClass = _props2.extraClass,
	                onMaskTap = _props2.onMaskTap,
	                maskOffset = _props2.maskOffset,
	                contentOffset = _props2.contentOffset,
	                align = _props2.align,
	                contentExtraClass = _props2.contentExtraClass,
	                width = _props2.width,
	                height = _props2.height;
	
	            var containerClass = (0, _classnames2.default)('yo-modal', extraClass, 'yo-modal-' + align);
	            var contentClass = (0, _classnames2.default)('cont', contentExtraClass, name);
	
	            return _react2.default.createElement(
	                'div',
	                {
	                    ref: function ref(container) {
	                        _this3.container = container;
	                    },
	                    className: containerClass,
	                    onTouchTap: function onTouchTap(evt) {
	                        if (_this3.container && evt.target === _this3.container) {
	                            onMaskTap(evt);
	                        }
	                    }
	                    // 阻止 onTouchStart 的事件冒泡。
	                    , onTouchStart: function onTouchStart(evt) {
	                        evt.stopPropagation();
	                    },
	                    onTouchMove: function onTouchMove(evt) {
	                        evt.stopPropagation();
	                    },
	                    onTouchEnd: function onTouchEnd(evt) {
	                        evt.stopPropagation();
	                    },
	                    onTouchCancel: function onTouchCancel(evt) {
	                        evt.stopPropagation();
	                    },
	                    style: Object.assign({
	                        top: parseInt(maskOffset[0], 10),
	                        bottom: parseInt(maskOffset[1], 10),
	                        transform: 'translate3d(0,0,0)',
	                        WebkitTransform: 'translate3d(0,0,0)'
	                    }, show ? null : { display: 'none' })
	                },
	                _react2.default.createElement(
	                    'div',
	                    {
	                        className: contentClass,
	                        ref: function ref(component) {
	                            _this3.contentDom = component;
	                        },
	                        style: {
	                            position: 'relative',
	                            top: parseInt(contentOffset[1], 10) || 0,
	                            left: parseInt(contentOffset[0], 10) || 0,
	                            WebkitAnimationDuration: duration + 'ms',
	                            animationDuration: duration + 'ms',
	                            width: width,
	                            height: height
	                        }
	                    },
	                    this.props.children
	                )
	            );
	        }
	    }]);
	
	    return RealModal;
	}(_react.Component);
	
	exports.default = RealModal;
	
	
	RealModal.defaultProps = defaultProps;
	RealModal.propTypes = propTypes;

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */
	
	(function () {
		'use strict';
	
		var hasOwn = {}.hasOwnProperty;
	
		function classNames () {
			var classes = [];
	
			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;
	
				var argType = typeof arg;
	
				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}
	
			return classes.join(' ');
		}
	
		if (typeof module !== 'undefined' && module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else if (true) {
			// register as 'classnames', consistent with npm package name
			!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
				return classNames;
			}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		} else {
			window.classNames = classNames;
		}
	}());


/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(36);
	
	var _alert = __webpack_require__(37);
	
	var _alert2 = _interopRequireDefault(_alert);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _alert2.default;

/***/ },
/* 36 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; /**
	                                                                                                                                                                                                                                                                               * @component Alert
	                                                                                                                                                                                                                                                                               * @version 3.0.0
	                                                                                                                                                                                                                                                                               * @description 警告提示组件，居中展现需要关注的信息，基于Confirm组件实现。
	                                                                                                                                                                                                                                                                               *
	                                                                                                                                                                                                                                                                               * - 类似浏览器原生API调用方式。
	                                                                                                                                                                                                                                                                               * - 自定义组件显隐过程动画。
	                                                                                                                                                                                                                                                                               * - 返回一个Promise实例对象，可通过then方法绑定确定按钮回调。
	                                                                                                                                                                                                                                                                               *
	                                                                                                                                                                                                                                                                               *  @author qingguo.xu
	                                                                                                                                                                                                                                                                               * @instructions {instruInfo: ./alert.md}{instruUrl: alert.html?hideIcon}
	                                                                                                                                                                                                                                                                               */
	
	exports.default = Alert;
	
	var _confirm = __webpack_require__(38);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	/**
	 * @method Alert
	 * @description Alert API，调用以后在屏幕正中弹出一个Alert，可以按照option对象参数调用，也可以使用简易
	 * 调用方式如 ``Alert(content, title, btnText, animation, extraClass)``
	 * @param {Object} option 配置对象，里面可以接受如下属性：
	 * @param {String | Function} [option.content] 组件显示的内容，支持字符串和 jsx（返回 jsx 的回调函数，`() => jsx`）
	 * @param {String} [option.title] 组件显示的标题
	 * @param {String} [option.btnText] <3.0.1> 组件按钮的文本
	 * @param {String | Object} [option.animation] 组件显隐执行的动画，格式同Dialog组件
	 * @param {String} [option.extraClass] <3.0.15> 附加给组件根节点的额外className。
	 * @constructor Alert API
	 */
	function Alert() {
	  var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	  var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	  var btnText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['确定', ''];
	  var animation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'fade';
	  var extraClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
	
	  if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object') {
	    var opt = content;
	    content = opt.content != null ? opt.content : '';
	    title = opt.title != null ? opt.title : '';
	    btnText = opt.btnText != null ? [opt.btnText, ''] : ['确定', ''];
	    animation = opt.animation || 'fade';
	    extraClass = opt.extraClass != null ? opt.extraClass : '';
	  }
	  return (0, _confirm2.default)(content, title, btnText, animation, false, extraClass);
	}

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = Confirm;
	
	var _dialog = __webpack_require__(39);
	
	var _dialog2 = _interopRequireDefault(_dialog);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Confirm
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 确认弹框组件，居中显示需要关注的对话弹框组件，基于Dialog组件实现。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	类似浏览器原生API调用形式。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * - 自定义组件显隐过程动画。
	返回一个Promise实例对象，可通过Then方法分别绑定确认、取消回调函数。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./confirm.md}{instruUrl: confirm.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var that = null;
	var container = document.createElement('div');
	
	var ConfirmReact = function (_Component) {
	    _inherits(ConfirmReact, _Component);
	
	    function ConfirmReact(props) {
	        _classCallCheck(this, ConfirmReact);
	
	        var _this = _possibleConstructorReturn(this, (ConfirmReact.__proto__ || Object.getPrototypeOf(ConfirmReact)).call(this, props));
	
	        _this.state = {
	            show: false,
	            title: '',
	            content: '',
	            animation: 'none',
	            btnText: ['确定', '取消'],
	            onOk: function onOk() {},
	            onCancel: function onCancel() {},
	
	            extraClass: ''
	        };
	        that = _this;
	        return _this;
	    }
	
	    _createClass(ConfirmReact, [{
	        key: 'render',
	        value: function render() {
	            var _state = this.state,
	                show = _state.show,
	                title = _state.title,
	                content = _state.content,
	                animation = _state.animation,
	                onOk = _state.onOk,
	                onCancel = _state.onCancel,
	                btnText = _state.btnText,
	                extraClass = _state.extraClass;
	
	            return _react2.default.createElement(
	                _dialog2.default,
	                {
	                    show: show, title: title, onOk: onOk.bind(this),
	                    animation: animation,
	                    okText: btnText[0] != null && btnText[0],
	                    cancelText: btnText[1] != null && btnText[1],
	                    onCancel: onCancel ? onCancel.bind(this) : false,
	                    extraClass: extraClass
	                },
	                content
	            );
	        }
	    }]);
	
	    return ConfirmReact;
	}(_react.Component);
	
	_reactDom2.default.render(_react2.default.createElement(ConfirmReact, null), container);
	
	/**
	 * @method Confirm
	 * @param {Object} option 配置对象，可以接受以下属性：
	 * @param {String | Function} [option.content] 组件显示的内容，支持字符串和 jsx（返回 jsx 的回调函数，`() => jsx`）
	 * @param {String} [option.title] 组件显示标题
	 * @param {Array} [option.btnText] <3.0.1> 按钮的文本，两个元素分别表示左/右按钮的文本
	 * @param {Object} [option.animation] 组件显隐过程的动画，格式同Dialog组件
	 * @param {Boolean} [option.cancel] 组件是否有取消按钮
	 * @param {String} [option.extraClass] <3.0.15> 附加给组件根节点的额外className。
	 * @returns {Promise} 返回一个Promise实例对象
	 * @description 确认弹框组件的调用方法，调用以后在屏幕正中弹出一个Confirm，可以按照option对象参数调用，也可以使用简易
	 * 调用方式如 ``Confirm(content, title, btnText, animation, cancel, extraClass)``
	 */
	function Confirm() {
	    var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var title = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	    var btnText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ['确定', '取消'];
	    var animation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'fade';
	    var cancel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
	    var extraClass = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : '';
	
	    if ((typeof content === 'undefined' ? 'undefined' : _typeof(content)) === 'object') {
	        var opt = content;
	        title = opt.title != null ? opt.title : '';
	        content = opt.content != null ? opt.content : '';
	        btnText = opt.btnText != null ? opt.btnText : ['确定', '取消'];
	        animation = opt.animation != null ? opt.animation : 'fade';
	        cancel = opt.cancel != null ? !!opt.cancel : true;
	        extraClass = opt.extraClass != null ? opt.extraClass : '';
	    }
	    content = (0, _util.isFunction)(content) ? content() : content;
	
	    return new Promise(function (resolve) {
	        // duration的默认值是300
	        var duration = animation !== 'none' ? 300 : 0;
	        // 看是否有自定义animation对象
	        if (animation != null && animation.duration != null) {
	            duration = animation.duration;
	        }
	
	        function okBtn() {
	            setTimeout(function () {
	                resolve(true);
	            }, duration);
	            that.setState({ show: false });
	        }
	
	        function cancelBtn() {
	            setTimeout(function () {
	                resolve(false);
	            }, duration);
	            that.setState({ show: false });
	        }
	
	        that.setState({
	            show: true,
	            title: title,
	            content: content,
	            btnText: btnText,
	            animation: animation,
	            onOk: okBtn,
	            onCancel: cancel ? cancelBtn : false,
	            extraClass: extraClass
	        });
	    });
	}

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _modal = __webpack_require__(32);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Dialog
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 对话弹框组件，可自定义显示位置的对话弹框，基于Modal组件实现。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	可自定义组件弹层内容的大小、显示位置。
	可自定义组件背景阴影遮罩层的上偏移、下偏移。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * - 弹层显隐的动画可使用自定义的css3动画或modal组件默认的fade动画。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./dialog.md}{instruUrl: dialog.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var defaultProps = {
	    show: false,
	    animation: 'fade',
	    title: '',
	    content: '',
	    width: 'auto',
	    height: 'auto',
	    align: 'center',
	    contentOffset: [0, 0],
	    maskOffset: [0, 0],
	    extraClass: '',
	    okText: '确定',
	    cancelText: '取消',
	    onOk: function onOk() {},
	    onCancel: function onCancel() {}
	};
	
	var propTypes = {
	    /**
	     * @property show
	     * @description 组件是否显示
	     * @type Bool
	     * @default false
	     */
	    show: _propTypes2.default.bool,
	    /**
	     * @property effect
	     * @description 组件显隐时采用的动画
	     *
	     * ```
	     * PropTypes.oneOfType([
	     * PropTypes.string,
	     * PropTypes.shape({
	     *       animation: PropTypes.arrayOf(PropTypes.string).isRequired,
	     *        duration: PropTypes.number.isRequired
	     *    })
	     * ])
	     * ```
	     * @type String/Object
	     * @default 'none'
	     */
	    animation: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.shape({
	        animation: _propTypes2.default.arrayOf(_propTypes2.default.string).isRequired,
	        duration: _propTypes2.default.number.isRequired
	    })]),
	    /**
	     * @property title
	     * @description 组件显示的标题
	     * @type Element/String
	     */
	    title: _propTypes2.default.oneOfType([_propTypes2.default.element, _propTypes2.default.string]),
	    /**
	     * @property width
	     * @description 组件显示的内容宽度
	     * @type Number/String
	     * @default 'auto'
	     */
	    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property height
	     * @description 组件显示的内容高度
	     * @type Number/String
	     * @default 'auto'
	     */
	    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property align
	     * @description 组件显示内容的垂直方向位置
	     * @type Enum {'top', 'bottom', 'center'}
	     * @default "center"
	     */
	    align: _propTypes2.default.oneOf(['top', 'center', 'bottom']),
	    /**
	     * @property contentOffset
	     * @description 组件显示内容的X轴、Y轴偏移量
	     * @type Array<Number>
	     * @default [0, 0]
	     */
	    contentOffset: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    /**
	     * @property maskOffset
	     * @description 组件遮罩层的顶部、底部偏移量
	     * @type Array<Number>
	     * @default [0, 0]
	     */
	    maskOffset: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    /**
	     * @property extraClass
	     * @description 组件额外样式类
	     * @type String
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property okText
	     * @description 组件确定按钮的内容
	     * @type String
	     * @default '确定'
	     */
	    okText: _propTypes2.default.string,
	    /**
	     * @property cancelText
	     * @description 组件取消按钮的内容
	     * @type String
	     * @default '取消'
	     */
	    cancelText: _propTypes2.default.string,
	    /**
	     * @property onOk
	     * @description 组件确定按钮的回调函数，`false`表示不显示确定按钮
	     * @type Bool/Function
	     * @default () => {}
	     */
	    onOk: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
	    /**
	     * @property onCancel
	     * @description 组件取消按钮的回调函数，`false`表示不显示取消按钮
	     * @type Bool/Function
	     * @default () => {}
	     */
	    onCancel: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.func]),
	    children: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.string])
	};
	
	var Dialog = function (_Component) {
	    _inherits(Dialog, _Component);
	
	    function Dialog() {
	        _classCallCheck(this, Dialog);
	
	        return _possibleConstructorReturn(this, (Dialog.__proto__ || Object.getPrototypeOf(Dialog)).apply(this, arguments));
	    }
	
	    _createClass(Dialog, [{
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                show = _props.show,
	                title = _props.title,
	                animation = _props.animation,
	                width = _props.width,
	                height = _props.height,
	                align = _props.align,
	                contentOffset = _props.contentOffset,
	                maskOffset = _props.maskOffset,
	                extraClass = _props.extraClass,
	                okText = _props.okText,
	                cancelText = _props.cancelText,
	                onOk = _props.onOk,
	                onCancel = _props.onCancel,
	                children = _props.children;
	
	            var cancelBtnNode = onCancel ? _react2.default.createElement(
	                _touchable2.default,
	                { onTap: onCancel, touchClass: 'yo-btn-touch' },
	                _react2.default.createElement(
	                    'button',
	                    {
	                        className: 'yo-btn yo-btn-dialog yo-btn-l'
	                    },
	                    cancelText
	                )
	            ) : null;
	            var okBtnNode = onOk ? _react2.default.createElement(
	                _touchable2.default,
	                { onTap: onOk, touchClass: 'yo-btn-touch' },
	                _react2.default.createElement(
	                    'button',
	                    {
	                        className: 'yo-btn yo-btn-dialog yo-btn-l'
	                    },
	                    okText
	                )
	            ) : null;
	            return _react2.default.createElement(
	                _modal2.default,
	                {
	                    align: align,
	                    show: show,
	                    width: width,
	                    height: height,
	                    animation: animation || '',
	                    contentOffset: contentOffset,
	                    maskOffset: maskOffset,
	                    onMaskTap: function onMaskTap() {}
	                },
	                _react2.default.createElement(
	                    'div',
	                    { className: (0, _classnames2.default)('yo-dialog', extraClass) },
	                    _react2.default.createElement(
	                        'header',
	                        { className: 'hd' },
	                        _react2.default.createElement(
	                            'h2',
	                            { className: 'title' },
	                            title
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'bd' },
	                        children
	                    ),
	                    _react2.default.createElement(
	                        'footer',
	                        { className: 'ft' },
	                        cancelBtnNode,
	                        okBtnNode
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Dialog;
	}(_react.Component);
	
	exports.default = Dialog;
	
	
	Dialog.defaultProps = defaultProps;
	Dialog.propTypes = propTypes;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(41);
	
	var _calendar = __webpack_require__(42);
	
	var _calendar2 = _interopRequireDefault(_calendar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _calendar2.default;

/***/ },
/* 41 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _CalendarCore = __webpack_require__(43);
	
	var _CalendarCore2 = _interopRequireDefault(_CalendarCore);
	
	var _CalendarItem = __webpack_require__(48);
	
	var _CalendarItem2 = _interopRequireDefault(_CalendarItem);
	
	var _grouplist = __webpack_require__(49);
	
	var _grouplist2 = _interopRequireDefault(_grouplist);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Calendar
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 日历组件，基于groupList组件实现。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 可通过以下两种方式定义日期范围:
	传入具体的起、始日期。
	传入距离系统当日的间隔天数，默认90。入住时间在离店时间之后，则互换。默认selectionStart、selectionEnd可选择同一天。
	默认不能选择今天之前的日期。同时，如果 `selectionStart` 时间在今天之前，会被重置为今天。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *  可以通过 `allowSelectionBeforeToday` 属性来严格按照 `duration` 渲染，消除默认场景。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./calendar.md}{instruUrl: calendar.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var defaultProps = {
	    duration: 90,
	    extraClass: '',
	    selectionStart: '',
	    selectionEnd: '',
	    selectionStartText: '入店',
	    selectionEndText: '离店',
	    allowSingle: false,
	    allowSelectionBeforeToday: false,
	    onChange: function onChange() {},
	    renderDate: function renderDate() {}
	};
	
	var propTypes = {
	    /**
	     * @property duration
	     * @description 允许用户选择的日期范围，支持两种形式：传入数字，则表示从今天开始到N天后；传入形式为['yyyy-mm-dd','yyyy-mm-dd']的数组，
	     * 可以直接设置起始日期和终止日期。
	     * @type Number/Array
	     * @default 90
	     */
	    duration: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.array]),
	    /**
	     * @property extraClass
	     * @description 组件的额外样式
	     * @type String
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property selectionStart
	     * @description 默认选中范围的开始日期
	     * @type String
	     */
	    selectionStart: _propTypes2.default.string,
	    /**
	     * @property selectionEnd
	     * @description 默认选中范围的结束日期
	     * @type String
	     */
	    selectionEnd: _propTypes2.default.string,
	    /**
	     * @property selectionStartText
	     * @description 选中范围的开始日期标注，可传入文字或yo支持的icofont
	     * @type String
	     * @default '入店'
	     */
	    selectionStartText: _propTypes2.default.string,
	    /**
	     * @property selectionEndText
	     * @description 选中范围的结束日期标注，可传入文字或yo支持的icofont
	     * @type String
	     */
	    selectionEndText: _propTypes2.default.string,
	    /**
	     * @property allowSingle
	     * @description 是否只允许选中单个日期
	     * @type Bool
	     * @default false
	     */
	    allowSingle: _propTypes2.default.bool,
	    /**
	     * @property allowSelectionBeforeToday
	     * @description 是否严格根据 `duration` 属性渲染，支持选择今天之前的日期
	     * @type Bool
	     * @default false
	     * @version 3.0.9
	     */
	    allowSelectionBeforeToday: _propTypes2.default.bool,
	    /**
	     * @property onChange
	     * @type Function
	     * @param {Object} obj 选中范围的开始日期、结束日期对象
	     * @param {String} obj.selectionStart 选中范围的开始日期
	     * @param {String} obj.selectionEnd 选中范围的结束日期
	     * @description 点击选中日期时回调函数
	     */
	    onChange: _propTypes2.default.func,
	    /**
	     * @property renderDate
	     * @type Function
	     * @param {Object} item 待渲染的日期数据对象
	     * @param {String} ret 组件默认的日期渲染模板
	     * @default () => {}
	     * @description 每个日期对象渲染函数的模板。可自定义单个日期节点的显示内容。
	     */
	    renderDate: _propTypes2.default.func
	};
	
	var Calendar = function (_Component) {
	    _inherits(Calendar, _Component);
	
	    function Calendar(props) {
	        _classCallCheck(this, Calendar);
	
	        var _this = _possibleConstructorReturn(this, (Calendar.__proto__ || Object.getPrototypeOf(Calendar)).call(this, props));
	
	        var duration = props.duration,
	            selectionStart = props.selectionStart,
	            selectionEnd = props.selectionEnd,
	            allowSingle = props.allowSingle,
	            allowSelectionBeforeToday = props.allowSelectionBeforeToday;
	
	        _this.calendarModel = new _CalendarCore2.default();
	        _this.state = {
	            data: _this.calendarModel.getData({ duration: duration, selectionStart: selectionStart, selectionEnd: selectionEnd, allowSingle: allowSingle, allowSelectionBeforeToday: allowSelectionBeforeToday })
	        };
	        _this.groupList = null;
	        return _this;
	    }
	
	    _createClass(Calendar, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            var _this2 = this;
	
	            // 注册点击check事件， 在CalendarCore理触发
	            this.calendarModel.registerEventHandler('check', function (obj) {
	                return _this2.props.onChange(obj);
	            });
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var groupKeyDate = new Date();
	            var selectionStart = this.props.selectionStart;
	
	            if (!!selectionStart) {
	                groupKeyDate = new Date(selectionStart.replace(/-/g, '/'));
	            }
	            var groupKey = groupKeyDate.getFullYear() + '\u5E74' + (groupKeyDate.getMonth() + 1) + '\u6708';
	            if (this.groupList) this.groupList.scrollToGroup(groupKey);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var duration = nextProps.duration,
	                selectionStart = nextProps.selectionStart,
	                selectionEnd = nextProps.selectionEnd,
	                allowSingle = nextProps.allowSingle,
	                allowSelectionBeforeToday = nextProps.allowSelectionBeforeToday;
	            var prevDuration = this.props.duration;
	
	            var data = null;
	            if (typeof duration === 'number' && typeof prevDuration === 'number') {
	                data = this.calendarModel.getData({ duration: duration, selectionStart: selectionStart, selectionEnd: selectionEnd, allowSingle: allowSingle, allowSelectionBeforeToday: allowSelectionBeforeToday });
	            } else {
	                data = this.calendarModel.getData({ prevDuration: prevDuration, duration: duration, selectionStart: selectionStart, selectionEnd: selectionEnd, allowSingle: allowSingle, allowSelectionBeforeToday: allowSelectionBeforeToday });
	            }
	            this.setState({ data: data });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var _props = this.props,
	                renderDate = _props.renderDate,
	                selectionStartText = _props.selectionStartText,
	                selectionEndText = _props.selectionEndText,
	                extraClass = _props.extraClass;
	
	            return _react2.default.createElement(
	                'section',
	                { className: (0, _classnames2.default)('yo-calendar', extraClass) },
	                _react2.default.createElement(
	                    'ul',
	                    { className: 'week-bar' },
	                    _react2.default.createElement(
	                        'li',
	                        { className: 'weekend' },
	                        '\u65E5'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        '\u4E00'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        '\u4E8C'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        '\u4E09'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        '\u56DB'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        null,
	                        '\u4E94'
	                    ),
	                    _react2.default.createElement(
	                        'li',
	                        { className: 'weekend' },
	                        '\u516D'
	                    )
	                ),
	                _react2.default.createElement(_grouplist2.default, {
	                    isTitleStatic: true,
	                    itemTouchClass: null,
	                    ref: function ref(node) {
	                        _this3.groupList = node;
	                    },
	                    renderGroupItem: function renderGroupItem(item) {
	                        return _react2.default.createElement(_CalendarItem2.default, {
	                            week: item.week,
	                            isRender: item.isRender,
	                            selectionStartText: selectionStartText,
	                            selectionEndText: selectionEndText,
	                            renderDate: renderDate,
	                            onChange: function onChange(str) {
	                                return _this3.calendarModel.handleChange(str);
	                            }
	                        });
	                    },
	                    dataSource: this.state.data
	                })
	            );
	        }
	    }]);
	
	    return Calendar;
	}(_react.Component);
	
	exports.default = Calendar;
	
	
	Calendar.propTypes = propTypes;
	Calendar.defaultProps = defaultProps;

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _ComponentCore2 = __webpack_require__(44);
	
	var _ComponentCore3 = _interopRequireDefault(_ComponentCore2);
	
	var _lunar = __webpack_require__(46);
	
	var _lunar2 = _interopRequireDefault(_lunar);
	
	var _holiday = __webpack_require__(47);
	
	var _holiday2 = _interopRequireDefault(_holiday);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * getEndDate 获取间隔天数的最后一天日期
	 * @param date {Date} 起始日期对象
	 * @param offset {Number} 间隔天数
	 * @returns {Date} 结束日期对象
	 */
	var getEndDate = function getEndDate(date, offset) {
	    var startTime = date.getTime();
	    var endTime = startTime + offset * 24 * 3600 * 1000;
	    return new Date(endTime);
	};
	
	/**
	 * getFirstDayOfMonth 获取某年某月第一天
	 * @param year {String} 年份
	 * @param month {String} 月份
	 * @returns {Date}
	 */
	var getFirstDayOfMonth = function getFirstDayOfMonth(year, month) {
	    return new Date(year, month, 1);
	};
	
	/**
	 * getLastDayOfMonth 获取某年某月最后一天
	 * @param year {String}
	 * @param month {String}
	 * @returns {Date}
	 */
	var getLastDayOfMonth = function getLastDayOfMonth(year, month) {
	    return new Date(year, month, 0);
	};
	
	/**
	 * isWeekend 确定某天是否周末
	 * @param dayNum {Number} 日期号
	 * @param firstDay {Number} 当月第一天的星期数
	 * @return {Boolean}
	 */
	var isWeekend = function isWeekend(dayNum, firstDay) {
	    var num = (+dayNum + firstDay) % 7;
	    // 0是周六、1是周日
	    return num === 0 || num === 1;
	};
	
	/**
	 * getDateInfoArr 获取年、月、日、星期等信息
	 * @param date {Date}
	 * @returns {Array}
	 */
	var getDateInfoArr = function getDateInfoArr() {
	    var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
	    return [date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getDay()];
	};
	
	/**
	 * onlyFormatMonth 仅格式化月，eg: 2016-08-9
	 * @param dateObj {Date}
	 */
	var onlyFormatMonth = function onlyFormatMonth(dateObj) {
	    var _getDateInfoArr = getDateInfoArr(dateObj),
	        _getDateInfoArr2 = _slicedToArray(_getDateInfoArr, 3),
	        year = _getDateInfoArr2[0],
	        month = _getDateInfoArr2[1],
	        dateNum = _getDateInfoArr2[2];
	
	    return [year, (0, _lunar.convert2digit)(month), (0, _lunar.convert2digit)(dateNum)].join('-');
	};
	
	/**
	 * formatMonth 格式化某年某月月为指定格式， eg： 2016/08
	 * @param year {String}
	 * @param month {String}
	 * @returns {string}
	 */
	var formatMonth = function formatMonth(year, month) {
	    return [year, (0, _lunar.convert2digit)(month)].join('/');
	};
	
	/**
	 * getHoliday 根据传入的参数，对应到holiday.js，返回节假日信息
	 * @param str1 {string} 月-日 eg: '09-08'
	 * @param str2 {string} solar | lunar
	 * @returns {string} 节假日信息
	 */
	var getHoliday = function getHoliday(str1) {
	    var str2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'solar';
	    return _holiday2.default[str2][str1] || '';
	};
	
	/**
	 * formatMonthChinese 中文格式： 2016年8月
	 * @param year {String}
	 * @param month {String}
	 * @returns {string}
	 */
	var formatMonthChinese = function formatMonthChinese(year, month) {
	    return year + '\u5E74' + month + '\u6708';
	};
	
	/**
	 * compareDate 对比两个日期的大小
	 * @param date1 {Date}
	 * @param date2 {Date}
	 * @return {Number} [相差的天数]
	 */
	var compareDate = function compareDate(date1, date2) {
	    return date1.getTime() - date2.getTime();
	};
	
	/**
	 * isHoliday 判断是否是假期
	 * @param year {number}
	 * @param month {number}
	 * @param day {number}
	 * @returns {string} 节假日信息或者''
	 */
	var isHoliday = function isHoliday(year, month, day) {
	    var res = '';
	    var tempMonth = (0, _lunar.convert2digit)(month);
	    var tempDay = (0, _lunar.convert2digit)(day);
	    var lunar = (0, _lunar2.default)(year, tempMonth, tempDay);
	    res += getHoliday(tempMonth + '-' + tempDay);
	    res += ' '; // 防止两个节日相连
	    if (!!lunar.Term) {
	        // 清明节，不固定
	        res += lunar.Term + ' ';
	    }
	    res += getHoliday(lunar.str, 'lunar');
	    return res.trim();
	};
	
	/**
	 * 处理IOS不兼容2016-10-01， 但不改变原有日期格式
	 * @param str {string}
	 * @return Date
	 */
	var getDate = function getDate(str) {
	    return new Date(str.replace(/-/g, '/'));
	};
	
	/**
	 * 继承ComponentCore组件，主要基于观察者模式，注册、触发自定义事件
	 */
	
	var CalendarCore = function (_ComponentCore) {
	    _inherits(CalendarCore, _ComponentCore);
	
	    function CalendarCore() {
	        _classCallCheck(this, CalendarCore);
	
	        var _this = _possibleConstructorReturn(this, (CalendarCore.__proto__ || Object.getPrototypeOf(CalendarCore)).call(this, 'canlendar'));
	
	        _this.checkInDate = null;
	        _this.checkOutDate = null;
	        _this.isRender = false; //
	        _this.beginDate = null; // 开始日期
	        _this.endDate = null; // 结束日期
	        _this.prevBeginDate = null; // 前一次的开始日期
	        _this.allowSingle = false; // 是否尽允许选择单日情况
	        return _this;
	    }
	
	    /**
	     * handleChange 点击日期时触发的函数
	     * @param str {String} 点中的日期字符串 '2016-10-01'
	     * @returns {null}
	     */
	
	
	    _createClass(CalendarCore, [{
	        key: 'handleChange',
	        value: function handleChange(str) {
	            var resObj = {
	                selectionStart: '',
	                selectionEnd: ''
	            };
	            var strDate = getDate(str);
	            if (!!this.checkOutDate || !this.checkInDate || this.allowSingle) {
	                resObj.selectionStart = onlyFormatMonth(strDate);
	                return this.emitEvent('check', resObj);
	            }
	            if (!!this.checkInDate) {
	                if (compareDate(strDate, this.checkInDate) < 0) {
	                    resObj.selectionStart = onlyFormatMonth(strDate);
	                } else {
	                    resObj.selectionStart = onlyFormatMonth(this.checkInDate);
	                    resObj.selectionEnd = onlyFormatMonth(strDate);
	                }
	                return this.emitEvent('check', resObj);
	            }
	            return this.emitEvent('check', resObj);
	        }
	
	        /**
	         * isToday 某年某月某天是否是今天
	         * @param year {String}
	         * @param month {String}
	         * @param day {String}
	         * @returns {Boolean}
	         */
	
	    }, {
	        key: 'isToday',
	        value: function isToday(year, month, day) {
	            var _getDateInfoArr3 = getDateInfoArr(),
	                _getDateInfoArr4 = _slicedToArray(_getDateInfoArr3, 3),
	                todayYear = _getDateInfoArr4[0],
	                todayMonth = _getDateInfoArr4[1],
	                todayDateNum = _getDateInfoArr4[2];
	
	            return todayYear === parseFloat(year) && todayMonth === parseFloat(month) && todayDateNum === parseFloat(day);
	        }
	
	        /**
	         * getDate 获取满足需要的groupList格式数据
	         * @param prevDuration { Number | Array } duration属性变化之前的起始时间日期
	         * @param duration {Number | Array} 时间间隔或起始时间日期
	         * @param selectionStart {String} 入店时间， eg: 2016-10-01
	         * @param selectionEnd {String} 离店时间， eg: 2016-10-01
	         * @param allowSingle {Boolean} 允许单选
	         * @param allowSelectionBeforeToday {Boolean} 允许选择今天之前的日期
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'getData',
	        value: function getData(_ref) {
	            var _ref$prevDuration = _ref.prevDuration,
	                prevDuration = _ref$prevDuration === undefined ? 0 : _ref$prevDuration,
	                _ref$duration = _ref.duration,
	                duration = _ref$duration === undefined ? 90 : _ref$duration,
	                _ref$selectionStart = _ref.selectionStart,
	                selectionStart = _ref$selectionStart === undefined ? '' : _ref$selectionStart,
	                _ref$selectionEnd = _ref.selectionEnd,
	                selectionEnd = _ref$selectionEnd === undefined ? '' : _ref$selectionEnd,
	                allowSingle = _ref.allowSingle,
	                _ref$allowSelectionBe = _ref.allowSelectionBeforeToday,
	                allowSelectionBeforeToday = _ref$allowSelectionBe === undefined ? false : _ref$allowSelectionBe;
	
	            var _getDateInfoArr5 = getDateInfoArr(),
	                _getDateInfoArr6 = _slicedToArray(_getDateInfoArr5, 3),
	                todayYear = _getDateInfoArr6[0],
	                todayMonth = _getDateInfoArr6[1],
	                todayDateNum = _getDateInfoArr6[2];
	
	            var todayDate = new Date(todayYear, todayMonth - 1, todayDateNum);
	            this.allowSingle = allowSingle;
	            if ((typeof duration === 'undefined' ? 'undefined' : _typeof(duration)) === 'object') {
	                this.beginDate = getDate(duration[0]);
	                this.endDate = getDate(duration[1]);
	            } else {
	                this.beginDate = todayDate;
	                this.endDate = getEndDate(this.beginDate, duration);
	            }
	            if (prevDuration === 0 || JSON.stringify(prevDuration) === JSON.stringify(duration)) {
	                this.prevBeginDate = null;
	            } else if ((typeof prevDuration === 'undefined' ? 'undefined' : _typeof(prevDuration)) === 'object') {
	                this.prevBeginDate = getDate(prevDuration[0]);
	            } else {
	                this.prevBeginDate = todayDate;
	            }
	
	            this.checkInDate = selectionStart ? getDate(selectionStart) : null;
	            this.checkOutDate = selectionEnd ? getDate(selectionEnd) : null;
	            // 不能选中今天之前的日期时，入店日期为今天之前的情况， 则重置为今天
	            if (!allowSelectionBeforeToday && selectionStart && compareDate(this.checkInDate, todayDate) < 0) {
	                this.checkInDate = todayDate;
	            }
	
	            // 两次选中同一天情况，相当于allowSingle
	            if (!this.allowSingle && selectionStart === selectionEnd) {
	                this.allowSingle = true;
	            }
	
	            // 入店日期在离店日期之后， 则互换两者
	            if (!!selectionEnd && compareDate(this.checkInDate, this.checkOutDate) > 0) {
	                var _ref2 = [this.checkOutDate, this.checkInDate];
	                this.checkInDate = _ref2[0];
	                this.checkOutDate = _ref2[1];
	            }
	
	            return this.getCheckArr(allowSelectionBeforeToday, compareDate(this.beginDate, todayDate));
	        }
	
	        /**
	         * getCheckArr， 根据开始日期获取满足条件的dataSource
	         * @param allowSelectionBeforeToday 是否严格按照duration属性来渲染，允许选择今天之前的日期
	         * @param compareBeginAndToday beginDate 和 TodayDate比较返回值
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'getCheckArr',
	        value: function getCheckArr(allowSelectionBeforeToday, compareBeginAndToday) {
	            var _this2 = this;
	
	            var _getDateInfoArr7 = getDateInfoArr(this.beginDate),
	                _getDateInfoArr8 = _slicedToArray(_getDateInfoArr7, 2),
	                beginYear = _getDateInfoArr8[0],
	                beginMonth = _getDateInfoArr8[1];
	
	            var _getDateInfoArr9 = getDateInfoArr(this.endDate),
	                _getDateInfoArr10 = _slicedToArray(_getDateInfoArr9, 4),
	                endYear = _getDateInfoArr10[0],
	                endMonth = _getDateInfoArr10[1],
	                endDateNum = _getDateInfoArr10[2],
	                endDay = _getDateInfoArr10[3];
	
	            var endMonthLastDate = getLastDayOfMonth(endYear, endMonth).getDate();
	            var tempYear = beginYear;
	            var tempMonth = beginMonth;
	            var resArr = [];
	            // 当月第一天的星期数
	            var dayFirst = getFirstDayOfMonth(beginYear, beginMonth - 1).getDay();
	            // baseIndex 基数值，用于补足日期显示范围最后一周的剩下几天
	            // addNormalDateFlag 避免超过当前月的最大值，如32
	            // disable 同上，最后一周补上额外的几天不可点击
	            var hasToday = false;
	            var addMapFn = function addMapFn(item, i, _ref3) {
	                var _ref3$baseIndex = _ref3.baseIndex,
	                    baseIndex = _ref3$baseIndex === undefined ? 0 : _ref3$baseIndex,
	                    _ref3$addNormalDateFl = _ref3.addNormalDateFlag,
	                    addNormalDateFlag = _ref3$addNormalDateFl === undefined ? true : _ref3$addNormalDateFl,
	                    _ref3$disable = _ref3.disable,
	                    disable = _ref3$disable === undefined ? false : _ref3$disable;
	
	                var day = baseIndex + i + 1;
	                // 是否是今天
	                var isToday = false;
	                if (hasToday) {
	                    isToday = false;
	                } else {
	                    isToday = hasToday = _this2.isToday(tempYear, tempMonth, day);
	                }
	                // 禁止选择的日期：（1）为了美观的，日期超出duration之后的 （2）今天之前的 （3）日期在duration之前的
	                var disabled = disable || !allowSelectionBeforeToday && compareBeginAndToday < 0 && !hasToday || compareDate(new Date(tempYear, tempMonth - 1, day), _this2.beginDate) < 0;
	                if (addNormalDateFlag || day <= endMonthLastDate) {
	                    return {
	                        day: day,
	                        date: formatMonth(tempYear, tempMonth),
	                        lunar: (0, _lunar2.default)(tempYear, tempMonth, day).str,
	                        today: isToday,
	                        isCheckIn: false,
	                        isCheck: false,
	                        isCheckOut: false,
	                        weekend: isWeekend(day, dayFirst),
	                        holiday: isHoliday(tempYear, tempMonth, day),
	                        disabled: disabled
	                    };
	                }
	                return { disabled: true };
	            };
	            while (tempYear < endYear || tempYear === endYear && tempMonth <= endMonth) {
	                var isEnd = tempYear === endYear && tempMonth === endMonth;
	                var tempDateObj = getLastDayOfMonth(tempYear, tempMonth);
	                var dayLast = isEnd ? endDay : tempDateObj.getDay();
	                var dayLength = isEnd ? endDateNum : tempDateObj.getDate();
	
	                // 某月第一天之前的空格数
	                var firstMonthArr = (0, _util.getArrayByLength)(dayFirst).fill({ disabled: true });
	
	                // 某月最后一天之后的空格数
	                var lastMonthArr = (0, _util.getArrayByLength)(6 - dayLast).fill({ disabled: true });
	
	                // 某月具体每个天数的信息对象
	                var tempMonthArr = (0, _util.getArrayByLength)(dayLength).fill(0).map(addMapFn);
	
	                // 补足显示日期范围最后一周的剩下几天情况, 为了美观
	                if (isEnd) {
	                    var lastWeekArr = (0, _util.getArrayByLength)(6 - endDay).fill(0).map(function (item, i) {
	                        return addMapFn(item, i, {
	                            baseIndex: endDateNum,
	                            addNormalDateFlag: false,
	                            disable: true
	                        });
	                    });
	                    tempMonthArr = tempMonthArr.concat(lastWeekArr);
	                }
	                var monthArr = firstMonthArr.concat(tempMonthArr, lastMonthArr);
	                var groupKey = formatMonthChinese(tempYear, tempMonth);
	                resArr = resArr.concat(this.getMonthArr(monthArr, groupKey));
	                if (tempMonth === 12) {
	                    tempMonth = 1;
	                    tempYear++;
	                } else {
	                    tempMonth++;
	                }
	                // 下月的第一天的星期为当前月最后一天的星期+1
	                dayFirst = (dayLast + 1) % 7;
	            }
	            return resArr;
	        }
	
	        /**
	         * getMonthArr 将一个月的天数格式化成按周分组，一周一个对象
	         * @param monthArr {Array}
	         * @param groupKey {String}
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'getMonthArr',
	        value: function getMonthArr(monthArr, groupKey) {
	            var _this3 = this;
	
	            var resMonthArr = [];
	            var tempWeekArr = [];
	            monthArr.forEach(function (item, i) {
	                var itemDayObj = item;
	                if (!itemDayObj.disabled && !!_this3.checkInDate) {
	                    var itemDate = getDate(itemDayObj.date + '/' + itemDayObj.day);
	                    var compareIn = compareDate(itemDate, _this3.checkInDate);
	                    var compareOut = !!_this3.checkOutDate && compareDate(itemDate, _this3.checkOutDate);
	                    if (!compareIn) {
	                        _this3.checkInDate = itemDate;
	                        itemDayObj.isCheckIn = true;
	                    }
	                    if (compareIn > 0 && compareOut < 0 || (!compareIn || compareOut === 0) && !_this3.allowSingle) {
	                        itemDayObj.isCheck = true;
	                    }
	                    if (compareOut === 0) {
	                        _this3.checkOutDate = itemDate;
	                        itemDayObj.isCheckOut = true;
	                    }
	                }
	                if (i % 7 === 6) {
	                    tempWeekArr.push(itemDayObj);
	                    resMonthArr.push(_this3.getWeekObj(tempWeekArr, groupKey));
	                    tempWeekArr = [];
	                } else {
	                    tempWeekArr.push(itemDayObj);
	                }
	            });
	            return resMonthArr.map(function (item, i) {
	                return _extends({}, item, { key: item.groupKey + i });
	            });
	        }
	
	        /**
	         * 给每周对象上加isRender标志值, 该周是否更新,性能优化
	         * @param weekArr {Array} 一周的数组
	         * @param groupKey {String} 这周的groupKey
	         * @returns {{week: array, isRender: boolean, groupKey: string}}
	         */
	
	    }, {
	        key: 'getWeekObj',
	        value: function getWeekObj(weekArr, groupKey) {
	            var _this4 = this;
	
	            var resObj = {
	                week: weekArr,
	                isRender: false,
	                groupKey: groupKey
	            };
	            weekArr.forEach(function (item) {
	                var disabled = item.disabled,
	                    date = item.date,
	                    day = item.day;
	
	                if (disabled) {
	                    return;
	                }
	
	                // duration 乱变时，beginDate 所在的月 且 在beginDate 之前的日期全要刷新
	                if (_this4.prevBeginDate !== null) {
	                    var _getDateInfoArr11 = getDateInfoArr(_this4.prevBeginDate),
	                        _getDateInfoArr12 = _slicedToArray(_getDateInfoArr11, 3),
	                        prevBeginYear = _getDateInfoArr12[0],
	                        prevBeginMonth = _getDateInfoArr12[1],
	                        prevBeginDateNum = _getDateInfoArr12[2];
	
	                    if (formatMonth(prevBeginYear, prevBeginMonth) === date && day < prevBeginDateNum) {
	                        resObj.isRender = true;
	                    }
	                }
	
	                var itemDate = new Date(date + '/' + day);
	                var compareIn = _this4.checkInDate && compareDate(itemDate, _this4.checkInDate);
	                var compareBegin = compareDate(itemDate, _this4.beginDate);
	                var compareEnd = compareDate(itemDate, _this4.endDate);
	                // 起始日期改变时，所在的周也要刷新
	                if (compareBegin === 0 || compareEnd === 0) {
	                    resObj.isRender = true;
	                }
	
	                if (!!_this4.checkOutDate && _this4.isRender) {
	                    var compareOut = compareDate(itemDate, _this4.checkOutDate);
	                    // 结束
	                    if (compareOut <= 0) {
	                        _this4.isRender = !!compareOut;
	                        resObj.isRender = true;
	                    }
	                }
	                if (compareIn === 0) {
	                    resObj.isRender = true;
	                    _this4.isRender = true;
	                }
	            });
	            return resObj;
	        }
	    }]);
	
	    return CalendarCore;
	}(_ComponentCore3.default);
	
	exports.default = CalendarCore;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _EventEmitter2 = __webpack_require__(45);
	
	var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 大型组件使用的抽象Model类，用于集中管理组件内部的逻辑和状态。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var ComponentCore = function (_EventEmitter) {
	    _inherits(ComponentCore, _EventEmitter);
	
	    function ComponentCore(namespace) {
	        _classCallCheck(this, ComponentCore);
	
	        var _this = _possibleConstructorReturn(this, (ComponentCore.__proto__ || Object.getPrototypeOf(ComponentCore)).call(this));
	
	        _this.instanceId = ++ComponentCore.instanceId;
	        _this.namespace = namespace;
	        return _this;
	    }
	
	    _createClass(ComponentCore, [{
	        key: '_getEventName',
	        value: function _getEventName(eventName) {
	            return 'yo/component/' + this.namespace + '/' + eventName + '/' + this.instanceId;
	        }
	    }, {
	        key: 'emitEvent',
	        value: function emitEvent(eventName) {
	            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                args[_key - 1] = arguments[_key];
	            }
	
	            this.emit.apply(this, [this._getEventName(eventName)].concat(args));
	            return this;
	        }
	    }, {
	        key: 'registerEventHandler',
	        value: function registerEventHandler(eventName, handler) {
	            this.on(this._getEventName(eventName), handler.bind(this));
	            return this;
	        }
	    }, {
	        key: 'getAttr',
	        value: function getAttr(item, attrKey) {
	            return typeof item.get === 'function' ? item.get(attrKey) : item[attrKey];
	        }
	    }, {
	        key: 'setAttr',
	        value: function setAttr(item, attrKey, value) {
	            var ret = null;
	            if (typeof item.set === 'function') {
	                ret = item.set(attrKey, value);
	            } else {
	                ret = Object.assign({}, item, _defineProperty({}, attrKey, value));
	            }
	            return ret;
	        }
	    }]);
	
	    return ComponentCore;
	}(_EventEmitter3.default);
	
	ComponentCore.instanceId = -1;
	exports.default = ComponentCore;

/***/ },
/* 45 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Apply = Function.prototype.apply;
	var privateMap = new WeakMap();
	
	// For making private properties.
	function internal(obj) {
	    if (!privateMap.has(obj)) {
	        privateMap.set(obj, {});
	    }
	
	    return privateMap.get(obj);
	}
	
	/** Class EventEmitter for event-driven architecture. */
	
	var EventEmitter = function () {
	    /**
	     * Constructor.
	     *
	     * @constructor
	     * @param {number|null} maxListeners.
	     * @param {object} localConsole.
	     *
	     * Set private initial parameters:
	     *   _events, _callbacks, _maxListeners, _console.
	     *
	     * @return {this}
	     */
	    function EventEmitter() {
	        var maxListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	        var localConsole = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : console;
	
	        _classCallCheck(this, EventEmitter);
	
	        var self = internal(this);
	
	        self._events = new Set();
	        self._callbacks = {};
	        self._console = localConsole;
	        self._maxListeners = maxListeners === null ? null : parseInt(maxListeners, 10);
	
	        return this;
	    }
	
	    /**
	     * Add callback to the event.
	     *
	     * @param {string} eventName.
	     * @param {function} callback
	     * @param {object|null} context - In than context will be called callback.
	     * @param {number} weight - Using for sorting callbacks calls.
	     *
	     * @return {this}
	     */
	
	
	    _createClass(EventEmitter, [{
	        key: '_addCallback',
	        value: function _addCallback(eventName, callback, context, weight) {
	            this._getCallbacks(eventName).push({
	                callback: callback,
	                context: context,
	                weight: weight
	            });
	
	            // Sort the array of callbacks in
	            // the order of their call by "weight".
	            this._getCallbacks(eventName).sort(function (a, b) {
	                return a.weight > b.weight;
	            });
	
	            return this;
	        }
	
	        /**
	         * Get all callback for the event.
	         *
	         * @param {string} eventName
	         *
	         * @return {object|undefined}
	         */
	
	    }, {
	        key: '_getCallbacks',
	        value: function _getCallbacks(eventName) {
	            return internal(this)._callbacks[eventName];
	        }
	
	        /**
	         * Get callback's index for the event.
	         *
	         * @param {string} eventName
	         * @param {callback} callback
	         *
	         * @return {number|null}
	         */
	
	    }, {
	        key: '_getCallbackIndex',
	        value: function _getCallbackIndex(eventName, callback) {
	            return this._has(eventName) ? this._getCallbacks(eventName).findIndex(function (element) {
	                return element.callback === callback;
	            }) : null;
	        }
	
	        /**
	         * Check if we achive maximum of listeners for the event.
	         *
	         * @param {string} eventName
	         *
	         * @return {bool}
	         */
	
	    }, {
	        key: '_achieveMaxListener',
	        value: function _achieveMaxListener(eventName) {
	            return internal(this)._maxListeners !== null && internal(this)._maxListeners <= this.listenersNumber(eventName);
	        }
	
	        /**
	         * Check if callback is already exists for the event.
	         *
	         * @param {string} eventName
	         * @param {function} callback
	         * @param {object|null} context - In than context will be called callback.
	         *
	         * @return {bool}
	         */
	
	    }, {
	        key: '_callbackIsExists',
	        value: function _callbackIsExists(eventName, callback, context) {
	            var callbackInd = this._getCallbackIndex(eventName, callback);
	            var activeCallback = callbackInd !== -1 ? this._getCallbacks(eventName)[callbackInd] : void 0;
	
	            return callbackInd !== -1 && activeCallback && activeCallback.context === context;
	        }
	
	        /**
	         * Check is the event was already added.
	         *
	         * @param {string} eventName
	         *
	         * @return {bool}
	         */
	
	    }, {
	        key: '_has',
	        value: function _has(eventName) {
	            return internal(this)._events.has(eventName);
	        }
	
	        /**
	         * Add the listener.
	         *
	         * @param {string} eventName
	         * @param {function} callback
	         * @param {object|null} context - In than context will be called callback.
	         * @param {number} weight - Using for sorting callbacks calls.
	         *
	         * @return {this}
	         */
	
	    }, {
	        key: 'on',
	        value: function on(eventName, callback) {
	            var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	            var weight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
	
	            /* eslint no-unused-vars: 0 */
	            var self = internal(this);
	
	            if (typeof callback !== 'function') {
	                throw new TypeError(callback + ' is not a function');
	            }
	
	            // If event wasn't added before - just add it
	            // and define callbacks as an empty object.
	            if (!this._has(eventName)) {
	                self._events.add(eventName);
	                self._callbacks[eventName] = [];
	            } else {
	                // Check if we reached maximum number of listeners.
	                if (this._achieveMaxListener(eventName)) {
	                    self._console.warn('Max listeners (' + self._maxListeners + ')' + (' for event "' + eventName + '" is reached!'));
	                }
	
	                // Check if the same callback has already added.
	                if (this._callbackIsExists.apply(this, arguments)) {
	                    self._console.warn('Event "' + eventName + '"' + (' already has the callback ' + callback + '.'));
	                }
	            }
	
	            this._addCallback.apply(this, arguments);
	
	            return this;
	        }
	
	        /**
	         * Add the listener which will be executed only once.
	         *
	         * @param {string} eventName
	         * @param {function} callback
	         * @param {object|null} context - In than context will be called callback.
	         * @param {number} weight - Using for sorting callbacks calls.
	         *
	         * @return {this}
	         */
	
	    }, {
	        key: 'once',
	        value: function once(eventName, callback) {
	            var _this = this;
	
	            var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	            var weight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
	
	            var onceCallback = function onceCallback() {
	                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                    args[_key] = arguments[_key];
	                }
	
	                _this.off(eventName, onceCallback);
	                return Apply.call(callback, context, args);
	            };
	
	            return this.on(eventName, onceCallback, context, weight);
	        }
	
	        /**
	         * Remove an event at all or just remove selected callback from the event.
	         *
	         * @param {string} eventName
	         * @param {function} callback
	         *
	         * @return {this}
	         */
	
	    }, {
	        key: 'off',
	        value: function off(eventName) {
	            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            var self = internal(this);
	            var callbackInd = void 0;
	
	            if (this._has(eventName)) {
	                if (callback === null) {
	                    // Remove the event.
	                    self._events.delete(eventName);
	                    // Remove all listeners.
	                    self._callbacks[eventName] = null;
	                } else {
	                    callbackInd = this._getCallbackIndex(eventName, callback);
	
	                    if (callbackInd !== -1) {
	                        self._callbacks[eventName].splice(callbackInd, 1);
	                        // Remove all equal callbacks.
	                        this.off.apply(this, arguments);
	                    }
	                }
	            }
	
	            return this;
	        }
	
	        /**
	         * Trigger the event.
	         *
	         * @param {string} eventName
	         * @param {...args} args - All arguments which should be passed into callbacks.
	         *
	         * @return {this}
	         */
	
	    }, {
	        key: 'emit',
	        value: function emit(eventName) {
	            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	                args[_key2 - 1] = arguments[_key2];
	            }
	
	            if (this._has(eventName)) {
	                // All callbacks will be triggered sorter by "weight" parameter.
	                this._getCallbacks(eventName).forEach(function (element) {
	                    return Apply.call(element.callback, element.context, args);
	                });
	            }
	
	            return this;
	        }
	
	        /**
	         * Clear all events and callback links.
	         *
	         * @return {this}
	         */
	
	    }, {
	        key: 'clear',
	        value: function clear() {
	            var self = internal(this);
	
	            self._events.clear();
	            self._callbacks = {};
	
	            return this;
	        }
	
	        /**
	         * Returns number of listeners for the event.
	         *
	         * @param {string} eventName
	         *
	         * @return {number|null} - Number of listeners for event
	         *                         or null if event isn't exists.
	         */
	
	    }, {
	        key: 'listenersNumber',
	        value: function listenersNumber(eventName) {
	            return this._has(eventName) ? this._getCallbacks(eventName).length : null;
	        }
	    }]);
	
	    return EventEmitter;
	}();
	
	exports.default = EventEmitter;

/***/ },
/* 46 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	  * 农历1900-2100的润大小信息表
	  * @Array Of Property
	  * @return Hex
	  */
	var _lunarInfo = [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, // 1900-1909
	0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, // 1910-1919
	0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, // 1920-1929
	0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, // 1930-1939
	0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, // 1940-1949
	0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, // 1950-1959
	0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, // 1960-1969
	0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, // 1970-1979
	0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, // 1980-1989
	0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x055c0, 0x0ab60, 0x096d5, 0x092e0, // 1990-1999
	0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, // 2000-2009
	0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, // 2010-2019
	0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, // 2020-2029
	0x05aa0, 0x076a3, 0x096d0, 0x04afb, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, // 2030-2039
	0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, // 2040-2049
	0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0, // 2050-2059
	0x0a2e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4, // 2060-2069
	0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0, // 2070-2079
	0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160, // 2080-2089
	0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252, // 2090-2099
	0x0d520]; // 2100
	
	/**
	  * 24节气速查表
	  * @Array Of Property
	  * @trans["小寒","大寒","立春","雨水","惊蛰","春分","清明","谷雨","立夏","小满","芒种","夏至","小暑","大暑","立秋","处暑","白露","秋分","寒露","霜降","立冬","小雪","大雪","冬至"]
	  * @return Cn string
	  */
	var _solarTerm = [null, null, null, null, null, null, '\u6E05\u660E', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
	
	// const _solarTerm = ['\u5c0f\u5bd2', '\u5927\u5bd2', '\u7acb\u6625', '\u96e8\u6c34', '\u60ca\u86f0',
	//     '\u6625\u5206', '\u6e05\u660e', '\u8c37\u96e8', '\u7acb\u590f', '\u5c0f\u6ee1', '\u8292\u79cd',
	//     '\u590f\u81f3', '\u5c0f\u6691', '\u5927\u6691', '\u7acb\u79cb', '\u5904\u6691', '\u767d\u9732',
	//     '\u79cb\u5206', '\u5bd2\u9732', '\u971c\u964d', '\u7acb\u51ac', '\u5c0f\u96ea', '\u5927\u96ea',
	//     '\u51ac\u81f3'];
	
	/**
	  * 1900-2100各年的24节气日期速查表
	  * @Array Of Property
	  * @return 0x string For splice
	  */
	var _sTermInfo = ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e', '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722'];
	
	/**
	  * 返回农历y年闰月是哪个月；若y年没有闰月 则返回0
	  * @param lunar Year
	  * @return Number (0-12)
	  * @eg:var leapMonth = calendar.leapMonth(1987) ;// leapMonth=6
	  */
	var _leapMonth = function _leapMonth(y) {
	    return _lunarInfo[y - 1900] & 0xf;
	};
	
	/**
	  * 返回农历y年闰月的天数 若该年没有闰月则返回0
	  * @param lunar Year
	  * @return Number (0、29、30)
	  * @eg:var leapMonthDay = calendar.leapDays(1987) ;// leapMonthDay=29
	  */
	var _leapDays = function _leapDays(y) {
	    if (_leapMonth(y)) {
	        return _lunarInfo[y - 1900] & 0x10000 ? 30 : 29;
	    }
	    return 0;
	};
	
	/**
	  * 返回农历y年一整年的总天数
	  * @param lunar Year
	  * @return Number
	  * @eg:var count = calendar.lYearDays(1987) ;// count=387
	  */
	var _lYearDays = function _lYearDays(y) {
	    var i = void 0;
	    var sum = 348;
	    for (i = 0x8000; i > 0x8; i >>= 1) {
	        sum += _lunarInfo[y - 1900] & i ? 1 : 0;
	    }
	    return sum + _leapDays(y);
	};
	
	/**
	  * 返回农历y年m月（非闰月）的总天数，计算m为闰月时的天数请使用leapDays方法
	  * @param lunar Year
	  * @return Number (-1、29、30)
	  * @eg:var MonthDay = calendar.monthDays(1987,9) ;// MonthDay=29
	  */
	var _monthDays = function _monthDays(y, m) {
	    if (m > 12 || m < 1) {
	        return -1;
	    } // 月份参数从1至12，参数错误返回-1
	    return _lunarInfo[y - 1900] & 0x10000 >> m ? 30 : 29;
	};
	
	/**
	  * 传入公历(!)y年获得该年第n个节气的公历日期
	  * @param y公历年(1900-2100)；n二十四节气中的第几个节气(1~24)；从n=1(小寒)算起
	  * @return day Number
	  * @eg:var _24 = calendar.getTerm(1987,3) ;// _24=4;意即1987年2月4日立春
	  */
	var _getTerm = function _getTerm(y, n) {
	    if (y < 1900 || y > 2100) {
	        return -1;
	    }
	    if (n < 1 || n > 24) {
	        return -1;
	    }
	    var _table = _sTermInfo[y - 1900];
	    var _info = [parseInt('0x' + _table.substr(0, 5), 16).toString(), parseInt('0x' + _table.substr(5, 5), 16).toString(), parseInt('0x' + _table.substr(10, 5), 16).toString(), parseInt('0x' + _table.substr(15, 5), 16).toString(), parseInt('0x' + _table.substr(20, 5), 16).toString(), parseInt('0x' + _table.substr(25, 5), 16).toString()];
	    var _calday = [_info[0].substr(0, 1), _info[0].substr(1, 2), _info[0].substr(3, 1), _info[0].substr(4, 2), _info[1].substr(0, 1), _info[1].substr(1, 2), _info[1].substr(3, 1), _info[1].substr(4, 2), _info[2].substr(0, 1), _info[2].substr(1, 2), _info[2].substr(3, 1), _info[2].substr(4, 2), _info[3].substr(0, 1), _info[3].substr(1, 2), _info[3].substr(3, 1), _info[3].substr(4, 2), _info[4].substr(0, 1), _info[4].substr(1, 2), _info[4].substr(3, 1), _info[4].substr(4, 2), _info[5].substr(0, 1), _info[5].substr(1, 2), _info[5].substr(3, 1), _info[5].substr(4, 2)];
	    return parseInt(_calday[n - 1], 10);
	};
	
	/**
	 * 将数字转成2个位数
	 * @param num {number}
	 * @returns {string}
	 */
	var convert2digit = exports.convert2digit = function convert2digit(num) {
	    return num > 9 ? num : '0' + num;
	};
	
	/**
	  * 传入阳历年月日获得详细的公历、农历object信息 <=>JSON
	  * @param y  solar year
	  * @param m  solar month
	  * @param d  solar day
	  * @return JSON object
	  * @eg:console.log(calendar.solar2lunar(1987,11,01));
	  */
	
	exports.default = function (y, monthNum, dayNum) {
	    // 参数区间1900.1.31~2100.12.31
	    var m = parseInt(monthNum, 10);
	    var d = parseInt(dayNum, 10);
	    var i = void 0;
	    var temp = 0;
	    var offset = (Date.UTC(y, m - 1, d) - Date.UTC(1900, 0, 31)) / 86400000;
	    for (i = 1900; i < 2101 && offset > 0; i++) {
	        temp = _lYearDays(i);
	        offset -= temp;
	    }
	    if (offset < 0) {
	        offset += temp;
	        i--;
	    }
	
	    // 农历年
	    var year = i;
	
	    var leap = _leapMonth(i); // 闰哪个月
	    var isLeap = false;
	
	    // 效验闰月
	    for (i = 1; i < 13 && offset > 0; i++) {
	        // 闰月
	        if (leap > 0 && i === leap + 1 && isLeap === false) {
	            --i;
	            isLeap = true;
	            temp = _leapDays(year); // 计算农历闰月天数
	        } else {
	            temp = _monthDays(year, i); // 计算农历普通月天数
	        }
	        // 解除闰月
	        if (isLeap === true && i === leap + 1) {
	            isLeap = false;
	        }
	        offset -= temp;
	    }
	
	    if (offset === 0 && leap > 0 && i === leap + 1 && !isLeap) {
	        --i;
	    }
	    if (offset < 0) {
	        offset += temp;
	        --i;
	    }
	    // 农历月
	    var month = i;
	    // 农历日
	    var day = offset + 1;
	
	    // 月柱 1900年1月小寒以前为 丙子月(60进制12)
	    var firstNode = _getTerm(year, m * 2 - 1); // 返回当月「节」为几日开始
	    var secondNode = _getTerm(year, m * 2); // 返回当月「节」为几日开始
	
	    // 传入的日期的节气与否
	    var Term = null;
	    if (firstNode === d) {
	        Term = _solarTerm[m * 2 - 2];
	    }
	    if (secondNode === d) {
	        Term = _solarTerm[m * 2 - 1];
	    }
	
	    var str = [convert2digit(month), convert2digit(day)].join('-');
	    return { str: str, Term: Term };
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	/**
	 * Created by qingguo.xu on 16/9/7.
	 */
	exports.default = {
	    // 公历节假日
	    solar: {
	        '01-01': '元旦',
	        '02-14': '情人节',
	        '05-01': '劳动节',
	        '10-01': '国庆节',
	        '11-11': '光棍节',
	        '12-24': '平安夜',
	        '12-25': '圣诞节'
	    },
	
	    // 农历节假日
	    lunar: {
	        '01-01': '春节',
	        '05-05': '端午节',
	        '07-07': '七夕',
	        '08-15': '中秋节',
	        '12-30': '除夕'
	    }
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 某一天的数据显示
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    isRender: _propTypes2.default.bool,
	    week: _propTypes2.default.array,
	    selectionStartText: _propTypes2.default.string,
	    selectionEndText: _propTypes2.default.string,
	    onChange: _propTypes2.default.func,
	    renderDate: _propTypes2.default.func
	};
	
	var WeekItem = function (_Component) {
	    _inherits(WeekItem, _Component);
	
	    function WeekItem() {
	        _classCallCheck(this, WeekItem);
	
	        return _possibleConstructorReturn(this, (WeekItem.__proto__ || Object.getPrototypeOf(WeekItem)).apply(this, arguments));
	    }
	
	    _createClass(WeekItem, [{
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps) {
	            if (this.props.isRender !== nextProps.isRender) {
	                return true;
	            }
	            return nextProps.isRender;
	        }
	    }, {
	        key: 'handleChange',
	        value: function handleChange(str) {
	            if (!str) {
	                return null;
	            }
	            return this.props.onChange(str);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _props = this.props,
	                selectionStartText = _props.selectionStartText,
	                selectionEndText = _props.selectionEndText,
	                renderDate = _props.renderDate;
	
	            var weeks = this.props.week.map(function (item, i) {
	                var disabled = item.disabled,
	                    today = item.today,
	                    weekend = item.weekend,
	                    holiday = item.holiday,
	                    isCheckIn = item.isCheckIn,
	                    isCheckOut = item.isCheckOut,
	                    isCheck = item.isCheck;
	
	                var fullDay = item.disabled ? null : item.date + '-' + item.day;
	                var classNames = '';
	                if (today) {
	                    classNames += 'today ';
	                }
	                if (weekend) {
	                    classNames += 'weekend ';
	                }
	                if (!!holiday) {
	                    classNames += 'holiday ';
	                }
	                if (isCheckIn) {
	                    classNames += 'start ';
	                }
	                if (isCheckOut) {
	                    classNames += 'end ';
	                }
	                if (isCheck) {
	                    classNames += 'range ';
	                }
	                if (disabled) {
	                    classNames += 'disabled ';
	                }
	                classNames = (0, _classnames2.default)(classNames).trim();
	                var ret = [_react2.default.createElement(
	                    'span',
	                    { key: 0, className: 'day' },
	                    item.day
	                ), item.today ? _react2.default.createElement(
	                    'ins',
	                    { key: 1, className: 'special' },
	                    '\u4ECA\u5929'
	                ) : null, item.holiday ? _react2.default.createElement(
	                    'ins',
	                    { key: 2, className: 'special' },
	                    item.holiday
	                ) : null, item.isCheckIn ? _react2.default.createElement(
	                    'span',
	                    { key: 3, className: 'tip yo-ico' },
	                    selectionStartText
	                ) : null, item.isCheckOut ? _react2.default.createElement(
	                    'span',
	                    { key: 4, className: 'tip yo-ico' },
	                    selectionEndText
	                ) : null];
	                return _react2.default.createElement(
	                    _touchable2.default,
	                    { key: i, onTap: function onTap() {
	                            return _this2.handleChange(fullDay);
	                        }, internalUse: true },
	                    _react2.default.createElement(
	                        'li',
	                        {
	                            className: classNames || null
	                        },
	                        renderDate(item, ret) || ret
	                    )
	                );
	            });
	
	            return _react2.default.createElement(
	                'ul',
	                { className: 'week' },
	                weeks
	            );
	        }
	    }]);
	
	    return WeekItem;
	}(_react.Component);
	
	exports.default = WeekItem;
	
	
	WeekItem.propTypes = propTypes;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _list = __webpack_require__(50);
	
	var _list2 = _interopRequireDefault(_list);
	
	var _GroupCore = __webpack_require__(70);
	
	var _GroupCore2 = _interopRequireDefault(_GroupCore);
	
	var _util = __webpack_require__(5);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _IndexNavBar = __webpack_require__(71);
	
	var _IndexNavBar2 = _interopRequireDefault(_IndexNavBar);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component GroupList
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 分组列表组件，继承了List的大部分特性。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 为列表数据提供分组展示形式，每个组有一个标题，在滚动时当前组的标题有吸顶效果。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 同样支持无穷模式（指定高度和未知高度）。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 提供分组导航（参考常见的字母导航），但是不定高的无穷列表模式无法使用。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./grouplist.md}{instruUrl: grouplist.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    /**
	     * @property dataSource
	     * @type Array/Immutable List
	     * @default null
	     * @description 组件的数据源，每个元素必须有groupKey属性(String)，如果是不需要分组的元素，groupKey属性为'notGrouped'。
	     *
	     * 示例:
	     * ```
	     * [
	     *   {
	     *     text: String //如果传入了这个属性并且没有配置renderItem，会以text文本作为列表项的内容
	     *     groupKey: String //列表项的groupKey，将根据这个属性对元素进行分组，如果是不需要分组的元素,应设置为'notGrouped'。
	     *   },
	     *   ...
	     * ]
	     * ```
	     */
	    dataSource: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	        groupKey: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	    })), _propTypes2.default.object]).isRequired,
	    /**
	     * @property sort
	     * @type Function
	     * @default null
	     * @param {String} a 两个title之中在前面的那个
	     * @param {String} b 两个title之中在后面的那个
	     * @description 组的排序规则，使用方式与array.sort相同，能够接受两个参数a和b，返回一个数字。
	     * 负数表示a在b前，正数表示a在b后。
	     */
	    sort: _propTypes2.default.func,
	    /**
	     * @property renderGroupTitle
	     * @type Function
	     * @default (groupKey)=>groupKey
	     * @param groupKey {String} title对应的groupKey
	     * @description 根据groupKey渲染group title。
	     */
	    renderGroupTitle: _propTypes2.default.func,
	    /**
	     * @property renderGroupItem
	     * @type Function
	     * @param {Object} item 列表项数据
	     * @param {Number} index 在数据源中的index
	     * @default item=>item.text
	     * @description 根据列表项数据渲染列表项，返回JSX或者字符串，默认会返回数据对象的text(如果定义了的话)。
	     */
	    renderGroupItem: _propTypes2.default.func,
	    /**
	     * @property staticSection
	     * @type Element
	     * @default null
	     * @version 3.0.3
	     * @description 在所有列表项之上渲染的一块静态区域，在开启Infinite模式时，这块区域不会参与列表项的回收复用。
	     * 注意：在设置staticSection以后，你还必须设置staticSectionHeight属性指定它的高度。
	     */
	    staticSection: _propTypes2.default.element,
	    /**
	     * @property staticSectionHeight
	     * @type Number
	     * @version 3.0.3
	     * @default 0
	     * @description 静态区域的高度，在设置了staticSection以后必须为它指定一个高度。
	     */
	    staticSectionHeight: _propTypes2.default.number,
	    /**
	     * @property showIndexNavBar
	     * @type Bool
	     * @default false
	     * @description 是否显示分组导航。
	     */
	    showIndexNavBar: _propTypes2.default.bool,
	    /**
	     * @property infinite
	     * @type Bool
	     * @default false
	     * @description 是否使用无穷列表模式(参考List的无穷列表模式)。
	     */
	    infinite: _propTypes2.default.bool,
	    /**
	     * @property infiniteSize
	     * @type Number
	     * @default 30
	     * @description 无穷列表模式中，保留在容器中列表项的数量。
	     * 由于grouplist中列表项的高度一般较小，因此默认值为30。
	     */
	    infiniteSize: _propTypes2.default.number,
	    /**
	     * @property itemHeight
	     * @type Number
	     * @default null
	     * @description 无穷列表模式下列表项的高度。
	     */
	    itemHeight: _propTypes2.default.number,
	    /**
	     * @property titleHeight
	     * @type Number
	     * @default 25
	     * @description group title的高度，使用infinite模式时通过这个属性设置title项的高度，参见List的无穷列表模式。
	     */
	    titleHeight: _propTypes2.default.number,
	    /**
	     * @property titleOffset
	     * @type Number
	     * @default 0,
	     * @description group title吸顶容器距离默认位置（top:0）的偏移。当你不希望吸顶容器处在GroupList的顶部时，可以设置这个属性。
	     * @version 3.0.6
	     */
	    titleOffset: _propTypes2.default.number,
	    /**
	     * @property itemExtraClass
	     * @type String/Function
	     * @default null
	     * @param {Object} item 列表项数据对象
	     * @param {Number} index 在数据源中的偏移
	     * @description grouplist列表项的extraClass，使用方式参考List的itemExtraClass属性。
	     *
	     * 注意:这个属性的值/结果会完全覆盖掉默认的className。
	     */
	    itemExtraClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @property groupTitleExtraClass
	     * @type String
	     * @default null
	     * @param {String} groupKey 分组名
	     * @description grouptitle的extraClass，可以是字符串或者函数，如果传入函数，可以接收一个参数，为当前元素的groupKey。
	     *
	     * 注意:这个属性的值/返回的结果会完全覆盖掉默认的className而不是追加。
	     */
	    groupTitleExtraClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @property offsetY
	     * @type Number
	     * @default 0
	     * @description 列表的初始位置。
	     */
	    offsetY: _propTypes2.default.number,
	    /**
	     * 内容底部留白
	     *
	     * @property contentInset
	     * @type Number
	     * @description 内容区域周围的留白，**目前仅支持 bottom**。主要用于适配 iPhoneX，在下方留出一定间隙。有『加载更多』时，显示在『加载更多』的下方。可以通过设置背景色来改变留白的颜色。
	     * @default {bottom:0}
	     * @version 3.0.13
	     */
	    contentInset: _propTypes2.default.shape({
	        bottom: _propTypes2.default.number
	    }),
	    /**
	     * @property onItemTap
	     * @type Function
	     * @default ()=>{}
	     * @param {Object} item 列表项数据对象
	     * @param {Number} index 在数据源中的偏移
	     * @param {element} target 当前event对象的target
	     * @description 点击列表项时触发的事件回调，接受的参数和使用方式与List相同。
	     */
	    onItemTap: _propTypes2.default.func,
	    /**
	     * @property itemTouchClass
	     * @type String/Function
	     * @param {Object} item 列表项数据对象
	     * @param {Number} index 在数据源中的偏移
	     * @default item-light
	     * @description 列表项被点击时附加的className，参见List同名属性。
	     */
	    itemTouchClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @property usePullRefresh
	     * @type Bool
	     * @description 是否使用下拉刷新。
	     */
	    usePullRefresh: _propTypes2.default.bool,
	    /**
	     * 下拉刷新高度
	     *
	     * @property pullRefreshHeight
	     * @type Number
	     * @description 触发下拉刷新状态的高度（一般即为下拉刷新提示区域的高度）。
	     * @default 40
	     */
	    pullRefreshHeight: _propTypes2.default.number,
	    /**
	     * 下拉刷新渲染函数
	     *
	     * @property renderPullRefresh
	     * @type Function
	     * @returns {JSX} 用来渲染 pullRefresh 的 JSX
	     * @description () => JSX
	     *
	     * 自定义的下拉刷新渲染函数。
	     */
	    renderPullRefresh: _propTypes2.default.func,
	    /**
	     * @property onRefresh
	     * @type Function
	     * @param {Array} dataSource 当前数据源
	     * @description 下拉刷新回调。
	     */
	    onRefresh: _propTypes2.default.func,
	
	    /**
	     * @property useLoadMore
	     * @type Bool
	     * @description 是否开启加载更多功能。
	     */
	    useLoadMore: _propTypes2.default.bool,
	    /**
	     * @property onLoad
	     * @type Function
	     * @description 加载更多触发时的回调函数。
	     */
	    onLoad: _propTypes2.default.func,
	    /**
	     * 加载更多高度
	     *
	     * @property loadMoreHeight
	     * @type Number
	     * @description 触发加载更多状态的高度（一般即为加载更多提示区域的高度）。
	     * @default 40
	     */
	    loadMoreHeight: _propTypes2.default.number,
	    /**
	     * @property renderLoadMore
	     * @type Function
	     * @return JSX
	     * @description 自定义加载更多区域的渲染方式，用返回的JSX节点取代原节点。
	     */
	    renderLoadMore: _propTypes2.default.func,
	    /**
	     * @property onScroll
	     * @type Function
	     * @param {Number} offsetY 当前 Scroller 的 y 轴偏移量
	     * @description Scroller滚动时触发的回调。
	     */
	    onScroll: _propTypes2.default.func,
	    /**
	     * @property onScrollEnd
	     * @type Function
	     * @param {Number} offsetY 当前 Scroller 的 y 轴偏移量
	     * @default null
	     * @version 3.1.4
	     * @description 滚动结束之后的回调
	     */
	    onScrollEnd: _propTypes2.default.func,
	    /**
	     * @property extraClass
	     * @type String
	     * @description 附加给组件根节点的额外className。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property style
	     * @type Object
	     * @default null
	     * @description 给GroupList容器节点绑定的额外样式。
	     * @version 3.0.2
	     */
	    style: _propTypes2.default.object,
	    shouldItemUpdate: _propTypes2.default.func,
	    /**
	     * @property onIndexNavBarItemHover
	     * @type Function
	     * @param groupKey {String} 当前手指盖住的navBarItem对应的groupKey
	     * @description 在手指扫过分组导航的某一项时触发的回调
	     */
	    onIndexNavBarItemHover: _propTypes2.default.func,
	    /**
	     * @property renderIndexNavBarItem
	     * @type Function
	     * @param {String/Number} groupKey
	     * @default groupKey=>groupKey
	     * @description 定制grouplist分组导航中每一项的render函数，接收groupkey为参数，返回字符串或者jsx
	     */
	    renderIndexNavBarItem: _propTypes2.default.func,
	    /**
	     * @property disabled
	     * @type Bool
	     * @default false
	     * @description 是否禁止滚动,参见Scroller的同名属性
	     * @version 3.0.2
	     */
	    disabled: _propTypes2.default.bool,
	    /**
	     * 方向锁定阈值
	     *
	     * @property directionLockThreshold
	     * @type Number
	     * @description 只允许单向滚动的时候，会根据这个阀值来判定响应哪个方向上的位移：某一方向位移减去另一个方向位移超过阀值，就会判定为这个方向的滚动。
	     * @default 5
	     * @version 3.0.2
	     */
	    directionLockThreshold: _propTypes2.default.number,
	    /**
	     * @property deceleration
	     * @type Number
	     * @description 滚动视图开始惯性滚动时减速的加速度，默认为0.010。
	     * @version 3.0.6
	     */
	    deceleration: _propTypes2.default.number,
	    /**
	     * @property scrollWithoutTouchStart
	     * @type Bool
	     * @default false
	     * @description ** 实验中的属性 **
	     * 在默认情况下一次用户触发（非调用scrollTo方法）scroller的滚动需要由touchstart事件来启动，在某些情况下，例如scroller从disable状态切换到enable状态时，
	     * 可能不能接收到这一瞬间的touchstart事件，这可能导致用户期待的滚动过程没有发生。
	     * 开启这个属性为true以后将允许scroller用touchmove启动滚动过程，这可以解决上述场景的问题。
	     * @version 3.0.2
	     */
	    scrollWithoutTouchStart: _propTypes2.default.bool,
	    /**
	     * @skip
	     * @property isTitleStatic
	     * @description 内部属性，标题是否始终不render
	     */
	    isTitleStatic: _propTypes2.default.bool,
	    /**
	     * @property stickyOffset
	     * @type Number
	     * @default 0
	     * @description 给staticSection内部吸顶容器设置的y轴偏移。
	     * @version 3.0.6
	     */
	    stickyOffset: _propTypes2.default.number
	};
	
	var defaultProps = {
	    // item高度,只在infinite模式下生效
	    itemHeight: null,
	    // 组标题的高度,只在infinite模式下生效
	    titleHeight: 25,
	    // 是否是无限列表
	    infinite: false,
	    // 无限列表内保留元素的数量,只在infinite模式下生效
	    infiniteSize: 30,
	    // 自定义title renderer
	    renderGroupTitle: function renderGroupTitle(groupKey) {
	        return groupKey;
	    },
	
	    // 定义item renderer
	    renderGroupItem: function renderGroupItem(item) {
	        return typeof item.get === 'function' ? item.get('text') : item.text;
	    },
	
	    // 自定义className
	    extraClass: '',
	    // 是否展示关键字导航栏
	    showIndexNavBar: false,
	    // 自定义关键字导航栏item renderer
	    renderIndexNavBarItem: function renderIndexNavBarItem(groupKey) {
	        return groupKey;
	    },
	
	    groupTitleExtraClass: '',
	    offsetY: 0,
	    onItemTap: null,
	    sort: null,
	    itemTouchClass: 'item-touch',
	    usePullRefresh: false,
	    useLoadMore: false,
	    onRefresh: function onRefresh() {},
	
	    itemExtraClass: '',
	    onIndexNavBarItemHover: function onIndexNavBarItemHover() {},
	    onScroll: function onScroll() {},
	    shouldItemUpdate: function shouldItemUpdate() {
	        return false;
	    },
	
	    disabled: false,
	    style: null,
	    scrollWithoutTouchStart: true,
	    staticSection: null,
	    isTitleStatic: false,
	    titleOffset: 0
	};
	
	var GroupList = function (_Component) {
	    _inherits(GroupList, _Component);
	
	    /**
	     * state中维护了处理过的dataSource(加入了title数据)和groupTitle的列表
	     * @param props
	     */
	    function GroupList(props) {
	        _classCallCheck(this, GroupList);
	
	        var _this = _possibleConstructorReturn(this, (GroupList.__proto__ || Object.getPrototypeOf(GroupList)).call(this, props));
	
	        var _this$props = _this.props,
	            dataSource = _this$props.dataSource,
	            itemHeight = _this$props.itemHeight,
	            titleHeight = _this$props.titleHeight,
	            sort = _this$props.sort,
	            infinite = _this$props.infinite,
	            isTitleStatic = _this$props.isTitleStatic,
	            titleOffset = _this$props.titleOffset;
	
	        _this.groupModel = new _GroupCore2.default({
	            dataSource: dataSource,
	            itemHeight: itemHeight,
	            titleHeight: titleHeight,
	            sort: sort,
	            infinite: infinite,
	            isTitleStatic: isTitleStatic,
	            titleOffset: titleOffset
	        });
	        _this.state = {
	            dataSource: _this.groupModel.dataSource,
	            groupTitles: _this.groupModel.groupTitles
	        };
	        return _this;
	    }
	
	    _createClass(GroupList, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this2 = this;
	
	            // 获取stickyHeader的display值
	            this.groupModel.registerEventHandler('refreshStickyHeader', function (stickyHeader) {
	                if (stickyHeader.title) {
	                    // sticky header的更新并没有采取setState的形式,因为在低端手机上render的性能很差
	                    // 而这个操作触发频率很高,因此直接改变dom属性
	                    var groupKey = stickyHeader.title.groupKey,
	                        offset = stickyHeader.offset,
	                        transform = 'translate(0px,' + offset + 'px) translateZ(0px)',
	                        groupTitle = _this2.props.renderGroupTitle(stickyHeader.title.groupKey),
	                        groupTitleExtraClass = _this2.props.groupTitleExtraClass;
	
	
	                    if (typeof groupTitle === 'string' || typeof groupTitle === 'number' || groupTitle === null) {
	                        if (_this2.stickyHeader) {
	                            _this2.stickyHeader.innerHTML = groupTitle;
	                        }
	                    } else {
	                        if (_this2.stickyHeader) {
	                            _reactDom2.default.render(groupTitle, _this2.stickyHeader);
	                        }
	                    }
	                    if (_this2.stickyHeader) {
	                        _this2.stickyHeader.style.tranform = transform;
	                        _this2.stickyHeader.style.webkitTransform = transform;
	                        _this2.stickyHeader.style.display = stickyHeader.title.display;
	                        _this2.stickyHeader.className = (typeof groupTitleExtraClass === 'function' ? groupTitleExtraClass(groupKey) : groupTitleExtraClass) + ' sticky label group-title';
	                    }
	                } else {
	                    if (_this2.stickyHeader) {
	                        _this2.stickyHeader.style.display = 'none';
	                    }
	                }
	            }).registerEventHandler('refresh', function (dataSource, groupTitles) {
	                _this2.setState({ dataSource: dataSource, groupTitles: groupTitles });
	            });
	
	            if (this.groupModel.isHeightFixed) {
	                this.refreshStaticSectionHeight();
	                this.refreshStickyHeader();
	            } else {
	                setTimeout(function () {
	                    _this2.refreshStaticSectionHeight();
	                    _this2.refreshStickyHeader();
	                }, _util.DELAY_TIME_FOR_INFINITE_WITHOUT_HEIGHT);
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this3 = this;
	
	            var dataSource = nextProps.dataSource,
	                sort = nextProps.sort,
	                infinite = nextProps.infinite,
	                titleHeight = nextProps.titleHeight,
	                titleOffset = nextProps.titleOffset;
	
	            this.groupModel.refresh({ dataSource: dataSource, sort: sort, infinite: infinite, titleHeight: titleHeight, titleOffset: titleOffset });
	
	            setTimeout(function () {
	                _this3.refreshStaticSectionHeight();
	                _this3.refreshStickyHeader();
	            }, 0);
	        }
	
	        /**
	         * 根据offsetY调整stickyHeader的位置
	         * @param offsetY
	         */
	
	    }, {
	        key: 'refreshStickyHeader',
	        value: function refreshStickyHeader() {
	            var offsetY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.groupModel.offsetY;
	
	            this.groupModel.offsetY = offsetY;
	            this.groupModel.refreshStickyHeader(offsetY);
	        }
	    }, {
	        key: 'refreshStaticSectionHeight',
	        value: function refreshStaticSectionHeight() {
	            if (this.list && this.list.staticSectionContaienr != null) {
	                this.groupModel.staticSectionHeight = this.list.staticSectionContaienr.offsetHeight;
	            }
	        }
	
	        /**
	         * 分组导航时调用,直接跳到目标分组的第一个元素
	         * @param groupKey
	         */
	
	    }, {
	        key: 'scrollToGroup',
	        value: function scrollToGroup(groupKey) {
	            this.stopAnimate();
	            if (this.list) {
	                var targetOffsetY = -this.groupModel.getGroupOffsetY(groupKey);
	                var maxScrollY = this.list.scroller.maxScrollY;
	                targetOffsetY = targetOffsetY < maxScrollY ? maxScrollY : targetOffsetY;
	
	                this.list.scrollTo(targetOffsetY, 0);
	            }
	        }
	
	        /**
	         * @method refresh
	         * @description 在GroupList容器尺寸发生变化时调用，刷新内部的Scroller组件。
	         * @version 3.0.6
	         */
	
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            // grouplist结合modal使用的时候会非常麻烦，因为modal在隐藏的时候grouplist已经mount了
	            // 因此需要在onShow的时候刷新所有title的位置，必须触发一次它们的componentDidMount
	            this.forceUpdate();
	            this.refreshStickyHeader();
	            if (this.list) {
	                this.list.refresh();
	            }
	        }
	
	        /**
	         * @method resetLoadStatus
	         * @param {Bool} hasLoadMore 是否能够加载更多，如果传入false，加载更多区域的文字将会变成 没有更多了，并且继续向下滚动时不会触发onLoadMore。
	         * @description 重置加载更多功能。
	         * @version 3.0.7
	         */
	
	    }, {
	        key: 'resetLoadStatus',
	        value: function resetLoadStatus(hasLoadMore) {
	            if (this.list) {
	                this.list.resetLoadStatus(hasLoadMore);
	            }
	        }
	
	        /**
	         * @description 调用List同名方法,滚动到某个位置y。
	         * @method scrollTo
	         * @param {Number} y y坐标
	         * @param {Number} [time] 动画持续时间
	         */
	
	    }, {
	        key: 'scrollTo',
	        value: function scrollTo(y, time) {
	            if (this.list) {
	                this.list.scrollTo(y, time);
	            }
	        }
	
	        /**
	         * @description 调用List同名方法,中止正在执行的滚动。
	         * @method stopAnimate
	         */
	
	    }, {
	        key: 'stopAnimate',
	        value: function stopAnimate() {
	            if (this.list) {
	                this.list.stopAnimate();
	            }
	        }
	
	        /**
	         * @method stopRefreshing
	         * @param {Bool} [success] 下拉刷新是否成功，默认为 false。
	         * @param {Object} [config] 停止刷新的动画配置。
	         * @param {number} [config.duration] 回到顶部的动画时间，默认是 300ms。
	         * @param {Function} [callback] 回到顶部的动画执行完毕的回调。
	         * @description 调用 Scroller 同名方法，中止下拉刷新过程。在列表发生下拉刷新之后你应该调用这个方法去中止它(比如服务器响应已经返回的时候),否则刷新不会自动终止。
	         */
	
	    }, {
	        key: 'stopRefreshing',
	        value: function stopRefreshing(success, config, callback) {
	            if (this.list) {
	                this.list.stopRefreshing(success, config, callback);
	            }
	        }
	
	        /**
	         * @description 调用List同名方法,模拟下拉刷新过程。
	         * @method startRefreshing
	         */
	
	    }, {
	        key: 'startRefreshing',
	        value: function startRefreshing() {
	            if (this.list) {
	                this.list.startRefreshing();
	            }
	        }
	
	        /**
	         * @method stopLoading
	         * @param {Bool} [success] 加载更多是否成功
	         * @description 调用List同名方法,中止加载更多过程。
	         */
	
	    }, {
	        key: 'stopLoading',
	        value: function stopLoading(success) {
	            if (this.list) {
	                this.list.stopLoading(success);
	            }
	        }
	
	        /**
	         * 根据item._type渲染title/groupitem
	         * @param item
	         * @returns {*}
	         */
	
	    }, {
	        key: 'renderItem',
	        value: function renderItem(item, index) {
	            var _props = this.props,
	                renderGroupTitle = _props.renderGroupTitle,
	                renderGroupItem = _props.renderGroupItem;
	
	            return item._type === 'groupTitle' ? renderGroupTitle(item.groupKey, index) : renderGroupItem(item.srcData, index);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;
	
	            var _props2 = this.props,
	                style = _props2.style,
	                itemExtraClass = _props2.itemExtraClass,
	                groupTitleExtraClass = _props2.groupTitleExtraClass,
	                extraClass = _props2.extraClass,
	                onItemTap = _props2.onItemTap,
	                renderIndexNavBarItem = _props2.renderIndexNavBarItem,
	                itemTouchClass = _props2.itemTouchClass,
	                onRefresh = _props2.onRefresh,
	                onIndexNavBarItemHover = _props2.onIndexNavBarItemHover,
	                _onScroll = _props2.onScroll,
	                shouldItemUpdate = _props2.shouldItemUpdate,
	                titleHeight = _props2.titleHeight,
	                titleOffset = _props2.titleOffset;
	            // 不定高的无穷列表不能支持showIndexNavBar,因为无法定位到每一个item的_translateY
	
	            var showIndexNavBar = this.props.showIndexNavBar && this.groupModel.isHeightFixed;
	            var rootClassNames = (0, _classnames2.default)('yo-group', extraClass);
	            var _state = this.state,
	                dataSource = _state.dataSource,
	                groupTitles = _state.groupTitles;
	            // 包裹props中的onItemTap,这是因为grouplist的数据源中加入了title的数据
	            // 在onItemTap时需要filter掉这些title
	
	            var wrappedonItemTap = function wrappedonItemTap(item, index, target) {
	                if (onItemTap && item._type !== 'groupTitle') {
	                    onItemTap(item.srcData, index, target);
	                }
	            };
	            // 同上
	            var wrappedOnPullRefresh = function wrappedOnPullRefresh(ds) {
	                onRefresh(ds.filter(function (item) {
	                    return item._type !== 'groupTitle';
	                }));
	            };
	            var wrappedItemActiveClass = function wrappedItemActiveClass(item, index) {
	                var ret = null;
	                if (item._type === 'groupTitle') {
	                    ret = null;
	                } else {
	                    ret = typeof itemTouchClass !== 'function' ? itemTouchClass : itemTouchClass(item.srcData, index);
	                }
	                return ret;
	            };
	            var wrappedItemExtraClass = function wrappedItemExtraClass(item, index) {
	                var ret = null;
	                if (item._type === 'groupTitle') {
	                    ret = typeof groupTitleExtraClass !== 'function' ? groupTitleExtraClass : groupTitleExtraClass(item.groupKey);
	                } else {
	                    ret = typeof itemExtraClass !== 'function' ? itemExtraClass : itemExtraClass(item.srcData, index);
	                }
	                return ret;
	            };
	            var wrappedShouldItemUpdate = function wrappedShouldItemUpdate(next, now) {
	                if (!(now._type === 'groupTitle' && next._type === 'groupTitle')) {
	                    return shouldItemUpdate(next.srcData, now.srcData);
	                }
	                return false;
	            };
	
	            return _react2.default.createElement(
	                'div',
	                { className: rootClassNames, style: style },
	                _react2.default.createElement('div', {
	                    className: 'sticky label',
	                    style: { height: titleHeight, top: titleOffset, display: 'none' },
	                    ref: function ref(dom) {
	                        if (dom) {
	                            _this4.stickyHeader = dom;
	                        }
	                    }
	                }),
	                showIndexNavBar ? _react2.default.createElement(_IndexNavBar2.default, {
	                    list: groupTitles,
	                    renderItem: renderIndexNavBarItem,
	                    onNavItemFocus: function onNavItemFocus(item) {
	                        if (item) {
	                            _this4.scrollToGroup(item.groupKey);
	                            onIndexNavBarItemHover(item.groupKey);
	                        }
	                    }
	                }) : null,
	                _react2.default.createElement(_list2.default, _extends({}, (0, _util.inheritProps)(this.props, ['scrollWithoutTouchStart', 'directionLockThreshold', 'disabled', 'infinite', 'infiniteSize', 'offsetY', 'usePullRefresh', 'pullRefreshHeight', 'renderPullRefresh', 'useLoadMore', 'onLoad', 'onScrollEnd', 'renderLoadMore', 'loadMoreHeight', 'staticSection', 'deceleration', 'stickyOffset', 'contentInset']), {
	                    dataSource: dataSource,
	                    extraClass: 'yo-scroller-fullscreen',
	                    renderItem: function renderItem(item, index) {
	                        return _this4.renderItem(item, index);
	                    },
	                    itemExtraClass: wrappedItemExtraClass,
	                    shouldItemUpdate: wrappedShouldItemUpdate,
	                    onScroll: function onScroll(y, direction) {
	                        _this4.refreshStickyHeader(-y);
	                        _onScroll(y, direction);
	                    },
	                    onListItemUpdate: function onListItemUpdate(item, domNode) {
	                        _this4.groupModel.updateGroupTitle(item, domNode);
	                    },
	                    onItemTap: wrappedonItemTap,
	                    itemTouchClass: wrappedItemActiveClass,
	                    ref: function ref(list) {
	                        if (list) {
	                            _this4.list = list;
	                        }
	                    },
	                    onRefresh: wrappedOnPullRefresh
	                }))
	            );
	        }
	    }]);
	
	    return GroupList;
	}(_react.Component);
	
	exports.default = GroupList;
	
	
	GroupList.propTypes = propTypes;
	GroupList.defaultProps = defaultProps;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ListCore = __webpack_require__(51);
	
	var _ListCore2 = _interopRequireDefault(_ListCore);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _scroller = __webpack_require__(52);
	
	var _scroller2 = _interopRequireDefault(_scroller);
	
	var _ListItem = __webpack_require__(69);
	
	var _ListItem2 = _interopRequireDefault(_ListItem);
	
	var _lazyimage = __webpack_require__(67);
	
	var _lazyimage2 = _interopRequireDefault(_lazyimage);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component List
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 列表组件，继承了Scroller的特性，有下拉刷新和加载更多功能。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 除此之外，List优化了长列表的性能，在数据源较大时能够提升滚动的性能并避免内存溢出。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 使用列表组件实现的组件：GroupList、Calendar、SwipeMenuList。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 特别感谢大明哥(leeds.li)和她的不定高无穷列表的实现思路。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./list/list.md}{instruUrl: list/infinite_mode_with_height.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./list/example.md}{instruUrl: list/base.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./list/modify_height.md}{instruUrl: list/modify_height.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./list/static_section.md}{instruUrl: list/static_section.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var defaultProps = {
	    uniqueKeyName: 'key',
	    infinite: false,
	    offsetY: 0,
	    infiniteSize: 12,
	    itemTouchClass: 'item-touch',
	    onScroll: function onScroll() {},
	    onInfiniteAppend: function onInfiniteAppend() {},
	    renderItem: function renderItem(item) {
	        return typeof item.get === 'function' ? item.get('text') : item.text;
	    },
	
	    extraClass: '',
	    containerExtraClass: '',
	    groupTitleExtraClass: '',
	    usePullRefresh: false,
	    onRefresh: function onRefresh() {},
	
	    useLoadMore: false,
	    onLoad: function onLoad() {},
	    onItemTap: function onItemTap() {},
	
	    shouldItemUpdate: null,
	    itemExtraClass: function itemExtraClass() {
	        return '';
	    },
	    onItemTouchStart: function onItemTouchStart() {},
	
	    disabled: false,
	    directionLockThreshold: 50,
	    style: null,
	    scrollWithoutTouchStart: true,
	    staticSection: null,
	    staticSectionHeight: null,
	    deceleration: 0.0015,
	    stickyOffset: 0,
	    scrollIntoView: ''
	};
	
	var propTypes = {
	    /**
	     * @property dataSource
	     * @type Array/Immutable List
	     * @default none
	     * @description 组件的数据源，数组或者Immutable List类型，内部元素必须是对象或者Immutable Map。
	     * 如果需要给无穷列表的项定高度，可以给元素添加height属性(数字类型)，
	     * 也可以通过itemHeight属性统一设置列表项的高度(见itemHeight属性的描述)，
	     * 如果列表元素有text属性且没有传入renderItem，会直接以text的值作为listitem的内容渲染。
	     */
	    dataSource: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({
	        height: _propTypes2.default.number,
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	        key: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	    })), _propTypes2.default.object]).isRequired,
	    /**
	     * @property renderItem
	     * @type Function
	     * @default (item)=>item.text
	     * @description 定制如何根据列表项数据对象渲染列表项的函数，接收参数item(数据对象)和index(在数据源中的index)，返回一个JSX。
	     * 如果传入字符串，则会应用于所有列表项。
	     *
	     * 例子:`` renderItem={(item)=><p>{item.someAttr}</p>} ``
	     */
	    renderItem: _propTypes2.default.func,
	    /**
	     * @property uniqueKeyName
	     * @type String
	     * @default 'key'
	     * @version 3.1.3
	     * @description dataSource 数组项的唯一标识的键值，默认为 key。
	     *
	     * 例子:`` renderItem={(item)=><p>{item.someAttr}</p>} ``
	     */
	    uniqueKeyName: _propTypes2.default.string,
	    /**
	     * @property onItemTap
	     * @type Function
	     * @default null
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的index
	     * @param {DOMElement} target 当前tap事件的target
	     * @description 点击列表项时的事件回调，接收三个参数item(列表项对应的数据对象)，index(列表项在数据源中的index)以及target(当前事件的event.target)，
	     *
	     * List实现了独特的手势系统以达到iOS列表的手势效果，任何情况下都应该使用这个属性为ListItem绑定事件，而不是给ListItem中的节点绑定onTouchTap事件。
	     */
	    onItemTap: _propTypes2.default.func,
	    /**
	     * @property infinite
	     * @type Bool
	     * @default false
	     * @description 是否使用无穷列表模式。
	     *
	     * 开启无穷列表模式后，列表中只会保留infiniteSize个节点，并随着滚动复用这些节点，以此来优化大列表的性能，但是滚动过程中会有性能损耗。
	     * 如果你的列表项数量不大(比如只有几十个)，请不要开启无穷模式。
	     */
	    infinite: _propTypes2.default.bool,
	    /**
	     * @property infiniteSize
	     * @type Number
	     * @default 12
	     * @description 无穷列表模式下，保留在列表容器中列表项的个数(参见无穷列表模式的说明).
	     *
	     * 注意:这个值应该随着列表容器的高度和列表项高度选取一个合适的值，否则可能出现列表容器底部出现空白的情况。
	     * 如果这个值设置的过大，会降低列表的滚动性能，因此请根据实际情况(List容器的高度和列表项的高度)灵活配置。
	     */
	    infiniteSize: _propTypes2.default.number,
	    /**
	     * @property itemHeight
	     * @type Number
	     * @default null
	     * @description 无穷列表中列表项的高度。
	     *
	     * 如果数据源中的对象没有height属性，也没有设置itemHeight，则会使用不定高的无穷列表模式。
	     * 在不定高模式下，每个项的高度会在渲染进容器以后确定，因此比定高模式多一次offsetHeight的查询，性能会差一些。
	     */
	    itemHeight: _propTypes2.default.number,
	    /**
	     * @property offsetY
	     * @type Number
	     * @default 0
	     * @description 组件的初始位置的Y坐标。
	     */
	    offsetY: _propTypes2.default.number,
	    /**
	     * 内容底部留白
	     *
	     * @property contentInset
	     * @type Number
	     * @description 内容区域周围的留白，**目前仅支持 bottom**。主要用于适配 iPhoneX，在下方留出一定间隙。有『加载更多』时，显示在『加载更多』的下方。可以通过设置背景色来改变留白的颜色。
	     * @default {bottom:0}
	     * @version 3.0.13
	     */
	    contentInset: _propTypes2.default.shape({
	        bottom: _propTypes2.default.number
	    }),
	    /**
	     * @property itemExtraClass
	     * @type String/Function
	     * @default "item item-wrap"
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的index
	     * 可以接受字符串形式。例如"custom-list-item"（会自动应用在所有列表项容器上）
	     * 或者一个函数，这个函数接受参数item（列表项对应的dataSource中的数据对象），index（数据源index）
	     *
	     * 例:(item)=>{return item.customClassName}/'custom-item-classname'。
	     * @description 给列表项容器元素添加的class
	     */
	    itemExtraClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @skip
	     * 给grouptitle定制的属性,不会向外暴露。
	     */
	    groupTitleExtraClass: _propTypes2.default.string,
	    /**
	     * @property itemTouchClass
	     * @type String/Function
	     * @default item-touch
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的index
	     * @description 列表项被点击时的className，可以接收字符串或者函数，使用方式与itemExtraClass一致。
	     */
	    itemTouchClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @property onScroll
	     * @type Function
	     * @default null
	     * @param {Number} offsetY 当前 Scroller 的 y 轴偏移量
	     * @param {Enum {'up','down'}} direction 列表滚动的方向,向上('up')或者向下('down')
	     * @description 绑定给list内部scroller的onScroll回调,在列表滚动时触发。
	     */
	    onScroll: _propTypes2.default.func,
	    /**
	     * @property onScrollEnd
	     * @type Function
	     * @param {Number} offsetY 当前 Scroller 的 y 轴偏移量
	     * @default null
	     * @version 3.1.4
	     * @description 滚动结束之后的回调
	     */
	    onScrollEnd: _propTypes2.default.func,
	    /**
	     * @property style
	     * @type Object
	     * @default null
	     * @description 给List容器节点绑定的额外样式。
	     * @version 3.0.2
	     */
	    style: _propTypes2.default.object,
	    /**
	     * @property onInfiniteAppend
	     * @type Function
	     * @default null
	     * @param {Array} visibleList 当前渲染在列表容器中的数据项数组
	     * @description 无穷列表中列表项update时触发的事件回调，接收参数visibleList(数组)，为目前渲染在列表容器中的数据项。
	     */
	    onInfiniteAppend: _propTypes2.default.func,
	    /**
	     * @property staticSection
	     * @type Element
	     * @default null
	     * @version 3.0.3
	     * @description 在所有列表项之上渲染的一块静态区域，在开启Infinite模式时，这块区域不会参与列表项的回收复用。
	     */
	    staticSection: _propTypes2.default.element,
	    /**
	     * @property extraClass
	     * @type String
	     * @default null
	     * @description 组件容器元素的额外className。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property containerExtraClass
	     * @type String
	     * @default null
	     * @description 列表容器元素额外的className(对应ul.yo-list节点)。
	     */
	    containerExtraClass: _propTypes2.default.string,
	    /**
	     * @property usePullRefresh
	     * @type Bool
	     * @default false
	     * @description 是否使用下拉刷新，见Scroller同名属性。
	     */
	    usePullRefresh: _propTypes2.default.bool,
	    /**
	     * 下拉刷新高度
	     *
	     * @property pullRefreshHeight
	     * @type Number
	     * @description 触发下拉刷新状态的高度（一般即为下拉刷新提示区域的高度）。
	     * @default 40
	     */
	    pullRefreshHeight: _propTypes2.default.number,
	    /**
	     * 下拉刷新渲染函数
	     *
	     * @property renderPullRefresh
	     * @type Function
	     * @returns {JSX} 用来渲染 pullRefresh 的 JSX
	     * @description () => JSX
	     *
	     * 自定义的下拉刷新渲染函数。
	     */
	    renderPullRefresh: _propTypes2.default.func,
	    /**
	     * @property onRefresh
	     * @type Function
	     * @param {Array} dataSource 当前的数据源
	     * @default null
	     * @description 下拉刷新触发的事件回调。
	     */
	    onRefresh: _propTypes2.default.func,
	    /**
	     * @property useLoadMore
	     * @type Bool
	     * @default false
	     * @description 是否开启加载更多，见Scroller同名属性。
	     */
	    useLoadMore: _propTypes2.default.bool,
	    /**
	     * 加载更多高度
	     *
	     * @property loadMoreHeight
	     * @type Number
	     * @description 触发加载更多状态的高度（一般即为加载更多提示区域的高度）。
	     * @default 40
	     */
	    loadMoreHeight: _propTypes2.default.number,
	    /**
	     * 加载更多渲染函数
	     *
	     * @property renderLoadMore
	     * @type Function
	     * @returns {JSX} 用来渲染 loadMore 的 JSX
	     * @description () => JSX
	     *
	     * 自定义的加载更多渲染函数。
	     */
	    renderLoadMore: _propTypes2.default.func,
	    /**
	     * @property onLoad
	     * @type Function
	     * @param {Array} dataSource 当前数据源
	     * @default null
	     * @description 加载更多时触发的事件回调。
	     */
	    onLoad: _propTypes2.default.func,
	    /**
	     * @property shouldItemUpdate
	     * @type Function
	     * @default null
	     * @param {Object} next 即将传给列表项组件的item对象
	     * @param {Object} now 当前列表项组件对应的item对象
	     * @description 绑定给列表项组件的shouldComponentUpdate，可以避免额外的render，用于提升列表的滚动性能。
	     *
	     * 实验表明，组件的render开销对于某些老式手机(例如三星Note2)是不能忽视的，因此list默认为所有的列表项组件配置了shouldComponentUpdate，会根据
	     * item的_guid属性(List组件自己做的，不需要使用者传入)做比较决定是否需要render，这样可以最小化render的次数。有些情况下，这种比较方式会阻止使用者期待触发的render，导致组件更新行为违反了使用者的意愿，这时候需要通过设置shouldItemUpdate属性改变默认的shouldComponentUpdate的返回值
	     *
	     * shouldItemUpdate能够接受两个参数，next(ListItem组件的下一个props中的item属性)，
	     * now(ListItem当前的props的item属性)。它必须返回一个布尔值，false则会跳过render，true会继续执行render(与shouldComponentUpdate返回值的含义相同)。
	     */
	    shouldItemUpdate: _propTypes2.default.func,
	    /**
	     * @property disabled
	     * @type Bool
	     * @default false
	     * @description 是否禁止滚动，参见Scroller的同名属性。
	     */
	    disabled: _propTypes2.default.bool,
	    /**
	     * @property stickyOffset
	     * @type Number
	     * @default 0
	     * @description 给staticSection内部吸顶容器设置的y轴偏移。
	     * @version 3.0.6
	     */
	    stickyOffset: _propTypes2.default.number,
	    /**
	     * @skip
	     * @property onItemTouchStart
	     * 专门给SwipeMenuList使用的属性，不向外暴露
	     */
	    onItemTouchStart: _propTypes2.default.func,
	    onListItemUpdate: _propTypes2.default.func,
	    /**
	     * 方向锁定阈值
	     *
	     * @property directionLockThreshold
	     * @type Number
	     * @description 只允许单向滚动的时候，会根据这个阈值来判定响应哪个方向上的位移：某一方向位移减去另一个方向位移超过阈值，就会判定为这个方向的滚动。
	     * @default 5
	     * @version 3.0.2
	     */
	    directionLockThreshold: _propTypes2.default.number,
	    /**
	     * @property deceleration
	     * @type Number
	     * @description 滚动视图开始惯性滚动时减速的加速度，默认为0.001。
	     * @version 3.0.6
	     */
	    deceleration: _propTypes2.default.number,
	    /**
	     * @property scrollWithoutTouchStart
	     * @type Bool
	     * @default false
	     * @description ** 实验中的属性 **
	     * 在默认情况下一次用户触发（非调用scrollTo方法）scroller的滚动需要由touchstart事件来启动，在某些情况下，例如scroller从disable状态切换到enable状态时，
	     * 可能不能接收到这一瞬间的touchstart事件，这可能导致用户期待的滚动过程没有发生。
	     * 开启这个属性为true以后将允许scroller用touchmove启动滚动过程，这可以解决上述场景的问题。
	     * @version 3.0.2
	     */
	    scrollWithoutTouchStart: _propTypes2.default.bool,
	    /**
	     * @property scrollIntoView
	     * @type String
	     * @default ''
	     * @description 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素
	     * @version 3.1.7
	     */
	    scrollIntoView: _propTypes2.default.string
	};
	
	var List = function (_Component) {
	    _inherits(List, _Component);
	
	    function List(props) {
	        _classCallCheck(this, List);
	
	        var _this = _possibleConstructorReturn(this, (List.__proto__ || Object.getPrototypeOf(List)).call(this, props));
	
	        var dataSource = props.dataSource,
	            uniqueKeyName = props.uniqueKeyName,
	            offsetY = props.offsetY,
	            itemHeight = props.itemHeight,
	            infinite = props.infinite,
	            infiniteSize = props.infiniteSize;
	
	
	        _this.childLazyImages = [];
	        _this.staticSectionContaienr = null;
	        _this.listModel = new _ListCore2.default({
	            dataSource: dataSource,
	            uniqueKeyName: uniqueKeyName,
	            offsetY: offsetY,
	            infinite: infinite,
	            itemHeight: itemHeight,
	            infiniteSize: infiniteSize
	        });
	        _this.state = {
	            visibleList: _this.listModel.visibleList,
	            totalHeight: _this.listModel.totalHeight
	        };
	        return _this;
	    }
	
	    _createClass(List, [{
	        key: 'getChildContext',
	        value: function getChildContext() {
	            return { list: this, infinite: this.listModel.infinite };
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            var _this2 = this;
	
	            this.listModel.registerEventHandler('change', function (visibleList, totalHeight) {
	                _this2.setState({ visibleList: visibleList, totalHeight: totalHeight });
	                _this2.props.onInfiniteAppend(visibleList, totalHeight);
	            });
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this3 = this;
	
	            // 在不定高模式下,需要等待所有列表项完成定位才能刷新scroller, didmount的时候虽然dom已经渲染完成
	            // 但是所有列表项做定位尚未完成
	            setTimeout(function () {
	                // 一定要优先刷新staticSectionHeight，否则下面的一系列操作都可能出现不准确的情况
	                _this3.refreshStaticSectionHeight();
	                if (_this3.scroller) {
	                    // 用来标记列表是否在滚动,和手势有关,在gesture.js中可以查到这个属性是如何被使用的
	                    _this3.scroller.isScrolling = false;
	                }
	                // 刷新scroller,因为infinite不定高模式的totalHeight要等到item渲染完毕才能计算出来
	                if (_this3.listModel.infinite && _this3.scroller) {
	                    _this3.scroller.refresh({ scrollerHeight: _this3.listModel.totalHeight }, true);
	                }
	
	                var _props = _this3.props,
	                    offsetY = _props.offsetY,
	                    scrollIntoView = _props.scrollIntoView;
	
	                if (scrollIntoView !== undefined && scrollIntoView !== '') {
	                    if (_this3.scroller) {
	                        _this3.scroller.scrollIntoView();
	                        _this3.listModel.onScrollTo(-_this3.scroller.y);
	                        _this3.tryLoadLazyImages(-_this3.scroller.y);
	                    }
	                } else {
	                    // 如果设置了offsetY,滚动到offsetY
	                    _this3.scrollTo(offsetY, 0);
	                    // 刷新lazyload图片,不然头几个item的懒加载图片都不会加载
	                    // 加setTimeout是为了处理不定高的场景,因为不定高的列表会先把列表项渲染进容器然后再去做定位
	                    // 所以didmount时间触发的时候,列表项还没有完成定位
	                    _this3.tryLoadLazyImages(offsetY);
	                }
	            }, this.listModel.isHeightFixed ? 0 : _util.DELAY_TIME_FOR_INFINITE_WITHOUT_HEIGHT);
	        }
	
	        /**
	         * @param nextProps
	         * dataSource,infiniteSize是根据初始值计算出来的状态,在这里需要进行reset
	         * 其他属性不需要reset
	         */
	
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this4 = this;
	
	            var dataSource = nextProps.dataSource,
	                infiniteSize = nextProps.infiniteSize,
	                offsetY = nextProps.offsetY;
	
	            this.listModel.refresh({
	                dataSource: dataSource,
	                refreshAll: true,
	                infiniteSize: infiniteSize
	            });
	
	            // 等待dom更新结束后再做以下操作
	            setTimeout(function () {
	                if (_this4.props.offsetY !== offsetY) {
	                    _this4.scrollTo(offsetY, 0);
	                }
	                _this4.refreshStaticSectionHeight();
	                _this4.tryLoadLazyImages(_this4.listModel.offsetY);
	                // 当offsetY位于可滚动范围之外时自动调整
	                if (_this4.scroller && -_this4.scroller.maxScrollY < _this4.listModel.offsetY) {
	                    _this4.scrollTo(_this4.scroller.maxScrollY, 300);
	                }
	            }, 0);
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            // infinite模式的lazyload不需要再didupdate时刷新
	            // 因为infinite的节点是复用的,而随着滚动会不定的render,因此会触发大量的didupdate,浪费性能
	            // 所以可以在receiveprops时做刷新,因为节点复用的缘故,不需要等待dom render
	            if (!this.listModel.infinite) {
	                this.tryLoadLazyImages(this.listModel.offsetY);
	            }
	            // infinite模式下，刷新列表的总高度
	            if (this.scroller && this.listModel.infinite) {
	                this.scroller.refresh({ scrollerHeight: this.state.totalHeight }, true);
	            }
	        }
	
	        /**
	         * 绑定给Scoller的ScrollEnd事件回调
	         */
	
	    }, {
	        key: 'onScrollEnd',
	        value: function onScrollEnd(evt) {
	            // 滚动停止后重置isScrolling标志
	            var props = this.props,
	                scroller = this.scroller;
	            var onScrollEnd = props.onScrollEnd;
	
	            scroller && (scroller.isScrolling = false);
	            onScrollEnd && onScrollEnd(evt);
	        }
	
	        /**
	         * @param offsetY
	         * @param manually
	         * 随着Scroller的滚动更新visibleList
	         */
	
	    }, {
	        key: 'onScroll',
	        value: function onScroll(offsetY, manually) {
	            if (this.scroller && offsetY !== this.listModel.offsetY) {
	                if (!manually) {
	                    this.scroller.isScrolling = true;
	                }
	                this.listModel.onScrollTo(offsetY, manually);
	                this.props.onScroll(-offsetY, this.listModel.direction);
	                this.tryLoadLazyImages(offsetY);
	            }
	        }
	
	        /**
	         * @skip
	         * @method refreshStaticSectionHeight
	         * @description 获取staticSectionHeight，然后更新列表的总高度
	         */
	
	    }, {
	        key: 'refreshStaticSectionHeight',
	        value: function refreshStaticSectionHeight() {
	            if (this.staticSectionContaienr != null) {
	                this.listModel.staticSectionHeight = this.staticSectionContaienr.offsetHeight;
	                this.listModel.totalHeight = this.listModel.getTotalHeight();
	                // 获取到最新的totalHeight之后需要刷新一下
	                if (this.scroller && this.listModel.infinite) {
	                    this.scroller.refresh({ scrollerHeight: this.listModel.totalHeight }, true);
	                }
	            }
	        }
	
	        /**
	         * @method refresh
	         * @description 刷新列表,应该在列表容器高度发生改变时调用
	         */
	
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            this.scroller && this.scroller.refresh(this.props.infinite ? { scrollerHeight: this.state.totalHeight } : {});
	        }
	
	        /**
	         * @method resetLoadStatus
	         * @param {Bool} hasLoadMore 是否能够加载更多，如果传入false，加载更多区域的文字将会变成 没有更多了，并且继续向下滚动时不会触发onLoadMore。
	         * @description 重置加载更多功能。
	         * @version 3.0.7
	         */
	
	    }, {
	        key: 'resetLoadStatus',
	        value: function resetLoadStatus(hasLoadMore) {
	            this.scroller && this.scroller.resetLoadStatus(hasLoadMore);
	        }
	
	        /**
	         * @method stopRefreshing
	         * @param {Bool} [success] 下拉刷新是否成功，默认为 false。
	         * @param {Object} [config] 停止刷新的动画配置。
	         * @param {number} [config.duration] 回到顶部的动画时间，默认是 300ms。
	         * @param {Function} [callback] 回到顶部的动画执行完毕的回调。
	         * @description 调用 Scroller 同名方法，中止下拉刷新过程。在列表发生下拉刷新之后你应该调用这个方法去中止它(比如服务器响应已经返回的时候),否则刷新不会自动终止。
	         */
	
	    }, {
	        key: 'stopRefreshing',
	        value: function stopRefreshing(success, config, callback) {
	            if (this.scroller) {
	                this.scroller.stopRefreshing(success, config, callback);
	            }
	        }
	
	        /**
	         * @method stopLoading
	         * @param {Bool} [successed]  加载更多是否成功,默认为false
	         * @description 中止加载更多过程,使用方式和场景与stopRefreshing一致。
	         */
	
	    }, {
	        key: 'stopLoading',
	        value: function stopLoading(successed) {
	            if (this.scroller) {
	                this.scroller.stopLoading(successed);
	            }
	        }
	
	        /**
	         * @method startRefreshing
	         * @description 模拟下拉刷新,调用这个方法后,会立刻停止当前的滚动并回到列表顶部,然后开始下拉刷新过程。
	         *
	         * 注意:你仍然需要手动调用stopRefreshing方法
	         */
	
	    }, {
	        key: 'startRefreshing',
	        value: function startRefreshing() {
	            if (this.scroller) {
	                if (this.scroller.isScrolling) {
	                    this.scroller.stopAnimate();
	                    this.scroller.isScrolling = false;
	                }
	                if (this.listModel.infinite) {
	                    this.scroller.startRefreshing(0);
	                    this.onScroll(0, true);
	                } else {
	                    this.scroller.startRefreshing();
	                }
	            }
	        }
	
	        /**
	         * 尝试加载处于可视区域内的lazyimage
	         * @param y
	         */
	
	    }, {
	        key: 'tryLoadLazyImages',
	        value: function tryLoadLazyImages(y) {
	            var _this5 = this;
	
	            y = y - this.listModel.staticSectionHeight;
	            if (this.childLazyImages.length && this.scroller) {
	                this.childLazyImages.forEach(function (img) {
	                    return _this5.loadImage(img, y);
	                });
	            }
	        }
	
	        /**
	         * @skip
	         * @method loadImage
	         * @param img LazyImage 实例
	         * @description 判断并决定是否加载 LazyImage
	         */
	
	    }, {
	        key: 'loadImage',
	        value: function loadImage(img, y) {
	            if (this.scroller && img.itemRef) {
	                if (y === undefined) y = this.listModel.offsetY;
	                var containerBottomY = y + this.scroller.wrapperHeight;
	                if (this.listModel.infinite) {
	                    if (containerBottomY > img.itemRef.translateY) {
	                        img.load();
	                    }
	                } else if (img.loading !== 2) {
	                    var listItemDom = img.itemRef.domNode;
	                    var offsetTop = listItemDom.offsetTop;
	                    if (listItemDom && containerBottomY > offsetTop) {
	                        img.load();
	                    }
	                }
	            }
	        }
	
	        /**
	         * @method scrollTo
	         * @param {Number} y 要滚动到的目标y坐标
	         * @param {Number} [time] 动画时间,默认为0。
	         * (在开启了无穷模式的情况下,为了提高滚动的性能,不管time传入什么值都会被重设为0.因为快速滚过很长的距离在无穷模式下会带来巨大的性能损耗)
	         * @description 让List滚动到某个位置
	         */
	
	    }, {
	        key: 'scrollTo',
	        value: function scrollTo() {
	            var offsetY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
	            var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	
	            if (this.scroller) {
	                // 考虑到infinite的渲染机制,滚动一个过长的距离会触发大量的dom更新,性能会很差
	                // 因此当当前offetY大于一定数值时就将time设为0,2000是个magic number,凭感觉设的
	                var aniDuration = this.listModel.infinite ? 0 : time;
	                this.scroller.scrollTo(0, offsetY, aniDuration);
	                this.onScroll(-offsetY, true);
	            }
	        }
	
	        /**
	         * @method stopAnimate
	         * @description 立刻停止滚动。
	         */
	
	    }, {
	        key: 'stopAnimate',
	        value: function stopAnimate() {
	            if (this.scroller) {
	                this.scroller.stopAnimate();
	            }
	        }
	
	        /**
	         * @param item
	         * @param i
	         * @returns {JSX}
	         * 渲染列表项容器
	         */
	
	    }, {
	        key: 'renderItemWrap',
	        value: function renderItemWrap(item, i) {
	            var _props2 = this.props,
	                _onItemTap = _props2.onItemTap,
	                renderItem = _props2.renderItem,
	                onListItemUpdate = _props2.onListItemUpdate,
	                groupTitleExtraClass = _props2.groupTitleExtraClass,
	                shouldItemUpdate = _props2.shouldItemUpdate,
	                onItemTouchStart = _props2.onItemTouchStart;
	            var _props3 = this.props,
	                itemTouchClass = _props3.itemTouchClass,
	                itemExtraClass = _props3.itemExtraClass;
	
	            var realActiveClass = itemTouchClass,
	                realExtraClass = itemExtraClass;
	            // 由于itemExtraClass可以传入string或者函数,这里统一为函数
	            // 做法是将string转换成一个返回该string的id函数
	            if (typeof itemExtraClass === 'string' || itemExtraClass === null) {
	                realExtraClass = function realExtraClass() {
	                    return itemExtraClass;
	                };
	            }
	            // the same
	            if (typeof itemTouchClass === 'string' || itemTouchClass === null) {
	                realActiveClass = function realActiveClass() {
	                    return itemTouchClass;
	                };
	            }
	
	            return _react2.default.createElement(_ListItem2.default, {
	                parent: this,
	                itemTouchClass: realActiveClass,
	                key: this.listModel.infinite ? i : item.key,
	                renderItem: renderItem,
	                onItemTap: function onItemTap(target) {
	                    _onItemTap(item.srcData, item._index, target);
	                },
	                shouldItemUpdate: shouldItemUpdate,
	                onItemTouchStart: onItemTouchStart,
	                item: item,
	                itemExtraClass: realExtraClass,
	                groupTitleExtraClass: groupTitleExtraClass,
	                listModel: this.listModel,
	                onListItemUpdate: onListItemUpdate
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this6 = this;
	
	            var _props4 = this.props,
	                containerExtraClass = _props4.containerExtraClass,
	                infiniteSize = _props4.infiniteSize,
	                _onRefresh = _props4.onRefresh,
	                _onLoad = _props4.onLoad;
	            var infinite = this.listModel.infinite;
	
	            var containerClass = (0, _classnames2.default)('yo-list', containerExtraClass, infinite ? 'yo-list-infinite' : '');
	            var visibleList = this.state.visibleList;
	
	
	            return _react2.default.createElement(
	                _scroller2.default,
	                _extends({}, (0, _util.inheritProps)(this.props, ['scrollWithoutTouchStart', 'style', 'directionLockThreshold', 'disabled', 'extraClass', 'pullRefreshHeight', 'renderPullRefresh', 'loadMoreHeight', 'renderLoadMore', 'useLoadMore', 'usePullRefresh', 'deceleration', 'stickyOffset', 'onScrollStart', 'contentInset', 'scrollIntoView']), {
	                    tap: true,
	                    autoRefresh: !infinite,
	                    ref: function ref(scroller) {
	                        if (scroller) {
	                            _this6.scroller = scroller;
	                        }
	                    },
	                    onScroll: function onScroll(evt) {
	                        return _this6.onScroll(-evt.contentOffset.y);
	                    },
	                    onScrollEnd: function onScrollEnd(evt) {
	                        return _this6.onScrollEnd(-evt.contentOffset.y);
	                    },
	                    onRefresh: function onRefresh() {
	                        _onRefresh(_this6.listModel.dataSource);
	                    },
	                    onLoad: function onLoad() {
	                        _onLoad(_this6.listModel.dataSource);
	                    },
	                    enableLazyLoad: false
	                }),
	                this.props.staticSection != null ? _react2.default.createElement(
	                    'div',
	                    {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this6.staticSectionContaienr = dom;
	                            }
	                        },
	                        className: 'yo-list-static-section'
	                    },
	                    this.props.staticSection
	                ) : null,
	                _react2.default.createElement(
	                    'ul',
	                    {
	                        className: containerClass,
	                        ref: function ref(dom) {
	                            _this6.listContainer = dom;
	                        }
	                    },
	                    infinite ? // 无穷列表模式,在列表容器内设置固定数目的槽,随着滚动不停更新这些槽内部的内容和translateY
	                    (0, _util.getArrayByLength)(infiniteSize).fill(1).map(function (__, i) {
	                        var item = visibleList.find(function (it) {
	                            return it._order === i;
	                        });
	                        return item ? _this6.renderItemWrap(item, i) : null;
	                    }) : // 静态列表,渲染出所有的item
	                    visibleList.map(function (item, i) {
	                        return _this6.renderItemWrap(item, i);
	                    })
	                )
	            );
	        }
	    }]);
	
	    return List;
	}(_react.Component);
	
	List.INFINITE_SCROLLTO_WITH_ANIMATION_DISTANCE = 2000;
	List.childContextTypes = {
	    list: _propTypes2.default.object,
	    infinite: _propTypes2.default.bool
	};
	exports.default = List;
	
	
	List.defaultProps = defaultProps;
	List.propTypes = propTypes;
	List.LazyImage = _lazyimage2.default;

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ComponentCore2 = __webpack_require__(44);
	
	var _ComponentCore3 = _interopRequireDefault(_ComponentCore2);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * List核心逻辑,负责管理List组件的内部状态
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var ListCore = function (_ComponentCore) {
	    _inherits(ListCore, _ComponentCore);
	
	    /**
	     * @param dataSource 数据源
	     * @param offsetY 列表的初始Y偏移
	     * @param infinite 是否是无穷列表
	     * @param itemHeight 列表项高度
	     * @param visibleSize 保留在列表容器中列表项的数组
	     * @description 构造函数,会通过调用refresh方法进行初始化
	     */
	    function ListCore(_ref) {
	        var dataSource = _ref.dataSource,
	            _ref$uniqueKeyName = _ref.uniqueKeyName,
	            uniqueKeyName = _ref$uniqueKeyName === undefined ? 'key' : _ref$uniqueKeyName,
	            _ref$offsetY = _ref.offsetY,
	            offsetY = _ref$offsetY === undefined ? 0 : _ref$offsetY,
	            _ref$infinite = _ref.infinite,
	            infinite = _ref$infinite === undefined ? true : _ref$infinite,
	            itemHeight = _ref.itemHeight,
	            _ref$infiniteSize = _ref.infiniteSize,
	            infiniteSize = _ref$infiniteSize === undefined ? 12 : _ref$infiniteSize,
	            _ref$staticSectionHei = _ref.staticSectionHeight,
	            staticSectionHeight = _ref$staticSectionHei === undefined ? 0 : _ref$staticSectionHei;
	
	        _classCallCheck(this, ListCore);
	
	        // 静态属性
	        var _this = _possibleConstructorReturn(this, (ListCore.__proto__ || Object.getPrototypeOf(ListCore)).call(this, 'list'));
	
	        _this.uniqueKeyName = uniqueKeyName;
	        // 这些属性不会随着父组件render改变
	        _this.itemHeight = itemHeight;
	        // 保存列表项定位信息的表,List组件不定高模式的核心数据结构
	        _this.positionMap = {};
	        // 在refresh中设置的属性可以通过父组件的render改变
	        _this.refresh({
	            dataSource: dataSource,
	            refreshAll: false,
	            infiniteSize: infiniteSize,
	            staticSectionHeight: staticSectionHeight,
	            offsetY: offsetY,
	            infinite: infinite
	        });
	        return _this;
	    }
	
	    /**
	     * @param ds
	     * @param refreshAll
	     * @param visibleSize
	     * @param offsetY
	     * @param infinite
	     * @param startIndex
	     * @returns {ListCore}
	     * @description 设置实例属性, 在构造函数中被调用,也会在组件的componentWillReceiveProps回调中调用
	     * 可以根据props初始化/重置组件的状态
	     */
	
	
	    _createClass(ListCore, [{
	        key: 'refresh',
	        value: function refresh(_ref2) {
	            var _ref2$dataSource = _ref2.dataSource,
	                dataSource = _ref2$dataSource === undefined ? this.dataSource : _ref2$dataSource,
	                _ref2$refreshAll = _ref2.refreshAll,
	                refreshAll = _ref2$refreshAll === undefined ? false : _ref2$refreshAll,
	                _ref2$infiniteSize = _ref2.infiniteSize,
	                infiniteSize = _ref2$infiniteSize === undefined ? this.visibleSize : _ref2$infiniteSize,
	                _ref2$staticSectionHe = _ref2.staticSectionHeight,
	                staticSectionHeight = _ref2$staticSectionHe === undefined ? this.staticSectionHeight : _ref2$staticSectionHe,
	                _ref2$offsetY = _ref2.offsetY,
	                offsetY = _ref2$offsetY === undefined ? this.offsetY : _ref2$offsetY,
	                _ref2$infinite = _ref2.infinite,
	                infinite = _ref2$infinite === undefined ? this.infinite : _ref2$infinite;
	
	            if (!(0, _util.isArrayLike)(dataSource)) {
	                if (typeof dataSource.toArray === 'function') {
	                    dataSource = dataSource.toArray();
	                } else {
	                    throw new Error('yo-list: dataSource 必须为（类）数组或者 Immutable List!');
	                }
	            }
	
	            if (!dataSource.length) {
	                throw new Error('yo-list: dataSource 不能为空数组!');
	            }
	
	            this.WINDOW_HEIGHT = window.screen.height || 736;
	            this.infinite = infinite;
	            this.VISIBLE_SIZE = infiniteSize;
	            this.dataSource = this.renderDataSource(dataSource, refreshAll);
	            this.isHeightFixed = this.ifHeightFixed();
	            this.direction = this.getDirection(offsetY);
	            this.offsetY = offsetY;
	            this.startIndex = this.refreshStartIndexByOffsetY(offsetY);
	            this.staticSectionHeight = staticSectionHeight;
	            this.visibleList = this.getVisibleList(offsetY);
	            this.totalHeight = this.getTotalHeight();
	
	            this.emitChange();
	
	            return this;
	        }
	
	        /**
	         * @param dataSource
	         * @returns {boolean}
	         * 判断数据源中的元素是否都被计算出(设置了)高度
	         */
	
	    }, {
	        key: 'ifHeightFixed',
	        value: function ifHeightFixed() {
	            var _this2 = this;
	
	            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataSource;
	
	            return dataSource.every(function (item) {
	                return !!_this2.getAttr(item.srcData, 'height');
	            }) || !!this.itemHeight || !this.infinite;
	        }
	
	        /**
	         * @returns {number}
	         * 返回一个guid
	         */
	
	    }, {
	        key: 'getGuid',
	        value: function getGuid() {
	            return ++ListCore.guid;
	        }
	
	        /**
	         * @param offsetY
	         * @returns {string}
	         * 根据传入的offsetY计算出组件滚动的方向
	         */
	
	    }, {
	        key: 'getDirection',
	        value: function getDirection(offsetY) {
	            return offsetY - this.offsetY >= 0 ? 'down' : 'up';
	        }
	
	        /**
	         * @param offsetY
	         * @returns {number}
	         * 根据传入的offsetY计算startIndex,startIndex被用来计算visibleList(无穷模式中保留在容器中的列表项的数组)
	         */
	
	    }, {
	        key: 'refreshStartIndexByOffsetY',
	        value: function refreshStartIndexByOffsetY(y) {
	            var offsetY = y - window.screen.height / 5;
	
	            if (this.infinite && this.isHeightFixed) {
	                for (var i = 0; i < this.dataSource.length; i++) {
	                    var item = this.dataSource[i];
	                    var itemPosData = this.getItemPositionData(item, 'key');
	                    if (i === 0 && itemPosData.height > offsetY) {
	                        return i;
	                    } else if (i > 0) {
	                        var prev = this.dataSource[i - 1];
	                        var prevPosData = this.getItemPositionData(prev, 'key');
	                        if (prevPosData._translateY < offsetY && prevPosData._translateY >= offsetY) {
	                            return i;
	                        }
	                    }
	                }
	            } else if (this.infinite) {
	                return this.startIndex ? this.startIndex : 0;
	            }
	
	            return 0;
	        }
	
	        /**
	         * @param offsetY
	         * @returns {ListCore}
	         * 在列表滚动时,根据offsetY更新visibleList
	         */
	
	    }, {
	        key: 'onScrollTo',
	        value: function onScrollTo(offsetY, manually) {
	            this.direction = this.getDirection(offsetY);
	            this.offsetY = offsetY;
	            if (manually) {
	                this.startIndex = 0;
	            }
	            var cachedIndex = this.startIndex;
	            if (this.infinite) {
	                this.visibleList = this.getVisibleList(offsetY);
	                // 只有当visibleList里面的内容真正发生变化的时候才触发onchange
	                // 这样可以确保setState调用次数最少
	                if (this.startIndex !== cachedIndex || this.startIndex === 0 && this.offsetY === 0 || manually) {
	                    this.emitChange();
	                }
	            }
	
	            return this;
	        }
	    }, {
	        key: 'getItemPositionData',
	        value: function getItemPositionData(item, uniqueKeyName) {
	            // 调用时赋给的 `uniqueKeyName` 的值有两种情况：‘key’ 和用户传递的 `uniqueKeyName` props。
	            var key = this.getAttr(item, uniqueKeyName);
	            return item._type === 'groupTitle' ? item : this.positionMap[key];
	        }
	    }, {
	        key: 'setItemPositionData',
	        value: function setItemPositionData(item, attr) {
	            // grouptitle做特殊处理,因为grouptitle是grouplist组件内部的数据对象,所以不会修改到源数据
	            // 与此同时，grouplist需要获取到_translateY这些信息，因此也只能在原来的数据对象上修改
	            if (item._type === 'groupTitle') {
	                Object.assign(item, attr);
	            } else if (this.positionMap[item.key]) {
	                Object.assign(this.positionMap[item.key], attr);
	            }
	        }
	
	        /**
	         * @param ds
	         * @param refreshAll
	         * @returns {Array}
	         * 处理数据源
	         * 为每个元素的在pos表中的项添加_order(无穷模式下该列表项对应的槽的index),_resolved(是否已经计算出位置),_index(在数据源中的位置)
	         * _translateY(无穷列表中元素的translateY)和_bottom(列表项的bottom)
	         */
	
	    }, {
	        key: 'renderDataSource',
	        value: function renderDataSource(ds) {
	            var _this3 = this;
	
	            var refreshAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	            var uniqueKeyName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.uniqueKeyName;
	
	            return ds.map(function (ditem, i) {
	                var key = _this3.getAttr(ditem, uniqueKeyName);
	                var renderedItem = {};
	
	                if (key == null) {
	                    if (_this3.infinite) {
	                        throw new Error('infinite模式的列表数据源的每一项必须有key属性。');
	                    } else {
	                        key = _this3.getGuid();
	                        if (true) {
	                            console.warn('Yo-List:列表项没有key属性,将自动添加自增的key。这会使得列表在更新时出现大量的不必要的dom操作，请为每一个列表项指定一个唯一的key。');
	                        }
	                    }
	                }
	
	                // 区分groupTitle和item，因为groupTitle是组件添加的，不会影响到源数据，所以可以直接在上面增加属性
	                renderedItem = ditem._type !== 'groupTitle' ? {
	                    // srcData指向源数据
	                    srcData: ditem,
	                    key: key,
	                    _index: i,
	                    _type: 'item'
	                } : Object.assign(ditem, { srcData: ditem, _index: i }); // 这里给title增加了一个指向自己的指针srcData，这是为了兼容其他普通item的数据格式，而不是在使用它的地方做各种判断
	
	                if (refreshAll) {
	                    _this3.setItemPositionData(renderedItem, { _bottom: null, _translateY: null, _order: null });
	                }
	
	                var itemPosData = _this3.getItemPositionData(renderedItem, 'key'); // 因为 renderedItem 对用户传进来的原始 dataSource 做了处理，这里的 uniqueKeyName 就是 'key'
	                if (!itemPosData) {
	                    itemPosData = _this3.positionMap[renderedItem.key] = {};
	                }
	
	                var itemHeight = _this3.getAttr(ditem, 'height');
	                var noHeightIdentified = _this3.itemHeight == null && itemHeight == null && itemPosData.height == null;
	
	                var mergedItemHeight = null;
	                if (itemHeight != null) {
	                    mergedItemHeight = itemHeight;
	                } else if (itemPosData.height != null) {
	                    mergedItemHeight = itemPosData.height;
	                } else {
	                    mergedItemHeight = _this3.itemHeight;
	                }
	
	                if (_this3.infinite) {
	                    // 设置height,_order,_resolved和_index
	                    // 如果这个item具有高度,则直接设为resolved
	                    _this3.setItemPositionData(renderedItem, {
	                        height: mergedItemHeight,
	                        _order: i % _this3.VISIBLE_SIZE,
	                        _resolved: _this3.infinite && !noHeightIdentified,
	                        _index: i
	                    });
	                    // 即使这个元素高度确定,之前一个高度为null,也无法算出translateY和bottom
	                    // 此处再次验证之前一个元素是否为resolve
	                    if (i > 0) {
	                        var prevItemPosData = _this3.getItemPositionData(ds[i - 1], uniqueKeyName); // 这里处理的是用户传入的原始 dataSource 的项， uniqueKeyName 使用用户设置的 props
	                        if (!prevItemPosData._resolved) {
	                            _this3.setItemPositionData(renderedItem, { _resolved: false });
	                        }
	                    }
	                    // 第一个item,直接设置_translateY为0
	                    if (i === 0) {
	                        _this3.setItemPositionData(renderedItem, { _translateY: 0 });
	                    }
	                    // 之后的所有item,如果有height,设置它们的_translateY为前一个元素的bottom
	                    // 设置它们的bottom为_translateY+height
	                    if (itemPosData._resolved && !itemPosData._bottom) {
	                        var _translateY = i === 0 ? 0 : _this3.getItemPositionData(ds[i - 1], uniqueKeyName)._bottom;
	                        var _bottom = _translateY + itemPosData.height;
	                        _this3.setItemPositionData(renderedItem, {
	                            _translateY: _translateY,
	                            _bottom: _bottom
	                        });
	                    } else if (!itemPosData._resolved) {
	                        // 不定高的情况
	                        if (i > 0) {
	                            var _prevItemPosData = _this3.getItemPositionData(ds[i - 1], uniqueKeyName);
	                            if (_prevItemPosData._bottom) {
	                                _this3.setItemPositionData(renderedItem, { _translateY: _prevItemPosData._bottom });
	                            }
	                        }
	                    }
	                }
	
	                return renderedItem;
	            });
	        }
	
	        /**
	         * @param i
	         * @param borderY
	         * @param dataSource
	         * @returns {boolean}
	         * 根据offsetY计算出刚好跨过offsetY的元素(top在y之上,bottom在y之下),或者是一个没有完成定位的元素
	         */
	
	    }, {
	        key: 'isBorderItem',
	        value: function isBorderItem(i, borderY) {
	            var dataSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dataSource;
	
	            var itemPosData = this.getItemPositionData(dataSource[i], 'key');
	            return itemPosData._resolved && itemPosData._bottom >= borderY && itemPosData._translateY <= borderY || !itemPosData._resolved;
	        }
	
	        /**
	         * @param startY
	         * @param startIndex
	         * @param direction
	         * @param dataSource
	         * @param VISIBLE_SIZE
	         * @returns {Number}
	         * 根据当前滚动的方向和y计算出startIndex
	         * 缓存了当前的startIndex,这样可以将查找的开销从O(n)降低到O(1),在处理大列表的时候可以提升性能
	         */
	
	    }, {
	        key: 'getStartItemIndex',
	        value: function getStartItemIndex(startY) {
	            var sIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startIndex;
	            var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.direction;
	            var dataSource = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.dataSource;
	            var VISIBLE_SIZE = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.VISIBLE_SIZE;
	
	            var len = dataSource.length;
	            var startIndex = sIndex;
	            // 从保存的startIndex开始循环,根据当前滚动的方向的不同,i相应增加/减少
	            // 这样可以将查找的时间复杂度从线性降低到常量
	            if (direction === 'down' || startIndex === 0) {
	                for (var i = startIndex; i < len; i++) {
	                    if (this.isBorderItem(i, startY)) {
	                        startIndex = i;
	                        break;
	                    }
	                }
	            } else {
	                for (var _i = startIndex; _i >= 0; _i--) {
	                    if (this.isBorderItem(_i, startY)) {
	                        startIndex = _i;
	                        break;
	                    }
	                }
	            }
	
	            if (startIndex > dataSource.length - VISIBLE_SIZE) {
	                startIndex = dataSource.length - VISIBLE_SIZE > 0 ? dataSource.length - VISIBLE_SIZE : 0;
	            }
	
	            return startIndex;
	        }
	
	        /**
	         * @param startIndex
	         * @param dataSource
	         * @param VISIBLE_SIZE
	         * @returns {Number}
	         * 根据startIndex算出endIndex
	         */
	
	    }, {
	        key: 'getEndItemIndex',
	        value: function getEndItemIndex(startIndex) {
	            var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataSource;
	            var VISIBLE_SIZE = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.VISIBLE_SIZE;
	
	            return startIndex + VISIBLE_SIZE > dataSource.length ? dataSource.length : startIndex + VISIBLE_SIZE;
	        }
	
	        /**
	         * @param offsetY
	         * @param sIndex
	         * @param dataSource
	         * @param VISIBLE_SIZE
	         * @returns {Array}
	         * 根据offsetY算出visibleList
	         */
	
	    }, {
	        key: 'getVisibleList',
	        value: function getVisibleList() {
	            var offsetY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offsetY;
	            var sIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	            var dataSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dataSource;
	
	            offsetY = offsetY - this.staticSectionHeight;
	            var ret = null;
	
	            if (this.infinite) {
	                var startY = offsetY - this.WINDOW_HEIGHT / 5;
	                startY = startY > 0 ? startY : 0;
	                var startIndex = sIndex === null ? this.getStartItemIndex(startY) : sIndex,
	                    endIndex = this.getEndItemIndex(startIndex);
	
	                ret = [];
	                for (var i = startIndex; i < endIndex; i++) {
	                    var item = this.dataSource[i];
	                    ret.push(_extends({}, item, this.getItemPositionData(item, 'key')));
	                }
	                this.startIndex = startIndex;
	            } else {
	                ret = dataSource.slice();
	            }
	
	            return ret;
	        }
	
	        /**
	         * @param dataSource
	         * @returns {Object}
	         * 获取数据源中第一个还没有resolve的元素
	         */
	
	    }, {
	        key: 'getFirstNotResolvedItemIndex',
	        value: function getFirstNotResolvedItemIndex() {
	            var _this4 = this;
	
	            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataSource;
	
	            return dataSource.findIndex(function (ditem, i) {
	                if (i > 0) {
	                    var itemPosData = _this4.getItemPositionData(ditem, 'key');
	                    var prevItemPosData = _this4.getItemPositionData(dataSource[i - 1], 'key');
	                    return !itemPosData._resolved && prevItemPosData._resolved;
	                }
	                return false;
	            });
	        }
	
	        /**
	         * @param key
	         * @param dataSource
	         * @returns {Number}
	         * 根据key返回一个数据源中的元素
	         */
	
	    }, {
	        key: 'getItemIndexByKey',
	        value: function getItemIndexByKey(key) {
	            var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataSource;
	
	            return dataSource.findIndex(function (item) {
	                return item.key === key;
	            });
	        }
	
	        /**
	         * @param notResolvedItemIndex
	         * @param dataSource
	         * 更新一个未定位元素的_translateY,它是前一个元素的_bottom
	         */
	
	    }, {
	        key: 'updateTranslateY',
	        value: function updateTranslateY(notResolvedItemIndex) {
	            var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataSource;
	
	            var notResolvedItem = dataSource[notResolvedItemIndex];
	
	            if (notResolvedItem) {
	                var prevItemIndex = notResolvedItemIndex - 1;
	                var prevItem = dataSource[prevItemIndex];
	                var prevItemPosData = this.getItemPositionData(prevItem, 'key');
	
	                if (prevItemPosData && prevItemPosData._resolved) {
	                    this.setItemPositionData(notResolvedItem, { _translateY: prevItemPosData._bottom });
	                    // 同时也需要更新visibleList里面对应item的定位信息
	                    var visibleListItemToBeUpdated = this.visibleList.find(function (item) {
	                        return item.key === notResolvedItem.key;
	                    });
	                    if (visibleListItemToBeUpdated) {
	                        Object.assign(visibleListItemToBeUpdated, this.getItemPositionData(notResolvedItem, 'key'));
	                    }
	                }
	            }
	        }
	
	        /**
	         * @param key
	         * @param height
	         * @param dataSource
	         * @returns {ListCore}
	         * 不定高模式的核心逻辑,定位一个尚未定位的列表项
	         * 在列表项的componentDidUpdate和Mount中被调用,传入已经渲染好的列表项的dom高度,然后更新数据源中对应元素的高度并计算它的定位
	         * 在该元素完成定位后,渲染下一个未被定位的列表项,并重复以上逻辑,直到visibleList中所有的项都完成定位
	         */
	
	    }, {
	        key: 'resolveItem',
	        value: function resolveItem(key, height) {
	            var dataSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dataSource;
	
	            var targetIndex = this.getItemIndexByKey(key);
	            var targetItem = this.dataSource[targetIndex];
	            var _translateY = void 0;
	
	            if (targetIndex > 0) {
	                var prevItemPosData = this.getItemPositionData(dataSource[targetIndex - 1], 'key');
	                _translateY = prevItemPosData._bottom;
	            } else {
	                _translateY = 0;
	            }
	
	            if (_translateY != null) {
	                var _bottom = _translateY + height;
	                var _resolved = true;
	                this.setItemPositionData(targetItem, { _translateY: _translateY, _bottom: _bottom, _resolved: _resolved, height: height });
	                this.visibleList = this.getVisibleList();
	                this.totalHeight += height;
	                this.updateTranslateY(this.getFirstNotResolvedItemIndex());
	                this.emitChange();
	            }
	
	            return this;
	        }
	
	        /**
	         * @param dataSource
	         * @returns {Array}
	         * 计算列表中所有项的高度,用来refresh Scroller
	         */
	
	    }, {
	        key: 'getTotalHeight',
	        value: function getTotalHeight() {
	            var _this5 = this;
	
	            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataSource;
	
	            return dataSource.reduce(function (acc, item) {
	                var ret = acc;
	                var itemPosData = _this5.getItemPositionData(item, 'key');
	                ret += itemPosData._resolved ? itemPosData.height : 0;
	                return ret;
	            }, 0) + this.staticSectionHeight;
	        }
	
	        /**
	         * @returns {ListCore}
	         * 触发组件change事件,组件收到change事件后会执行setState
	         */
	
	    }, {
	        key: 'emitChange',
	        value: function emitChange() {
	            this.emitEvent('change', this.visibleList, this.totalHeight);
	            return this;
	        }
	    }]);
	
	    return ListCore;
	}(_ComponentCore3.default);
	
	ListCore.guid = -1;
	exports.default = ListCore;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _utils = __webpack_require__(53);
	
	var _utils2 = _interopRequireDefault(_utils);
	
	var _util = __webpack_require__(5);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _throttle = __webpack_require__(54);
	
	var _throttle2 = _interopRequireDefault(_throttle);
	
	var _lazyimage = __webpack_require__(67);
	
	var _lazyimage2 = _interopRequireDefault(_lazyimage);
	
	var _sticky = __webpack_require__(68);
	
	var _sticky2 = _interopRequireDefault(_sticky);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 滚动组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Scroller
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 滚动组件,用来提供滚动容器。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	提供了横向滚动和纵向滚动。
	提供了『下拉刷新』和『加载更多』功能。
	提供了 `transition` 和 `requestAnimationFrame` 两种实现滚动的方式。
	提供了 `transform` 和 `position:absolute` 两种实现位移的方式。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 确定高度：`Scroller` 默认提供一个纵向滚动区域，该区域必须有一个确定的高度才能正常工作，因为它实际上就是将一系列不确定高度的子组件（`div.scroller`）装进一个确定高度的容器（`div.yo-scroller`）。实现确定高度的方式有很多种：flex，指定高度，`position: absolute` 等等。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 内容容器：作为一个滚动组件，Scroller 会创建一个 div 作为滚动容器。如果 Scroller 的子元素只有一个，则会把这个子元素当做内容容器；否则，会创建一个 div 作为内容容器。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./scroller/basic.md}{instruUrl: scroller/base.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./scroller/refresh.md}{instruUrl: scroller/refresh.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./scroller/scrollevent.md}{instruUrl: scroller/scroll.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var REFRESHSTATUS = {
	    PULL: 'pullrefresh_pull',
	    RELEASE: 'pullrefresh_release',
	    LOAD: 'pullrefresh_load',
	    SUCCESS: 'pullrefresh_success',
	    FAIL: 'pullrefresh_fail'
	};
	var LOADSTATUS = {
	    PULL: 'loadmore_pull',
	    RELEASE: 'loadmore_release',
	    LOAD: 'loadmore_load',
	    NOMORE: 'loadmore_nomore'
	};
	
	var _utils$getRAF = _utils2.default.getRAF(),
	    rAF = _utils$getRAF.rAF,
	    cancelrAF = _utils$getRAF.cancelrAF;
	
	var defaultProps = {
	    extraClass: '',
	    containerExtraClass: '',
	    containerExtraStyle: {},
	    contentOffset: {
	        x: 0,
	        y: 0
	    },
	    contentInset: {
	        bottom: 0
	    },
	    disabled: false,
	    scrollX: false,
	    scrollY: true,
	    freeScroll: false,
	    directionLockThreshold: 5, // 锁定某一滚动方向的阀值
	    momentum: true, // 惯性滚动
	    bounce: true, // 弹性滚动
	    bounceTime: 600, // 弹性滚动时间
	    bounceEasing: _utils2.default.ease.circular, // 弹性滚动easing函数
	    preventDefault: true, // 阻止默认事件
	    preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ }, // 阻止默认事件的例外
	    stopPropagation: false, // 阻止冒泡
	    HWCompositing: true, // 是否开启硬件加速
	    useTransition: true,
	    useTransform: true,
	    onScroll: null, // 滚动事件的回调
	    usePullRefresh: false,
	    pullRefreshHeight: 40,
	    renderPullRefresh: null,
	    onRefresh: null,
	    useLoadMore: false,
	    loadMoreHeight: 40,
	    renderLoadMore: null,
	    onLoad: null,
	    autoRefresh: true,
	    wrapper: null,
	    enableLazyLoad: true,
	    scrollWithoutTouchStart: true,
	    stickyOffset: 0,
	    scrollIntoView: ''
	};
	
	var propTypes = {
	    /**
	     * 组件额外class
	     *
	     * @property extraClass
	     * @type String
	     * @description 为组件根节点提供额外的class。
	     * @default ''
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * 内容容器额外class
	     *
	     * @property containerExtraClass
	     * @type String
	     * @description 为组件中的内容容器提供额外的class。
	     * @default ''
	     */
	    containerExtraClass: _propTypes2.default.string,
	    /**
	     * 内容容器额外style
	     *
	     * @property containerExtraStyle
	     * @type String
	     * @description 为组件中的内容容器提供额外的style，主要用于横向滚动时，动态设置容器的宽度。
	     * @default {}
	     * @version 3.0.6
	     */
	    containerExtraStyle: _propTypes2.default.object,
	    /**
	     * 内容位移
	     *
	     * @property contentOffset
	     * @type {x: Number, y: Mumber}
	     * @description 组件中内容的初始位移，这个属性变化时，会重置内容的位移。
	     * @default {x: 0, y: 0}
	     */
	    contentOffset: _propTypes2.default.shape({
	        x: _propTypes2.default.number,
	        y: _propTypes2.default.number
	    }),
	    /**
	     * 内容底部留白
	     *
	     * @property contentInset
	     * @type Number
	     * @description 内容区域周围的留白，**目前仅支持 bottom**。主要用于适配 iPhoneX，在下方留出一定间隙。有『加载更多』时，显示在『加载更多』的下方。可以通过设置背景色来改变留白的颜色。
	     * @default {bottom:0}
	     * @version 3.0.13
	     */
	    contentInset: _propTypes2.default.shape({
	        bottom: _propTypes2.default.number
	    }),
	    /**
	     * @property stickyOffset
	     * @type Number
	     * @description 吸顶容器偏移，如果你希望吸顶容器不位于top:0的位置，可以修改这个属性。
	     * @default 0
	     * @version 3.0.6
	     */
	    stickyOffset: _propTypes2.default.number,
	    /**
	     * 是否禁止滚动
	     *
	     * @property disabled
	     * @type Bool
	     * @description 是否禁止滚动，默认允许滚动。
	     * @default false
	     */
	    disabled: _propTypes2.default.bool,
	    /**
	     * 横向滚动
	     *
	     * @property scrollX
	     * @type Bool
	     * @description 是否开启横向滚动，默认关闭。
	     * @default false
	     */
	    scrollX: _propTypes2.default.bool,
	    /**
	     * 纵向滚动
	     *
	     * @property scrollY
	     * @type Bool
	     * @description 是否开启纵向滚动,默认开启。
	     * @default true
	     */
	    scrollY: _propTypes2.default.bool,
	    /**
	     * 自由滚动
	     *
	     * @property freeScroll
	     * @type Bool
	     * @description 是否开启自由滚动。当设置为 `false` 时，只能响应某一个方向的滚动；当设置为 `true` 时，可以同时响应横向和纵向滚动（`scrollX` 和 `scrollY` 必须同时为 `true`）。
	     * @default false
	     * @skip
	     */
	    freeScroll: _propTypes2.default.bool,
	    /**
	     * 方向锁定阈值
	     *
	     * @property directionLockThreshold
	     * @type Number
	     * @description 只允许单向滚动的时候，会根据这个阀值来判定响应哪个方向上的位移：某一方向位移减去另一个方向位移超过阀值，就会判定为这个方向的滚动。
	     *
	     * 一个常见的示例是：在一个纵向滚动的 Scroller 中嵌套一个横向滚动的 Scroller。此时，如果斜着（约45°）滚动，则内层的 Scroller 会先响应，
	     * 但是不会锁定，触摸事件会向冒泡到外层的 Scroller，导致外层的 Scroller 也会响应。此时将 directionLockThreshold 设置成 0，保证不管向哪个方向滚动，
	     * Scroller 都会锁定方向而不向外冒泡，就不会出现同时响应的问题了。
	     * @default 5
	     */
	    directionLockThreshold: _propTypes2.default.number,
	    /**
	     * 惯性滚动
	     *
	     * @property momentum
	     * @type Bool
	     * @description 是否允许惯性滚动。当设置为 `true`，手指离开时，如果还有速度会继续滚动一段距离；当设置为 `false` ，手指离开时会立即停止滚动。
	     * @default true
	     */
	    momentum: _propTypes2.default.bool,
	    /**
	     * 弹性滚动
	     *
	     * @property bounce
	     * @type Bool
	     * @description 当滚动超出内容范围时，是否可以继续滚动一截。
	     * @default true
	     */
	    bounce: _propTypes2.default.bool,
	    /**
	     * 弹性滚动回弹时间
	     *
	     * @property bounceTime
	     * @type Number
	     * @description 当弹性滚动一截之后，回到滚动范围内位置的时间，单位为毫秒（ms）。
	     * @default 600
	     */
	    bounceTime: _propTypes2.default.number,
	    /**
	     * 弹性滚动回弹动画
	     *
	     * @property bounceEasing
	     * @type Object
	     * @description 弹性回滚动画。
	     *
	     * Scroller 提供了五种默认的动画函数：`quadratic`, `circular`, `back`, `bounce`, `elastic`，可以通过 `Scroller.ease.xxx` 来使用。
	     *
	     * 用户也可以自定义动画对象，比如：
	     *
	     * ``
	     * {
	     *     style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
	     *     fn: function (k) {
	     *         return k * ( 2 - k );
	     *     }
	     * }
	     * ``
	     * @default Scroller.ease.circular
	     */
	    bounceEasing: _propTypes2.default.object,
	    /**
	     * transition开关
	     *
	     * @property useTransition
	     * @type Bool
	     * @description 如果设置为true,会使用transition来实现滚动效果;如果设置为false,会使用requestAnimationFrame来实现。
	     * @default true
	     */
	    useTransition: _propTypes2.default.bool,
	    /**
	     * transform开关
	     *
	     * @property useTransform
	     * @type Bool
	     * @description 如果设置为true,会使用transform来实现位移;如果设置为false,会使用left和top来实现位移（position: absolute）。
	     * @default true
	     */
	    useTransform: _propTypes2.default.bool,
	    /**
	     * 滚动事件回调
	     *
	     * @property onScroll
	     * @type Function
	     * @param {e} event 滚动事件的回调，结构为: {contentOffset: {x: x, y: y}}
	     * @description (event) => void
	     *
	     * 滚动事件的回调。一旦设置了这个回调，为了能够监听滚动事件，会将useTransition属性强制设置为false，会由此带来一定的性能牺牲。
	     */
	    onScroll: _propTypes2.default.func,
	    /**
	     * 自动刷新高度
	     *
	     * @property autoRefresh
	     * @type Bool
	     * @description 默认为true,在componentDidUpdate的时候会自动刷新高度;如果设置为false,则在内容发生变化时，需要用户主动调用refresh方法来刷新高度。
	     * @default true
	     * @skip
	     */
	    autoRefresh: _propTypes2.default.bool,
	    /**
	     * 硬件加速
	     *
	     * @property HWCompositing
	     * @type Bool
	     * @description 是否开启硬件加速
	     * @default true
	     */
	    HWCompositing: _propTypes2.default.bool,
	    eventPassthrough: _propTypes2.default.bool,
	    /**
	     * @property preventDefault
	     * @type Bool
	     * @description 是否需要在Scroller容器上对所有的触摸事件（touchstart/touchmove/touchend/touchcancel）调用preventDefault。
	     * 这个属性的默认值为true，这是为了避免一些安卓的兼容性问题。如果你发现一些默认效果没有被触发（例如输入框的blur），可以尝试设置这个属性为false。
	     */
	    preventDefault: _propTypes2.default.bool,
	    preventDefaultException: _propTypes2.default.object,
	    stopPropagation: _propTypes2.default.bool,
	    /**
	     * 下拉刷新
	     *
	     * @property usePullRefresh
	     * @type Bool
	     * @description 是否开启下拉刷新功能
	     * @default false
	     * hasPullRefresh
	     */
	    usePullRefresh: _propTypes2.default.bool,
	    /**
	     * 下拉刷新事件回调
	     *
	     * @property onRefresh
	     * @type Function
	     * @param {e} event 结构为: ({contentOffset: {x: x, y: y}})
	     * @description (event) => void
	     *
	     * 下拉刷新时开始刷新的回调。
	     */
	    onRefresh: _propTypes2.default.func,
	    /**
	     * 下拉刷新高度
	     *
	     * @property pullRefreshHeight
	     * @type Number
	     * @description 触发下拉刷新状态的高度（一般即为下拉刷新提示区域的高度）
	     * @default 40
	     * 可以考虑不要
	     */
	    pullRefreshHeight: _propTypes2.default.number,
	    /**
	     * 下拉刷新渲染函数
	     *
	     * @property renderPullRefresh
	     * @type Function
	     * @returns {JSX} 用来渲染 pullRefresh 的 JSX
	     * @description () => JSX
	     *
	     * 自定义的下拉刷新渲染函数
	     */
	    renderPullRefresh: _propTypes2.default.func,
	    /**
	     * 加载更多
	     *
	     * @property useLoadMore
	     * @type Bool
	     * @description 是否开启加载更多功能.『加载更多』与『下拉刷新』略有不同，加载更多的提示区域是追加在内容区域的最后
	     * @default false
	     * hasLoadMore
	     */
	    useLoadMore: _propTypes2.default.bool,
	    /**
	     * 加载更多事件回调
	     *
	     * @property onLoad
	     * @type Function
	     * @param {e} event 结构为: ({contentOffset: {x: x, y: y}})
	     * @description (event) => void
	     *
	     * 加载更多时开始加载的回调。
	     */
	    onLoad: _propTypes2.default.func,
	    /**
	     * 加载更多高度
	     *
	     * @property loadMoreHeight
	     * @type Number
	     * @description 触发加载更多状态的高度（一般即为加载更多提示区域的高度）
	     * @default 40
	     */
	    loadMoreHeight: _propTypes2.default.number,
	    /**
	     * 加载更多渲染函数
	     *
	     * @property renderLoadMore
	     * @type Function
	     * @returns {JSX} 用来渲染 loadMore 的 JSX
	     * @description () => JSX
	     *
	     * 自定义的加载更多渲染函数
	     */
	    renderLoadMore: _propTypes2.default.func,
	    deceleration: _propTypes2.default.number,
	    wrapper: _propTypes2.default.object,
	    children: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string]),
	    style: _propTypes2.default.object,
	    /**
	     * @skip
	     * @property enableLazyLoad
	     * @type Bool
	     * @description 是否开启图片lazyload,默认为true
	     */
	    enableLazyLoad: _propTypes2.default.bool,
	    /**
	     * @property scrollWithoutTouchStart
	     * @type Bool
	     * @default true (从 3.0.17 开始，默认值从 false 改为 true)
	     * @description ** 实验中的属性 **
	     * 在默认情况下一次用户触发（非调用scrollTo方法）scroller的滚动需要由touchstart事件来启动，在某些情况下，例如scroller从disable状态切换到enable状态时，
	     * 可能不能接收到这一瞬间的touchstart事件，这可能导致用户期待的滚动过程没有发生。
	     * 开启这个属性为 true 以后将允许 scroller 用 touchmove 启动滚动过程，这可以解决上述场景的问题。
	     * @version 3.0.2
	     */
	    scrollWithoutTouchStart: _propTypes2.default.bool,
	    /**
	     * @property scrollIntoView
	     * @type String
	     * @default ''
	     * @description 值应为某子元素id（id不能以数字开头）。设置哪个方向可滚动，则在哪个方向滚动到该元素
	     * @version 3.1.7
	     */
	    scrollIntoView: _propTypes2.default.string
	};
	
	var Scroller = function (_Component) {
	    _inherits(Scroller, _Component);
	
	    function Scroller(props) {
	        _classCallCheck(this, Scroller);
	
	        var _this = _possibleConstructorReturn(this, (Scroller.__proto__ || Object.getPrototypeOf(Scroller)).call(this, props));
	
	        _this.x = 0;
	        _this.y = 0;
	        _this.directionX = 0;
	        _this.directionY = 0;
	        _this._scrollerStyle = {};
	
	        _this._resetProps(props, true);
	
	        _this.childLazyImages = [];
	        _this.stickyHeaders = [];
	        _this.stickyIndex = null;
	        _this.stickyOffset = null;
	        _this.wrapperOffsetTop = null;
	
	        _this.pullRefreshDoms = {};
	        _this.loadMoreDoms = {};
	        return _this;
	    }
	
	    _createClass(Scroller, [{
	        key: 'getChildContext',
	        value: function getChildContext() {
	            return { scroller: this, isScroller: this.props.enableLazyLoad };
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this2 = this;
	
	            this.wrapper = this.noWrapper ? this.wrapper : this.wrapperDom;
	            this.scroller = this.scrollerDom;
	
	            // 重置 position 属性
	            if (!this.useTransform) {
	                if (!/relative|absolute/i.test(this._scrollerStyle)) {
	                    this._scrollerStyle.position = 'relative';
	                }
	            }
	
	            this.refresh();
	
	            this._setRefreshStatus(REFRESHSTATUS.PULL);
	            this._setLoadStatus(LOADSTATUS.PULL);
	            // 内容区域高度小于容器高度时，不需要再重新定位loadMore的位置，refresh内部已经定位正确
	            // this._refreshLoadMore();
	
	            this._resetPosition();
	            var _props = this.props,
	                contentOffset = _props.contentOffset,
	                scrollIntoView = _props.scrollIntoView;
	
	            if (scrollIntoView !== undefined && scrollIntoView !== '') {
	                this.scrollIntoView();
	            } else {
	                this.scrollTo(contentOffset.x, contentOffset.y);
	            }
	
	            this.innerWidth = window.innerWidth;
	            this.innerHeight = window.innerHeight;
	
	            // 修复子元素存在 input 输入框时，浏览器强制让 input 显示在可见区域，收缩键盘后无法向上滑倒顶部的 bug
	            this._resetScrollTop = function () {
	                var wrapperDom = _this2.wrapperDom;
	
	                if (wrapperDom && wrapperDom.scrollTop > 0) {
	                    setTimeout(function () {
	                        wrapperDom.scrollTop = 0;
	                    }, 100); // 防止有输入框获得焦点时收缩键盘时强制输入框展示在现实区域而出现的闪烁问题
	                }
	            };
	
	            this._resize = function () {
	                var lastWidth = _this2.innerWidth,
	                    lastHeigth = _this2.innerHeight;
	                var _window = window,
	                    width = _window.innerWidth,
	                    height = _window.innerHeight;
	
	
	                _this2.innerWidth = width;
	                _this2.innerHeight = height;
	                // 判断是否为键盘收起
	                if (width === lastWidth && height > lastHeigth) {
	                    _this2._resetScrollTop();
	                }
	                _this2.forceUpdate();
	            };
	
	            window.addEventListener('orientationchange', this._resize, false);
	            window.addEventListener('resize', (0, _throttle2.default)(this._resize, 100), false);
	            window.addEventListener('focusout', this._resetScrollTop, false); // Safari 在键盘的展开和收起时不会触发 resize， 故使用 focusout。
	
	            this._tryLoadLazyImages();
	            this._refreshSticky(true);
	
	            if (this.stickyHeaders.length) {
	                this.useTransition = false;
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this._resetProps(nextProps);
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(prevProps, prevState) {
	            var _props2 = this.props,
	                scrollIntoView = _props2.scrollIntoView,
	                contentOffset = _props2.contentOffset;
	            var prevScrollIntoView = prevProps.scrollIntoView,
	                prevContentOffset = prevProps.contentOffset;
	
	
	            if (prevScrollIntoView !== scrollIntoView) {
	                // 重置 scrollIntoView
	                this.scrollIntoView();
	            } else if (prevContentOffset.x !== contentOffset.x || prevContentOffset.y !== contentOffset.y) {
	                // 重置 contentOffset
	                this.scrollTo(contentOffset.x, contentOffset.y);
	            }
	
	            // 重置 position 属性
	            if (!this.useTransform) {
	                if (!/relative|absolute/i.test(this._scrollerStyle)) {
	                    this._scrollerStyle.position = 'relative';
	                    if (this.scroller) this._setStyle(this.scroller, this._scrollerStyle);
	                }
	            }
	
	            // 重新获取容器和内容尺寸
	            if (this.props.autoRefresh) {
	                this.refresh();
	                if (this.scrollY) {
	                    var scrollerBottom = this.scrollerHeight - this.wrapperHeight;
	                    if (-this.y > scrollerBottom) {
	                        this.scrollTo(this.x, -scrollerBottom);
	                    }
	                } else if (this.scrollX) {
	                    var _scrollerBottom = this.scrollerWidth - this.wrapperWidth;
	                    if (-this.x > _scrollerBottom) {
	                        this.scrollTo(-_scrollerBottom, this.y);
	                    }
	                }
	            }
	
	            // 重置 pullRefresh 和 loadMore
	            if (prevState.usePullRefresh !== this.state.usePullRefresh) {
	                this._setRefreshStatus(REFRESHSTATUS.PULL);
	            }
	            if (prevState.useLoadMore !== this.state.useLoadMore) {
	                this._setLoadStatus(LOADSTATUS.PULL);
	                this._refreshLoadMore();
	            }
	
	            if (this.stickyHeaders.length) {
	                this.useTransition = false;
	            }
	
	            this._tryLoadLazyImages();
	            this._refreshSticky(true);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            window.removeEventListener('orientationchange', this._resize, false);
	            window.removeEventListener('resize', this._resize, false);
	        }
	    }, {
	        key: '_resetProps',
	        value: function _resetProps(props, init) {
	            this.state = this.state || {};
	
	            // 重置 useTransition 和 useTransform
	            this.translateZ = props.HWCompositing && _utils2.default.hasPerspective ? ' translateZ(0)' : '';
	            this.useTransition = _utils2.default.hasTransition && props.useTransition;
	            this.useTransform = _utils2.default.hasTransform && props.useTransform;
	
	            if (props.onScroll) {
	                this.useTransition = false;
	            }
	
	            // 重置 scrollX 和 scrollY
	            this.eventPassthrough = props.eventPassthrough === true ? 'vertical' : props.eventPassthrough;
	            this.preventDefault = !this.eventPassthrough && props.preventDefault;
	            this.scrollY = this.eventPassthrough === 'vertical' ? false : props.scrollY;
	            this.scrollX = this.eventPassthrough === 'horizontal' ? false : props.scrollX;
	            this.verticalBounce = this.scrollY ? props.bounce : false;
	            this.horizontalBounce = this.scrollX ? props.bounce : false;
	
	            // 重置 下拉刷新 和 加载更多
	            if (init) {
	                this.state.usePullRefresh = this.scrollY && !this.scrollX && props.usePullRefresh;
	                this.state.useLoadMore = this.scrollY && !this.scrollX && props.useLoadMore;
	            } else {
	                this.setState({
	                    usePullRefresh: this.scrollY && !this.scrollX && props.usePullRefresh,
	                    useLoadMore: this.scrollY && !this.scrollX && props.useLoadMore
	                });
	            }
	
	            // 重置 wrapper（内容容器）
	            // 兼容 Qreact 用 getOnlyChild(props) 替代 props.children && !props.children.length
	            this.noWrapper = !!props.wrapper && (0, _util.getOnlyChild)(props) && !this.state.usePullRefresh && !this.state.useLoadMore;
	
	            if (this.noWrapper) {
	                this.wrapper = props.wrapper;
	            }
	
	            // 如果disable状态发生了变化，需要重置initiated
	            if (this.disabled !== props.disabled) {
	                this.initiated = 0;
	            }
	            // 重置 disabled
	            this.disabled = props.disabled;
	            this.freeScroll = props.freeScroll && !this.eventPassthrough;
	            this.directionLockThreshold = this.eventPassthrough ? 0 : props.directionLockThreshold;
	        }
	    }, {
	        key: '_getOffsetFromID',
	        value: function _getOffsetFromID(id) {
	            var props = this.props;
	            var scrollX = props.scrollX,
	                scrollY = props.scrollY;
	
	            var offset = { x: 0, y: 0 };
	            if (id) {
	                var _dom = document.getElementById(id);
	                if (_dom) {
	                    scrollX && (offset.x = this.x - _dom.getBoundingClientRect().left + this.wrapperDom.getBoundingClientRect().left);
	                    scrollY && (offset.y = this.y - _dom.getBoundingClientRect().top + this.wrapperDom.getBoundingClientRect().top);
	                }
	            }
	            return offset;
	        }
	    }, {
	        key: 'scrollIntoView',
	        value: function scrollIntoView() {
	            var scrollIntoView = this.props.scrollIntoView;
	
	            if (scrollIntoView) {
	                var _offset = this._getOffsetFromID(scrollIntoView);
	                this.scrollTo(_offset.x, _offset.y);
	            }
	        }
	    }, {
	        key: '_handleTouchStart',
	        value: function _handleTouchStart(e) {
	            if (this.disabled || this.initiated && _utils2.default.eventType[e.type] !== this.initiated) {
	                return;
	            }
	
	            if (this.preventDefault && !_utils2.default.isBadAndroid && !_utils2.default.preventDefaultException(e.target, this.props.preventDefaultException)) {
	                e.preventDefault();
	            }
	            if (this.props.stopPropagation) {
	                e.stopPropagation();
	            }
	
	            var point = e.touches ? e.touches[0] : e;
	
	            this.initiated = _utils2.default.eventType[e.type];
	            this.moved = false;
	            this.distX = 0;
	            this.distY = 0;
	            this.directionX = 0;
	            this.directionY = 0;
	            this.directionLocked = 0;
	
	            this.startTime = _utils2.default.getTime();
	
	            this.stopAnimate();
	
	            this.startX = this.x;
	            this.startY = this.y;
	            this.absStartX = this.x;
	            this.absStartY = this.y;
	            this.pointX = point.pageX;
	            this.pointY = point.pageY;
	
	            // this._execEvent('beforeScrollStart');
	        }
	    }, {
	        key: '_handleTouchMove',
	        value: function _handleTouchMove(e) {
	            if (this.disabled) {
	                return;
	            }
	
	            if (_utils2.default.eventType[e.type] !== this.initiated) {
	                if (this.props.scrollWithoutTouchStart) {
	                    this._handleTouchStart(e);
	                } else {
	                    return;
	                }
	            }
	
	            if (this.preventDefault) {
	                // increases performance on Android? TODO: check!
	                e.preventDefault();
	            }
	
	            if (this.props.stopPropagation) {
	                e.stopPropagation();
	            }
	
	            var point = e.touches ? e.touches[0] : e;
	            var timestamp = _utils2.default.getTime();
	            var deltaX = point.pageX - this.pointX;
	            var deltaY = point.pageY - this.pointY;
	            var newX = void 0;
	            var newY = void 0;
	
	            this.pointX = point.pageX;
	            this.pointY = point.pageY;
	
	            this.distX += deltaX;
	            this.distY += deltaY;
	
	            var absDistX = Math.abs(this.distX);
	            var absDistY = Math.abs(this.distY);
	
	            // We need to move at least 10 pixels for the scrolling to initiate
	            if (timestamp - this.endTime > 300 && absDistX < 10 && absDistY < 10) {
	                return;
	            }
	
	            // If you are scrolling in one direction lock the other
	            if (!this.directionLocked && !this.freeScroll) {
	                if (absDistX > absDistY + this.directionLockThreshold) {
	                    this.directionLocked = 'h'; // lock horizontally
	                } else if (absDistY >= absDistX + this.directionLockThreshold) {
	                    this.directionLocked = 'v'; // lock vertically
	                } else {
	                    this.directionLocked = 'n'; // no lock
	                }
	            }
	
	            if (this.directionLocked === 'h') {
	                if (this.eventPassthrough === 'vertical') {
	                    e.preventDefault();
	                } else if (this.eventPassthrough === 'horizontal') {
	                    this.initiated = false;
	                    return;
	                }
	
	                deltaY = 0;
	            } else if (this.directionLocked === 'v') {
	                if (this.eventPassthrough === 'horizontal') {
	                    e.preventDefault();
	                } else if (this.eventPassthrough === 'vertical') {
	                    this.initiated = false;
	                    return;
	                }
	
	                deltaX = 0;
	            }
	
	            newX = this.x + deltaX;
	            newY = this.y + deltaY;
	
	            // Slow down if outside of the boundaries
	            if (newX > 0) {
	                newX = this.horizontalBounce ? this.x + deltaX / 3 : 0;
	            } else if (newX < this.maxScrollX) {
	                newX = this.horizontalBounce ? this.x + deltaX / 3 : this.maxScrollX;
	            }
	
	            if (newY > 0) {
	                newY = this.verticalBounce ? this.y + deltaY / 3 : 0;
	            } else if (newY < this.maxScrollY) {
	                newY = this.verticalBounce ? this.y + deltaY / 3 : this.maxScrollY;
	            }
	
	            if (deltaX > 0) {
	                this.directionX = -1;
	            } else if (deltaX < 0) {
	                this.directionX = 1;
	            } else {
	                this.directionX = 0;
	            }
	
	            if (deltaY > 0) {
	                this.directionY = -1;
	            } else if (deltaY < 0) {
	                this.directionY = 1;
	            } else {
	                this.directionY = 0;
	            }
	
	            if (!this.moved) {
	                this._execEvent('onScrollStart');
	            }
	
	            this.moved = true;
	
	            this._translate(newX, newY);
	
	            if (timestamp - this.startTime > 300) {
	                this.startTime = timestamp;
	                this.startX = this.x;
	                this.startY = this.y;
	            }
	
	            this._execEvent('onScroll');
	        }
	    }, {
	        key: '_handleTouchEnd',
	        value: function _handleTouchEnd(e) {
	            if (this.disabled || _utils2.default.eventType[e.type] !== this.initiated) {
	                return;
	            }
	
	            if (this.preventDefault && !_utils2.default.preventDefaultException(e.target, this.props.preventDefaultException)) {
	                e.preventDefault();
	            }
	
	            if (this.props.stopPropagation) {
	                e.stopPropagation();
	            }
	
	            var momentumX = void 0;
	            var momentumY = void 0;
	            var duration = _utils2.default.getTime() - this.startTime;
	            var newX = Math.round(this.x);
	            var newY = Math.round(this.y);
	            var time = 0;
	
	            this.isInTransition = 0;
	            this.initiated = 0;
	            this.endTime = _utils2.default.getTime();
	
	            // set pullrefresh
	            if (this.state.usePullRefresh && this.y >= this.props.pullRefreshHeight) {
	                if (this.refreshState === REFRESHSTATUS.LOAD) {
	                    this.scrollTo(this.x, this.props.pullRefreshHeight, 200);
	                } else {
	                    this._setRefreshStatus(REFRESHSTATUS.LOAD);
	                    this.scrollTo(this.x, this.props.pullRefreshHeight, 300);
	                    this._execEvent('onRefresh');
	                }
	                return;
	            }
	
	            // set loadmore
	            // jiao.shen:此处将y<=max改成了y<max
	            // 因为如果scroller正好滚到下边缘停住的时候,这时候如果scroller render,就会立刻触发loadmore,和使用习惯不符
	            if (this.state.useLoadMore && this.y < this.maxScrollY) {
	                if (this.loadState !== LOADSTATUS.NOMORE && this.loadState !== LOADSTATUS.LOAD) {
	                    this._setLoadStatus(LOADSTATUS.LOAD);
	                    this._execEvent('onLoad');
	                }
	            }
	
	            // reset if we are outside of the boundaries
	            if (this._resetPosition(this.props.bounceTime)) {
	                return;
	            }
	
	            this.scrollTo(newX, newY); // ensures that the last position is rounded
	
	            if (!this.moved) {
	                this._execEvent('onScrollCancel');
	                return;
	            }
	
	            // start momentum animation if needed
	            if (this.props.momentum && duration < 300) {
	                momentumX = this.hasHorizontalScroll ? _utils2.default.momentum(this.x, this.startX, duration, this.maxScrollX, this.horizontalBounce ? this.wrapperWidth : 0, this.props.deceleration) : {
	                    destination: newX,
	                    duration: 0
	                };
	                momentumY = this.hasVerticalScroll ? _utils2.default.momentum(this.y, this.startY, duration, this.maxScrollY, this.verticalBounce ? this.wrapperHeight : 0, this.props.deceleration) : {
	                    destination: newY,
	                    duration: 0
	                };
	                newX = momentumX.destination;
	                newY = momentumY.destination;
	                time = Math.max(momentumX.duration, momentumY.duration);
	                this.isInTransition = 1;
	            }
	
	            if (newX !== this.x || newY !== this.y) {
	                var easing = void 0;
	
	                // change easing function when scroller goes out of the boundaries
	                if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {
	                    easing = _utils2.default.ease.quadratic;
	                }
	
	                this.scrollTo(newX, newY, time, easing);
	                this._execEvent('onMomentumScrollBegin', {
	                    targetX: newX,
	                    targetY: newY
	                });
	                return;
	            }
	
	            this._execEvent('onScrollEnd');
	        }
	    }, {
	        key: '_handleTransitionEnd',
	        value: function _handleTransitionEnd(e) {
	            if (e.target !== this.scroller || !this.isInTransition) {
	                return;
	            }
	
	            this._transitionTime();
	            if (!this._resetPosition(this.props.bounceTime)) {
	                this.isInTransition = false;
	                this._execEvent('onScrollEnd');
	            }
	        }
	
	        /**
	         * 尝试加载处于可视区域内的lazyimage
	         * @param forceRefresh bool 强制刷新 Image 的位置
	         */
	
	    }, {
	        key: '_tryLoadLazyImages',
	        value: function _tryLoadLazyImages(forceRefresh) {
	            var _this3 = this;
	
	            if (this.childLazyImages.length) {
	                this.childLazyImages.forEach(function (img) {
	                    return _this3.loadImage(img, forceRefresh);
	                });
	            }
	        }
	
	        /**
	         * @method loadImage
	         * @param img LazyImage 实例
	         * @param forceRefresh bool 强制刷新 Image 的位置
	         * @description 判断并决定是否加载 LazyImage
	         * @skip
	         */
	
	    }, {
	        key: 'loadImage',
	        value: function loadImage(img, forceRefresh) {
	            var self = this;
	            var _top = img.offsetTop - this.wrapperOffsetTop + this.y;
	
	            if (forceRefresh) {
	                img.refresh(img.context);
	            }
	            if (_top < self.wrapperHeight) {
	                // 出现在当前可视区域和可视区域上方都加载
	                img.load(function () {
	                    var _height = img.props.style && img.props.style.height ? img.props.style.height : img.props.height;
	                    var _width = img.props.style && img.props.style.width ? img.props.style.width : img.props.width;
	                    if (!_height || !_width) {
	                        // 如果设置了高度，就不再重新刷新
	                        self.refresh();
	                    }
	                });
	            }
	        }
	    }, {
	        key: '_getCurrentSticky',
	        value: function _getCurrentSticky() {
	            var stickyOffset = this.props.stickyOffset;
	
	            var ret = null;
	            if (this.y < 0) {
	                var absY = Math.abs(this.y - stickyOffset);
	                var wrapperTop = this.wrapperOffsetTop;
	                var upperHeaders = this.stickyHeaders.filter(function (header) {
	                    return header.offsetTop - wrapperTop <= absY;
	                });
	
	                if (upperHeaders.length) {
	                    var currentHeader = upperHeaders[upperHeaders.length - 1];
	                    var nextHeader = this.stickyHeaders[upperHeaders.length];
	                    var index = upperHeaders.length - 1;
	                    if (nextHeader) {
	                        var distToNext = nextHeader.offsetTop - wrapperTop - absY;
	                        var adjustOffset = distToNext > currentHeader.height ? 0 : -(currentHeader.height - distToNext);
	                        ret = { currentHeader: currentHeader, adjustOffset: adjustOffset, index: index };
	                    } else {
	                        ret = { currentHeader: currentHeader, adjustOffset: 0, index: index };
	                    }
	                } else {
	                    ret = null;
	                }
	            } else {
	                ret = null;
	            }
	            return ret;
	        }
	    }, {
	        key: '_refreshSticky',
	        value: function _refreshSticky(forceRefresh) {
	            if (this.stickyHeaders.length) {
	                var currentSticky = this._getCurrentSticky();
	                var stickyNode = this.stickyNodeDom;
	
	                if (currentSticky) {
	                    var currentHeader = currentSticky.currentHeader,
	                        adjustOffset = currentSticky.adjustOffset;
	
	
	                    if (currentSticky.index !== this.stickyIndex || currentSticky.adjustOffset !== this.stickyOffset || forceRefresh) {
	                        var transform = 'translate(0px,' + adjustOffset + 'px) translateZ(0px)';
	                        stickyNode.style.transform = transform;
	                        stickyNode.style.webkitTransform = transform;
	                        stickyNode.style.display = 'block';
	                        stickyNode.className = currentHeader.stickyExtraClass;
	                        _reactDom2.default.render(_react2.default.cloneElement(currentHeader.onlyChild), stickyNode);
	
	                        this.stickyIndex = currentSticky.index;
	                        this.stickyOffset = currentSticky.adjustOffset;
	                    }
	                } else {
	                    this.stickyIndex = null;
	                    this.stickyOffset = null;
	                    stickyNode.style.display = 'none';
	                }
	            }
	        }
	
	        /**
	         * @method stopAnimate
	         * @description 停止当前的滚动动画，包括：惯性滚动、回弹、ScrollTo等。
	         */
	
	    }, {
	        key: 'stopAnimate',
	        value: function stopAnimate() {
	            if (this.useTransition && this.isInTransition) {
	                this._transitionTime();
	                this.isInTransition = false;
	
	                var pos = this._getComputedPosition();
	
	                this._translate(Math.round(pos.x), Math.round(pos.y));
	                this._execEvent('onScrollEnd');
	            } else if (!this.useTransition && this.isAnimating) {
	                this._execEvent('onScrollEnd');
	                cancelrAF(this.rAF);
	
	                this.isAnimating = false;
	            }
	        }
	
	        /**
	         * @method _getComputedPosition
	         * @returns {Object} 当前内容区域位移，{x: x, y: y}
	         * @description 获取当前内容区域的位移
	         * @skip
	         */
	
	    }, {
	        key: '_getComputedPosition',
	        value: function _getComputedPosition() {
	            var matrix = window.getComputedStyle(this.scroller, null);
	            var x = void 0;
	            var y = void 0;
	
	            if (this.useTransform) {
	                matrix = matrix[_utils2.default.style.transform].split(')')[0].split(', ');
	                x = +(matrix[12] || matrix[4]);
	                y = +(matrix[13] || matrix[5]);
	            } else {
	                x = +matrix.left.replace(/[^-\d.]/g, '');
	                y = +matrix.top.replace(/[^-\d.]/g, '');
	            }
	
	            return { x: x, y: y };
	        }
	
	        /**
	         * @method _execEvent
	         * @param {string} eventType 事件类型
	         * @param {Object} param 参数
	         * @description 触发事件回调
	         * @skip
	         */
	
	    }, {
	        key: '_execEvent',
	        value: function _execEvent(eventType, param) {
	            // console.log(eventType)
	            if (eventType === 'onScroll' || eventType === 'onScrollEnd') {
	                this._tryLoadLazyImages();
	                this._refreshSticky();
	            }
	            if (eventType === 'onScrollStart') {
	                this.isScrolling = true;
	            }
	            if (eventType === 'onScrollEnd') {
	                this.isScrolling = false;
	            }
	            if (this.props[eventType]) {
	                this.props[eventType].apply(this, [{
	                    contentOffset: {
	                        x: this.x,
	                        y: this.y
	                    },
	                    param: param
	                }]);
	            }
	        }
	
	        /**
	         * @method refresh
	         * @param {Object} [refreshOption] 刷新参数，{wrapperWidth, wrapperHeight, scrollerWidth, scrollerHeight}
	         * @description 刷新 Scroller，一般场景**不推荐使用**，因为当内容改变的时候，Scroller 会自动 render。
	         *
	         * 使用场景1：需要强制设置 Scroller 本身的宽高和内容容器的宽高时，可以通过refreshOption来传入宽高代替dom的宽高。
	         *
	         * 使用场景2：在某些不是通过 setState 或 Redux 等方式来改变内容导致 Scroller 不会 render 时，可以强制重新获取Scroller宽高和内容容器宽高。
	         */
	
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            var refreshOption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	            var callFromList = arguments[1];
	
	            // 当 this.wrapperWidth、this.wrapperHeight、this.scrollerWidth 均为 0 时，极有可能是因为该 Scroll 在 Modal 中，
	            // 并且在 Modal 不显示 (display: none) 的状态下初始化了。
	            if (!callFromList || this.wrapperWidth === 0 && this.wrapperHeight === 0 && this.scrollerWidth === 0) {
	                this.wrapperWidth = typeof refreshOption.wrapperWidth !== 'undefined' ? refreshOption.wrapperWidth : this.wrapper.clientWidth;
	                this.wrapperHeight = typeof refreshOption.wrapperHeight !== 'undefined' ? refreshOption.wrapperHeight : this.wrapper.clientHeight;
	                this.scrollerWidth = typeof refreshOption.scrollerWidth !== 'undefined' ? refreshOption.scrollerWidth : this.scroller.offsetWidth;
	
	                if (this.wrapperDom) {
	                    this.wrapperOffsetTop = (0, _util.getElementOffsetY)(this.wrapperDom, null);
	                }
	            }
	
	            this.scrollerHeight = typeof refreshOption.scrollerHeight !== 'undefined' ? refreshOption.scrollerHeight : this.scroller.offsetHeight;
	
	            // 如果有下拉刷新，设置下拉刷新的位置，重置scrollerHeight
	            if (this.state.useLoadMore && this.loadMoreDom) {
	                this.loadMoreDom.style.visibility = this.scrollerHeight > 0 ? 'visible' : 'hidden';
	                this.loadMoreDom.style.top = this.scrollerHeight + 'px';
	                this.scrollerHeight += this.props.loadMoreHeight;
	            }
	
	            this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
	            this.maxScrollY = this.wrapperHeight - this.scrollerHeight - this.props.contentInset.bottom;
	
	            this.hasHorizontalScroll = this.props.scrollX && this.maxScrollX < 0;
	            this.hasVerticalScroll = this.props.scrollY && this.maxScrollY < 0;
	
	            if (!this.hasHorizontalScroll) {
	                this.maxScrollX = 0;
	                this.scrollerWidth = this.wrapperWidth;
	            }
	
	            if (!this.hasVerticalScroll) {
	                this.maxScrollY = 0;
	                this.scrollerHeight = this.wrapperHeight;
	            }
	
	            this.endTime = 0;
	            this.directionX = 0;
	            this.directionY = 0;
	        }
	
	        /**
	         * @method refreshLazyImage
	         * @version 3.0.12
	         * @description 刷新 Scroller 中的 LazyImage。
	         *
	         * 使用场景：在某些不是通过 setState 或 Redux 等方式来**直接改变** Scroller 的内容导致 Scroller 不会 render 时，由于内容宽高发生了变化，需要通过本方法来刷新 LazyImage 的位置信息。
	         */
	
	    }, {
	        key: 'refreshLazyImage',
	        value: function refreshLazyImage() {
	            this._tryLoadLazyImages(true);
	        }
	
	        /**
	         * @method _resetPosition
	         * @param {Number} [time] 滚动到临界点的时间
	         * @description 校正当前内容的位置，如果超出了可滚动的范围，则滚动到临界点。主要用于回弹。
	         * @skip
	         */
	
	    }, {
	        key: '_resetPosition',
	        value: function _resetPosition(time) {
	            var x = this.x;
	            var y = this.y;
	            var animateTime = time || 0;
	
	            if (this.refreshState === REFRESHSTATUS.LOAD && this.y === this.props.pullRefreshHeight) {
	                return false;
	            }
	
	            if (!this.hasHorizontalScroll || this.x > 0) {
	                x = 0;
	            } else if (this.x < this.maxScrollX) {
	                x = this.maxScrollX;
	            }
	
	            if (!this.hasVerticalScroll || this.y > 0) {
	                y = 0;
	            } else if (this.y < this.maxScrollY) {
	                y = this.maxScrollY;
	            }
	
	            if (x === this.x && y === this.y) {
	                return false;
	            }
	
	            this.scrollTo(x, y, animateTime, this.props.bounceEasing);
	
	            return true;
	        }
	
	        /**
	         * @method scrollTo
	         * @param {Number} x 水平位移，默认值为当前水平位移
	         * @param {Number} y 垂直位移，默认值为当前垂直位移
	         * @param {Number} time 滚动时间，默认值为0
	         * @param {Object} [easing] 滚动动画对象。参照 `bounceEasing` 参数。
	         *
	         * @description 滚动到某个位置。
	         */
	
	    }, {
	        key: 'scrollTo',
	        value: function scrollTo() {
	            var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.x;
	            var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.y;
	            var time = arguments[2];
	            var easing = arguments[3];
	            // TODO: 给scrollTo加上回调，由于transitionend事件并不能针对某一次的transition，所以暂时不好处理
	            var _easing = easing || _utils2.default.ease.circular;
	            var transitionType = this.useTransition && _easing.style;
	
	            this.isInTransition = this.useTransition && time > 0;
	
	            if (!time || transitionType) {
	                if (transitionType) {
	                    this._transitionTimingFunction(_easing.style);
	                    this._transitionTime(time);
	                }
	                this._translate(x, y);
	            } else {
	                this._animate(x, y, time, _easing.fn);
	            }
	            // 由于scrollto不会触发onScroll事件，因此这里需要手动刷新一下sticky
	            this._refreshSticky(true);
	            this._tryLoadLazyImages();
	        }
	    }, {
	        key: '_transitionTimingFunction',
	        value: function _transitionTimingFunction(easing) {
	            this._scrollerStyle[_utils2.default.style.transitionTimingFunction] = easing;
	        }
	    }, {
	        key: '_transitionTime',
	        value: function _transitionTime(time) {
	            var _this4 = this;
	
	            var _time = time || 0;
	            var durationProp = _utils2.default.style.transitionDuration;
	            if (!this.useTransition) {
	                return;
	            }
	
	            if (!durationProp) {
	                return;
	            }
	            this._scrollerStyle[durationProp] = _time + 'ms';
	
	            if (!_time && _utils2.default.isBadAndroid) {
	                this._scrollerStyle[durationProp] = '0.0001ms';
	
	                // remove 0.0001ms
	                rAF(function () {
	                    if (_this4._scrollerStyle[durationProp] === '0.0001ms') {
	                        _this4._scrollerStyle[durationProp] = '0s';
	                    }
	                });
	            }
	
	            this._setStyle(this.scroller, this._scrollerStyle);
	        }
	    }, {
	        key: '_setStyle',
	        value: function _setStyle(dom, style) {
	            var _style = Object.assign({}, style);
	            var _dom = dom;
	
	            Object.keys(_style).forEach(function (key) {
	                _dom.style[key] = _style[key];
	            });
	        }
	    }, {
	        key: '_translate',
	        value: function _translate(x, y) {
	            if (this.useTransform) {
	                this._scrollerStyle[_utils2.default.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;
	
	                this.x = x;
	                this.y = y;
	
	                this._setStyle(this.scroller, this._scrollerStyle);
	            } else {
	                var _x = Math.round(x);
	                var _y = Math.round(y);
	
	                this._scrollerStyle.left = _x + 'px';
	                this._scrollerStyle.top = _y + 'px';
	
	                this.x = _x;
	                this.y = _y;
	
	                this._setStyle(this.scroller, this._scrollerStyle);
	            }
	
	            if (this.state.usePullRefresh) {
	                if (y >= this.props.pullRefreshHeight && this.refreshState === REFRESHSTATUS.PULL) {
	                    this._setRefreshStatus(REFRESHSTATUS.RELEASE);
	                } else if (y < this.props.pullRefreshHeight && this.refreshState === REFRESHSTATUS.RELEASE) {
	                    this._setRefreshStatus(REFRESHSTATUS.PULL);
	                }
	            }
	
	            if (this.state.useLoadMore) {
	                if (this.maxScrollY - y > 0 && this.loadState === LOADSTATUS.PULL) {
	                    // this._setRefreshStatus(LOADSTATUS.RELEASE);
	                    this._setLoadStatus(LOADSTATUS.RELEASE);
	                } else if (this.maxScrollY - y <= 0 && this.loadState === LOADSTATUS.RELEASE) {
	                    // this._setRefreshStatus(LOADSTATUS.PULL);
	                    this._setLoadStatus(LOADSTATUS.PULL);
	                }
	            }
	        }
	    }, {
	        key: '_animate',
	        value: function _animate(destX, destY, duration, easingFn) {
	            var _this5 = this;
	
	            var self = this;
	            var startX = this.x;
	            var startY = this.y;
	            var startTime = _utils2.default.getTime();
	            var destTime = startTime + duration;
	
	            var step = function step() {
	                var now = _utils2.default.getTime();
	                var easing = easingFn((now - startTime) / duration);
	                var newX = (destX - startX) * easing + startX;
	                var newY = (destY - startY) * easing + startY;
	
	                if (now >= destTime) {
	                    self.isAnimating = false;
	                    self._translate(destX, destY);
	
	                    if (!self._resetPosition(self.props.bounceTime)) {
	                        self._execEvent('onScrollEnd');
	                    }
	
	                    return;
	                }
	
	                self._translate(newX, newY);
	
	                _this5._execEvent('onScroll');
	
	                if (self.isAnimating) {
	                    cancelrAF(self.rAF);
	                    self.rAF = rAF(step);
	                }
	            };
	
	            this.isAnimating = true;
	            step();
	        }
	    }, {
	        key: '_setRefreshStatus',
	        value: function _setRefreshStatus(status) {
	            var _this6 = this;
	
	            if (!this.state.usePullRefresh) {
	                return;
	            }
	
	            var _prevRefreshState = this.refreshState;
	            this.refreshState = status;
	
	            Object.keys(REFRESHSTATUS).forEach(function (item) {
	                var _ref = REFRESHSTATUS[item];
	                if (_this6.pullRefreshDoms[_ref]) {
	                    _this6.pullRefreshDoms[_ref].style.display = status === _ref ? '' : 'none';
	                }
	            });
	
	            var releaseIcon = this.pullRefreshDoms[REFRESHSTATUS.RELEASE].querySelector('i');
	            var pullIcon = this.pullRefreshDoms[REFRESHSTATUS.PULL].querySelector('i');
	
	            // todo: 为啥用了react之后，这个地方需要setTimeout才能正常动画
	            setTimeout(function () {
	                if (_prevRefreshState === REFRESHSTATUS.PULL && status === REFRESHSTATUS.RELEASE) {
	                    releaseIcon.style[_utils2.default.style.transform] = '';
	                    pullIcon.style[_utils2.default.style.transform] = 'rotate(180deg)';
	                } else {
	                    releaseIcon.style[_utils2.default.style.transform] = 'rotate(-180deg)';
	                    pullIcon.style[_utils2.default.style.transform] = '';
	                }
	            }, 0);
	        }
	    }, {
	        key: '_setLoadStatus',
	        value: function _setLoadStatus(status) {
	            var _this7 = this;
	
	            if (!this.state.useLoadMore) {
	                return;
	            }
	
	            var _prevLoadState = this.loadState;
	            this.loadState = status;
	
	            Object.keys(LOADSTATUS).forEach(function (item) {
	                var _ref = LOADSTATUS[item];
	                if (_this7.loadMoreDoms[_ref]) {
	                    _this7.loadMoreDoms[_ref].style.display = status === _ref ? '' : 'none';
	                }
	            });
	
	            var releaseIcon = this.loadMoreDoms[LOADSTATUS.RELEASE].querySelector('i');
	            var pullIcon = this.loadMoreDoms[LOADSTATUS.PULL].querySelector('i');
	
	            // todo: 为啥用了react之后，这个地方需要setTimeout才能正常动画
	            setTimeout(function () {
	                if (_prevLoadState === LOADSTATUS.PULL && status === LOADSTATUS.RELEASE) {
	                    releaseIcon.style[_utils2.default.style.transform] = '';
	                    pullIcon.style[_utils2.default.style.transform] = 'rotate(180deg)';
	                } else {
	                    releaseIcon.style[_utils2.default.style.transform] = 'rotate(-180deg)';
	                    pullIcon.style[_utils2.default.style.transform] = '';
	                }
	            }, 0);
	        }
	
	        /**
	         * @method resetLoadStatus
	         * @param {Bool} hasLoadMore 是否能够加载更多，如果传入false，加载更多区域的文字将会变成 没有更多了，并且继续向下滚动时不会触发onLoadMore。
	         * @description 重置加载更多功能。
	         * @version 3.0.7
	         */
	
	    }, {
	        key: 'resetLoadStatus',
	        value: function resetLoadStatus(hasLoadMore) {
	            this._setLoadStatus(hasLoadMore ? LOADSTATUS.PULL : LOADSTATUS.NOMORE);
	        }
	
	        /**
	         * @method startRefreshing
	         * @param {Number} [time] 滚动到顶部的时间，默认为 300ms
	         * @description 强制开始刷新。这个方法一般是用在切换筛选项或者关键字等场景，来达到回到顶部并且开始刷新的效果。如果是用户下拉触发 `onRefresh` 时，就不需要再调用这个方法了。
	         */
	
	    }, {
	        key: 'startRefreshing',
	        value: function startRefreshing() {
	            var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 300;
	
	            if (this.state.usePullRefresh && this.refreshState !== REFRESHSTATUS.LOAD) {
	                this._setRefreshStatus(REFRESHSTATUS.LOAD);
	                this.scrollTo(this.x, this.props.pullRefreshHeight, time);
	
	                this._execEvent('onRefresh');
	            }
	        }
	
	        /**
	         * @method stopRefreshing
	         * @param {Bool} [success] 下拉刷新是否成功，默认为 false。
	         * @param {Object} [config] 停止刷新的配置项
	         * {
	         *      duration: <Number> 回到顶部的动画时间，默认是300ms
	         *      delay: <Number> 成功/失败提示信息的停留时间，默认是0ms
	         * }
	         * @param {number} [config.duration] 回到顶部的动画时间，默认是 300ms。
	         * @param {number} [config.delay] 成功/失败提示信息的停留时间，默认是0ms
	         * @param {Function} [callback] 回到顶部的动画执行完毕的回调。
	         * @description 中止下拉刷新过程。在列表发生下拉刷新之后你应该调用这个方法去中止它(比如服务器响应已经返回的时候),否则刷新不会自动终止。
	         */
	
	    }, {
	        key: 'stopRefreshing',
	        value: function stopRefreshing(success, config, callback) {
	            var _this8 = this;
	
	            if (this.state.usePullRefresh && this.refreshState === REFRESHSTATUS.LOAD) {
	                this._setRefreshStatus(success ? REFRESHSTATUS.SUCCESS : REFRESHSTATUS.FAIL);
	                // const _config = config || { duration: 3000 };
	                var _config = {
	                    duration: config && config.duration || 300,
	                    delay: config && config.delay || 0
	                };
	
	                // 方案一：放在scrollTo的回调中处理状态，但是scrollTo的回调有时候会有问题；可以通过this.disabled = true 来禁止滚动解决现有的问题
	                // this.scrollTo(this.x, 0, 300, null, ()=>{
	                //     this._setRefreshStatus(REFRESHSTATUS.PULL);
	                // });
	
	                // 方案二：setTimeout的方式，但是不准确，尤其是在比较卡的机器上
	                this.disabled = true;
	                setTimeout(function () {
	                    _this8.scrollTo(_this8.x, 0, _config.duration);
	
	                    setTimeout(function () {
	                        _this8._setRefreshStatus(REFRESHSTATUS.PULL);
	                        _this8._setLoadStatus(LOADSTATUS.PULL);
	                        _this8.disabled = false;
	                        if ((0, _util.isFunction)(callback)) {
	                            callback();
	                        }
	                    }, _config.duration);
	                }, _config.delay);
	            }
	        }
	
	        /**
	         * @method stopLoading
	         * @param {Bool} status 刷新的状态。true表示加载了更多数据，false表示没有更多数据了。
	         * @description 停止加载更多。
	         */
	
	    }, {
	        key: 'stopLoading',
	        value: function stopLoading(status) {
	            if (this.state.useLoadMore && this.loadState === LOADSTATUS.LOAD) {
	                this._setLoadStatus(status ? LOADSTATUS.PULL : LOADSTATUS.NOMORE);
	            }
	        }
	
	        /**
	         * @method _refreshLoadMore
	         * @skip
	         * @private
	         * @description 更新useLoadMore属性时的逻辑（该逻辑必须放到refresh之后，因为refresh才会计算的到正确的scrollerHeight）
	         *
	         * 1. 如果是去掉useLoadMore，需要重新设置位置（因为scrollerHeight变少了）
	         * 2. 如果是加上useLoadMore，需要设置LoadMore的位置（此时的scrollerHeight是包括loadMoreHeight的，所以需要减去loadMoreHHeight）
	         */
	
	    }, {
	        key: '_refreshLoadMore',
	        value: function _refreshLoadMore() {
	            if (!this.state.useLoadMore) {
	                this._resetPosition();
	            } else {
	                if (this.loadMoreDom) {
	                    this.loadMoreDom.style.top = this.scrollerHeight - this.props.loadMoreHeight + 'px';
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this9 = this;
	
	            var _props3 = this.props,
	                extraClass = _props3.extraClass,
	                containerExtraClass = _props3.containerExtraClass,
	                pullRefreshHeight = _props3.pullRefreshHeight,
	                loadMoreHeight = _props3.loadMoreHeight,
	                stickyOffset = _props3.stickyOffset;
	
	            var pullRefreshContent = void 0;
	            var loadMoreContent = void 0;
	
	            if (this.state.usePullRefresh) {
	                var pullRefreshTpl = _react2.default.createElement(
	                    'div',
	                    {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this9.pullrefreshDom = dom;
	                            }
	                        },
	                        className: 'yo-load',
	                        style: {
	                            height: pullRefreshHeight + 'px',
	                            lineHeight: pullRefreshHeight + 'px',
	                            top: -pullRefreshHeight + 'px'
	                        }
	                    },
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.pullRefreshDoms.pullrefresh_pull = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico' },
	                            '\uF07B'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u4E0B\u62C9\u53EF\u4EE5\u5237\u65B0'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.pullRefreshDoms.pullrefresh_release = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico' },
	                            '\uF079'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u91CA\u653E\u7ACB\u5373\u66F4\u65B0'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.pullRefreshDoms.pullrefresh_load = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico yo-ico-loading' },
	                            '\uF089'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u52AA\u529B\u52A0\u8F7D\u4E2D...'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.pullRefreshDoms.pullrefresh_success = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico yo-ico-succ' },
	                            '\uF078'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u52A0\u8F7D\u6210\u529F'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.pullRefreshDoms.pullrefresh_fail = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico yo-ico-fail' },
	                            '\uF077'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u52A0\u8F7D\u5931\u8D25'
	                        )
	                    )
	                );
	
	                pullRefreshContent = this.props.renderPullRefresh ? this.props.renderPullRefresh() : pullRefreshTpl;
	            }
	
	            if (this.state.useLoadMore) {
	                var loadMoreTpl = _react2.default.createElement(
	                    'div',
	                    {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this9.loadMoreDom = dom;
	                            }
	                        },
	                        className: 'yo-load',
	                        style: {
	                            height: loadMoreHeight + 'px',
	                            lineHeight: loadMoreHeight + 'px',
	                            top: -loadMoreHeight + 'px'
	                        }
	                    },
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.loadMoreDoms.loadmore_pull = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico' },
	                            '\uF079'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u4E0A\u62C9\u52A0\u8F7D\u66F4\u591A'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.loadMoreDoms.loadmore_release = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico' },
	                            '\uF07B'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u91CA\u653E\u7ACB\u5373\u52A0\u8F7D'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: 'yo-loadtip',
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.loadMoreDoms.loadmore_load = dom;
	                                }
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico yo-ico-loading' },
	                            '\uF089'
	                        ),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u6B63\u5728\u52A0\u8F7D...'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        _defineProperty({
	                            className: 'yo-loadtip', ref: 'loadmore_nomore'
	                        }, 'ref', function ref(dom) {
	                            if (dom) {
	                                _this9.loadMoreDoms.loadmore_nomore = dom;
	                            }
	                        }),
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'text' },
	                            '\u6CA1\u6709\u66F4\u591A\u4E86...'
	                        )
	                    )
	                );
	
	                loadMoreContent = this.props.renderLoadMore ? this.props.renderLoadMore() : loadMoreTpl;
	            }
	
	            var wrapperStyle = Object.assign({ overflow: 'hidden', paddingBottom: this.props.contentInset.bottom }, this.props.style);
	            // let wrapperStyle = Object.assign({ overflow: 'hidden' }, this.props.style);
	            var scrollerStyle = Object.assign({}, this.props.containerExtraStyle, this._scrollerStyle);
	            var scrollerContent = void 0;
	            var _wrapperClassName = (0, _classnames2.default)('yo-scroller', extraClass);
	            var _scrollerClassName = (0, _classnames2.default)('scroller', containerExtraClass);
	
	            // 兼容 Qreact
	            var theOnlyChild = (0, _util.getOnlyChild)(this.props);
	
	            if (this.noWrapper) {
	                // 1. 不需要滚动容器（只适用于特殊的、内容的宽高已知的情况）
	                scrollerContent = _react2.default.cloneElement(this.props.children, {
	                    ref: function ref(dom) {
	                        _this9.scrollerDom = dom;
	                    },
	                    onTouchStart: function onTouchStart(evt) {
	                        return _this9._handleTouchStart(evt);
	                    },
	                    onTouchMove: function onTouchMove(evt) {
	                        return _this9._handleTouchMove(evt);
	                    },
	                    onTouchEnd: function onTouchEnd(evt) {
	                        return _this9._handleTouchEnd(evt);
	                    },
	                    onTouchCancel: function onTouchCancel(evt) {
	                        return _this9._handleTouchEnd(evt);
	                    },
	                    onTransitionEnd: function onTransitionEnd(evt) {
	                        return _this9._handleTransitionEnd(evt);
	                    }
	                });
	                // 兼容 Qreact
	            } else if (theOnlyChild && typeof theOnlyChild.type === 'string' && !this.state.usePullRefresh && !this.state.useLoadMore) {
	                // 2. 将内容的最外层节点当做滚动容器
	                if (theOnlyChild.props && theOnlyChild.props.className) {
	                    _scrollerClassName = (0, _classnames2.default)('scroller', theOnlyChild.props.className);
	                } else {
	                    _scrollerClassName = 'scroller';
	                }
	
	                var content = _react2.default.cloneElement(theOnlyChild, {
	                    ref: function ref(dom) {
	                        _this9.scrollerDom = dom;
	                    },
	                    className: _scrollerClassName,
	                    style: scrollerStyle
	                });
	
	                scrollerContent = _react2.default.createElement(
	                    'div',
	                    {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this9.wrapperDom = dom;
	                            }
	                        },
	                        className: _wrapperClassName,
	                        onTouchStart: function onTouchStart(evt) {
	                            return _this9._handleTouchStart(evt);
	                        },
	                        onTouchMove: function onTouchMove(evt) {
	                            return _this9._handleTouchMove(evt);
	                        },
	                        onTouchEnd: function onTouchEnd(evt) {
	                            return _this9._handleTouchEnd(evt);
	                        },
	                        onTouchCancel: function onTouchCancel(evt) {
	                            return _this9._handleTouchEnd(evt);
	                        },
	                        onTransitionEnd: function onTransitionEnd(evt) {
	                            return _this9._handleTransitionEnd(evt);
	                        },
	                        style: wrapperStyle
	                    },
	                    _react2.default.createElement('div', {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this9.stickyNodeDom = dom;
	                            }
	                        },
	                        style: { position: 'absolute', top: stickyOffset, left: 0, right: 0, zIndex: 9999 },
	                        className: 'sticky'
	                    }),
	                    content
	                );
	            } else {
	                // 3. 在内容的外面加一层滚动容器
	                scrollerContent = _react2.default.createElement(
	                    'div',
	                    {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this9.wrapperDom = dom;
	                            }
	                        },
	                        className: _wrapperClassName,
	                        onTouchStart: function onTouchStart(evt) {
	                            return _this9._handleTouchStart(evt);
	                        },
	                        onTouchMove: function onTouchMove(evt) {
	                            return _this9._handleTouchMove(evt);
	                        },
	                        onTouchEnd: function onTouchEnd(evt) {
	                            return _this9._handleTouchEnd(evt);
	                        },
	                        onTouchCancel: function onTouchCancel(evt) {
	                            return _this9._handleTouchEnd(evt);
	                        },
	                        onTransitionEnd: function onTransitionEnd(evt) {
	                            return _this9._handleTransitionEnd(evt);
	                        },
	                        style: wrapperStyle
	                    },
	                    _react2.default.createElement('div', {
	                        ref: function ref(dom) {
	                            if (dom) {
	                                _this9.stickyNodeDom = dom;
	                            }
	                        },
	                        style: { position: 'absolute', top: stickyOffset, left: 0, right: 0, zIndex: 9999 },
	                        className: 'sticky'
	                    }),
	                    _react2.default.createElement(
	                        'div',
	                        {
	                            className: _scrollerClassName,
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this9.scrollerDom = dom;
	                                }
	                            },
	                            style: scrollerStyle
	                        },
	                        this.props.children,
	                        pullRefreshContent,
	                        loadMoreContent
	                    )
	                );
	            }
	
	            return scrollerContent;
	        }
	    }]);
	
	    return Scroller;
	}(_react.Component);
	
	Scroller.ease = _utils2.default.ease;
	Scroller.childContextTypes = {
	    scroller: _propTypes2.default.object,
	    isScroller: _propTypes2.default.bool
	};
	exports.default = Scroller;
	
	
	Scroller.defaultProps = defaultProps;
	Scroller.propTypes = propTypes;
	Scroller.Sticky = _sticky2.default;
	Scroller.LazyImage = _lazyimage2.default;

/***/ },
/* 53 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var utils = function () {
	    var me = {};
	    var _elementStyle = document.createElement('div').style;
	
	    var _vendor = function () {
	        var vendors = ['t', 'WebkitT', 'MozT', 'msT', 'OT'];
	        var transform = void 0;
	
	        for (var i = 0, l = vendors.length; i < l; i++) {
	            transform = vendors[i] + 'ransform';
	            if (transform in _elementStyle) {
	                return vendors[i].substr(0, vendors[i].length - 1);
	            }
	        }
	
	        return false;
	    }();
	
	    var _prefixStyle = function _prefixStyle(style) {
	        if (_vendor === false) {
	            return false;
	        }
	        if (_vendor === '') {
	            return style;
	        }
	        return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
	    };
	
	    me.getTime = Date.now || function getTime() {
	        return new Date().getTime();
	    };
	
	    me.getRAF = function () {
	        function basicRAF(callback) {
	            return window.setTimeout(callback, 1000 / 60);
	        }
	
	        var rAF = window.cancelAnimationFrame && window.requestAnimationFrame || window.webkitCancelAnimationFrame && window.webkitRequestAnimationFrame || window.mozCancelAnimationFrame && window.mozRequestAnimationFrame || window.oCancelAnimationFrame && window.oRequestAnimationFrame || window.msCancelAnimationFrame && window.msRequestAnimationFrame || basicRAF;
	
	        var cancelrAF = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || window.clearTimeout;
	
	        if (me.isBadAndroid) {
	            rAF = basicRAF;
	            cancelrAF = window.clearTimeout;
	        }
	
	        return { rAF: rAF, cancelrAF: cancelrAF };
	    };
	
	    me.extend = function (target, obj) {
	        Object.keys(obj).forEach(function (i) {
	            target[i] = obj[i];
	        });
	    };
	
	    me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
	        var distance = current - start,
	            destination = void 0,
	            duration = void 0;
	        var speed = Math.abs(distance) / time;
	
	        deceleration = deceleration === undefined ? 0.0015 : deceleration;
	
	        destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
	        duration = speed / deceleration;
	
	        if (destination < lowerMargin) {
	            destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;
	            distance = Math.abs(destination - current);
	            duration = distance / speed;
	        } else if (destination > 0) {
	            destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;
	            distance = Math.abs(current) + destination;
	            duration = distance / speed;
	        }
	
	        return {
	            destination: Math.round(destination),
	            duration: duration
	        };
	    };
	
	    var _transform = _prefixStyle('transform');
	
	    me.extend(me, {
	        hasTransform: _transform !== false,
	        hasPerspective: _prefixStyle('perspective') in _elementStyle,
	        hasTouch: 'ontouchstart' in window,
	        hasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed
	        hasTransition: _prefixStyle('transition') in _elementStyle
	    });
	
	    /*
	     This should find all Android browsers lower than build 535.19 (both stock browser and webview)
	     - galaxy S2 is ok
	     - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`
	     - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	     - galaxy S3 is badAndroid (stock brower, webview)
	     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	     - galaxy S4 is badAndroid (stock brower, webview)
	     `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
	     - galaxy S5 is OK
	     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
	     - galaxy S6 is OK
	     `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
	     */
	    me.isBadAndroid = function () {
	        var appVersion = window.navigator.appVersion;
	        var _isBadAndroid = false;
	        // Android browser is not a chrome browser.
	        if (/Android/.test(appVersion) && !/Chrome\/\d/.test(appVersion)) {
	            var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
	            if (safariVersion && (typeof safariVersion === 'undefined' ? 'undefined' : _typeof(safariVersion)) === 'object' && safariVersion.length >= 2) {
	                _isBadAndroid = parseFloat(safariVersion[1]) < 535.19;
	            } else {
	                _isBadAndroid = true;
	            }
	        } else {
	            _isBadAndroid = false;
	        }
	
	        return _isBadAndroid;
	    }();
	
	    me.extend(me.style = {}, {
	        transform: _transform,
	        transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
	        transitionDuration: _prefixStyle('transitionDuration'),
	        transitionDelay: _prefixStyle('transitionDelay'),
	        transformOrigin: _prefixStyle('transformOrigin')
	    });
	
	    me.preventDefaultException = function (el, exceptions) {
	        var keys = Object.keys(exceptions);
	
	        for (var i = 0, len = keys.length; i < len; i++) {
	            var attr = keys[i];
	            if (exceptions[attr].test(el[attr])) {
	                return true;
	            }
	        }
	
	        return false;
	    };
	
	    me.extend(me.eventType = {}, {
	        touchstart: 1,
	        touchmove: 1,
	        touchend: 1,
	        touchcancel: 1
	
	        // mousedown: 2,
	        // mousemove: 2,
	        // mouseup: 2,
	        //
	        // pointerdown: 3,
	        // pointermove: 3,
	        // pointerup: 3,
	        //
	        // MSPointerDown: 3,
	        // MSPointerMove: 3,
	        // MSPointerUp: 3
	    });
	
	    me.extend(me.ease = {}, {
	        quadratic: {
	            style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
	            fn: function fn(k) {
	                return k * (2 - k);
	            }
	        },
	        circular: {
	            style: 'cubic-bezier(0.1, 0.57, 0.1, 1)', // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
	            fn: function fn(k) {
	                var _k = k - 1;
	                return Math.sqrt(1 - _k * _k);
	            }
	        },
	        back: {
	            style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
	            fn: function fn(k) {
	                var b = 4;
	                var _k = k - 1;
	                return _k * _k * ((b + 1) * _k + b) + 1;
	            }
	        },
	        bounce: {
	            style: '',
	            fn: function fn(k) {
	                var y = void 0,
	                    _k = k;
	
	                if (_k / 1 < 1 / 2.75) {
	                    _k = _k / 1;
	                    y = 7.5625 * _k * _k;
	                } else if (k < 2 / 2.75) {
	                    _k -= 1.5 / 2.75;
	                    y = 7.5625 * _k * _k + 0.75;
	                } else if (k < 2.5 / 2.75) {
	                    _k -= 2.25 / 2.75;
	                    y = 7.5625 * _k * _k + 0.9375;
	                } else {
	                    _k -= 2.625 / 2.75;
	                    y = 7.5625 * _k * _k + 0.984375;
	                }
	
	                return y;
	            }
	        },
	        elastic: {
	            style: '',
	            fn: function fn(k) {
	                var f = 0.22,
	                    e = 0.4;
	
	                if (k === 0) {
	                    return 0;
	                }
	                if (k === 1) {
	                    return 1;
	                }
	
	                return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;
	            }
	        }
	    });
	
	    return me;
	}();
	
	exports.default = utils;

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	var debounce = __webpack_require__(55),
	    isObject = __webpack_require__(56);
	
	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/**
	 * Creates a throttled function that only invokes `func` at most once per
	 * every `wait` milliseconds. The throttled function comes with a `cancel`
	 * method to cancel delayed `func` invocations and a `flush` method to
	 * immediately invoke them. Provide `options` to indicate whether `func`
	 * should be invoked on the leading and/or trailing edge of the `wait`
	 * timeout. The `func` is invoked with the last arguments provided to the
	 * throttled function. Subsequent calls to the throttled function return the
	 * result of the last `func` invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the throttled function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.throttle` and `_.debounce`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to throttle.
	 * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=true]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new throttled function.
	 * @example
	 *
	 * // Avoid excessively updating the position while scrolling.
	 * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
	 *
	 * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
	 * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
	 * jQuery(element).on('click', throttled);
	 *
	 * // Cancel the trailing throttled invocation.
	 * jQuery(window).on('popstate', throttled.cancel);
	 */
	function throttle(func, wait, options) {
	  var leading = true,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  if (isObject(options)) {
	    leading = 'leading' in options ? !!options.leading : leading;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	  return debounce(func, wait, {
	    'leading': leading,
	    'maxWait': wait,
	    'trailing': trailing
	  });
	}
	
	module.exports = throttle;


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(56),
	    now = __webpack_require__(57),
	    toNumber = __webpack_require__(60);
	
	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';
	
	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max,
	    nativeMin = Math.min;
	
	/**
	 * Creates a debounced function that delays invoking `func` until after `wait`
	 * milliseconds have elapsed since the last time the debounced function was
	 * invoked. The debounced function comes with a `cancel` method to cancel
	 * delayed `func` invocations and a `flush` method to immediately invoke them.
	 * Provide `options` to indicate whether `func` should be invoked on the
	 * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
	 * with the last arguments provided to the debounced function. Subsequent
	 * calls to the debounced function return the result of the last `func`
	 * invocation.
	 *
	 * **Note:** If `leading` and `trailing` options are `true`, `func` is
	 * invoked on the trailing edge of the timeout only if the debounced function
	 * is invoked more than once during the `wait` timeout.
	 *
	 * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
	 * until to the next tick, similar to `setTimeout` with a timeout of `0`.
	 *
	 * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
	 * for details over the differences between `_.debounce` and `_.throttle`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to debounce.
	 * @param {number} [wait=0] The number of milliseconds to delay.
	 * @param {Object} [options={}] The options object.
	 * @param {boolean} [options.leading=false]
	 *  Specify invoking on the leading edge of the timeout.
	 * @param {number} [options.maxWait]
	 *  The maximum time `func` is allowed to be delayed before it's invoked.
	 * @param {boolean} [options.trailing=true]
	 *  Specify invoking on the trailing edge of the timeout.
	 * @returns {Function} Returns the new debounced function.
	 * @example
	 *
	 * // Avoid costly calculations while the window size is in flux.
	 * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
	 *
	 * // Invoke `sendMail` when clicked, debouncing subsequent calls.
	 * jQuery(element).on('click', _.debounce(sendMail, 300, {
	 *   'leading': true,
	 *   'trailing': false
	 * }));
	 *
	 * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
	 * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
	 * var source = new EventSource('/stream');
	 * jQuery(source).on('message', debounced);
	 *
	 * // Cancel the trailing debounced invocation.
	 * jQuery(window).on('popstate', debounced.cancel);
	 */
	function debounce(func, wait, options) {
	  var lastArgs,
	      lastThis,
	      maxWait,
	      result,
	      timerId,
	      lastCallTime,
	      lastInvokeTime = 0,
	      leading = false,
	      maxing = false,
	      trailing = true;
	
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  wait = toNumber(wait) || 0;
	  if (isObject(options)) {
	    leading = !!options.leading;
	    maxing = 'maxWait' in options;
	    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
	    trailing = 'trailing' in options ? !!options.trailing : trailing;
	  }
	
	  function invokeFunc(time) {
	    var args = lastArgs,
	        thisArg = lastThis;
	
	    lastArgs = lastThis = undefined;
	    lastInvokeTime = time;
	    result = func.apply(thisArg, args);
	    return result;
	  }
	
	  function leadingEdge(time) {
	    // Reset any `maxWait` timer.
	    lastInvokeTime = time;
	    // Start the timer for the trailing edge.
	    timerId = setTimeout(timerExpired, wait);
	    // Invoke the leading edge.
	    return leading ? invokeFunc(time) : result;
	  }
	
	  function remainingWait(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime,
	        timeWaiting = wait - timeSinceLastCall;
	
	    return maxing
	      ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
	      : timeWaiting;
	  }
	
	  function shouldInvoke(time) {
	    var timeSinceLastCall = time - lastCallTime,
	        timeSinceLastInvoke = time - lastInvokeTime;
	
	    // Either this is the first call, activity has stopped and we're at the
	    // trailing edge, the system time has gone backwards and we're treating
	    // it as the trailing edge, or we've hit the `maxWait` limit.
	    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
	      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
	  }
	
	  function timerExpired() {
	    var time = now();
	    if (shouldInvoke(time)) {
	      return trailingEdge(time);
	    }
	    // Restart the timer.
	    timerId = setTimeout(timerExpired, remainingWait(time));
	  }
	
	  function trailingEdge(time) {
	    timerId = undefined;
	
	    // Only invoke if we have `lastArgs` which means `func` has been
	    // debounced at least once.
	    if (trailing && lastArgs) {
	      return invokeFunc(time);
	    }
	    lastArgs = lastThis = undefined;
	    return result;
	  }
	
	  function cancel() {
	    if (timerId !== undefined) {
	      clearTimeout(timerId);
	    }
	    lastInvokeTime = 0;
	    lastArgs = lastCallTime = lastThis = timerId = undefined;
	  }
	
	  function flush() {
	    return timerId === undefined ? result : trailingEdge(now());
	  }
	
	  function debounced() {
	    var time = now(),
	        isInvoking = shouldInvoke(time);
	
	    lastArgs = arguments;
	    lastThis = this;
	    lastCallTime = time;
	
	    if (isInvoking) {
	      if (timerId === undefined) {
	        return leadingEdge(lastCallTime);
	      }
	      if (maxing) {
	        // Handle invocations in a tight loop.
	        timerId = setTimeout(timerExpired, wait);
	        return invokeFunc(lastCallTime);
	      }
	    }
	    if (timerId === undefined) {
	      timerId = setTimeout(timerExpired, wait);
	    }
	    return result;
	  }
	  debounced.cancel = cancel;
	  debounced.flush = flush;
	  return debounced;
	}
	
	module.exports = debounce;


/***/ },
/* 56 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value;
	  return value != null && (type == 'object' || type == 'function');
	}
	
	module.exports = isObject;


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(58);
	
	/**
	 * Gets the timestamp of the number of milliseconds that have elapsed since
	 * the Unix epoch (1 January 1970 00:00:00 UTC).
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Date
	 * @returns {number} Returns the timestamp.
	 * @example
	 *
	 * _.defer(function(stamp) {
	 *   console.log(_.now() - stamp);
	 * }, _.now());
	 * // => Logs the number of milliseconds it took for the deferred invocation.
	 */
	var now = function() {
	  return root.Date.now();
	};
	
	module.exports = now;


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	var freeGlobal = __webpack_require__(59);
	
	/** Detect free variable `self`. */
	var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
	
	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();
	
	module.exports = root;


/***/ },
/* 59 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
	var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
	
	module.exports = freeGlobal;
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(56),
	    isSymbol = __webpack_require__(61);
	
	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;
	
	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;
	
	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
	
	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;
	
	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;
	
	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;
	
	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? (other + '') : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return (isBinary || reIsOctal.test(value))
	    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
	    : (reIsBadHex.test(value) ? NAN : +value);
	}
	
	module.exports = toNumber;


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(62),
	    isObjectLike = __webpack_require__(66);
	
	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';
	
	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	  return typeof value == 'symbol' ||
	    (isObjectLike(value) && baseGetTag(value) == symbolTag);
	}
	
	module.exports = isSymbol;


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(63),
	    getRawTag = __webpack_require__(64),
	    objectToString = __webpack_require__(65);
	
	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	  if (value == null) {
	    return value === undefined ? undefinedTag : nullTag;
	  }
	  return (symToStringTag && symToStringTag in Object(value))
	    ? getRawTag(value)
	    : objectToString(value);
	}
	
	module.exports = baseGetTag;


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	var root = __webpack_require__(58);
	
	/** Built-in value references. */
	var Symbol = root.Symbol;
	
	module.exports = Symbol;


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	var Symbol = __webpack_require__(63);
	
	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/** Built-in value references. */
	var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
	
	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];
	
	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}
	
	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}
	
	module.exports = getRawTag;


/***/ },
/* 65 */
/***/ function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;
	
	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;
	
	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}
	
	module.exports = objectToString;


/***/ },
/* 66 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && typeof value == 'object';
	}
	
	module.exports = isObjectLike;


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component LazyImage
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 懒加载图片组件，只能在 `Scroller` 和 `List` 中使用。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 使用这个组件代替img标签后，会延迟加载这个图片，直到List组件的滚动使得该图片位于可视区域之内。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./lazyimage.md}{instruUrl: scroller/lazyimage.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version  3.0.2
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var TO_BE_LOADED = 0;
	var LOADING = 1;
	var LOADED = 2;
	
	var _class = function (_Component) {
	    _inherits(_class, _Component);
	
	    function _class(props) {
	        _classCallCheck(this, _class);
	
	        // 0->等待load,1->loading,2->loaded
	        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));
	
	        _this.loading = TO_BE_LOADED;
	        _this.state = {
	            src: _this.props.defaultImage
	        };
	        return _this;
	    }
	
	    _createClass(_class, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var self = this;
	            this.refresh(this.context);
	            function loadImage(scroller) {
	                if (scroller.loadImage) {
	                    setTimeout(function () {
	                        scroller.loadImage(self);
	                    }, 0);
	                }
	            }
	            // list 中的 lazyimage。
	            // 若 context 中有 itemRef，则为 list item 中的 lazyimage，加入到 list.childLazyImages 中；
	            // 若 context 中没有 itemRef，则为 list staticSection 中的 lazyimage，加入到 list.scroller.childLazyImages 中。
	            if (this.context.list) {
	                var list = this.context.list;
	                var itemRef = this.context.itemRef;
	                if (itemRef) {
	                    list.childLazyImages.push(this);
	                    loadImage(list);
	                } else {
	                    setTimeout(function () {
	                        if (list.scroller) {
	                            list.scroller.childLazyImages.push(self);
	                            loadImage(list.scroller);
	                        }
	                    }, 0);
	                }
	            } else if (this.context.scroller) {
	                var scroller = this.context.scroller;
	                scroller.childLazyImages.push(this);
	                loadImage(scroller);
	            }
	        }
	
	        // 父组件render时,需要重置这个组件的loaded状态和context
	
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            // 此处的 refresh 需要等到 didupdate 之后才能获取正确的位置
	            // this.refresh(nextContext);
	            this._isUpdate = true;
	
	            if (this.state.src !== nextProps.src) {
	                this.loading = TO_BE_LOADED;
	                this.setState({ src: this.props.defaultImage });
	            }
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            if (this._isUpdate) {
	                this._isUpdate = false;
	
	                this.refresh(this.context);
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            var scroller = this.context.list || this.context.scroller;
	            if (scroller) {
	                scroller.childLazyImages.splice(scroller.childLazyImages.indexOf(this), 1);
	            }
	            this.canLoadImage = false;
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh(context) {
	            this.canLoadImage = true;
	            this.offsetY = context.offsetY;
	            this.itemRef = context.itemRef;
	            this.infinite = context.infinite;
	            // 如果不是infinite的列表，那么应该获取offsetTop(这个开销还挺大的，不过没得优化了)，反之，则使用translateY
	            // 当 infinite 为 true 时，list 中 staticSection 里的 lazyimage 需要获取下 offsetTop。
	            if (!this.infinite && this.img || this.infinite && !this.itemRef) {
	                this.offsetTop = (0, _util.getElementOffsetY)(this.img);
	                this.height = this.img.offsetHeight;
	            }
	        }
	    }, {
	        key: 'load',
	        value: function load(callback) {
	            var _this2 = this;
	
	            if (this.loading === TO_BE_LOADED) {
	                var src = this.props.src,
	                    tmpImg = new Image();
	
	                this.loading = LOADING;
	
	                tmpImg.onload = function () {
	                    // 在lazyimage正在加载时组件unmount(主要是在SPA模式下有可能发生关闭view的情况)会报错
	                    // 因此这里需要简单判断一下组件的实例是否还存在
	                    // bugfix: 在网速不稳定的情况下，有可能这个lazyimage加载的图片比之前加载的图片更晚下载完
	                    // 这个时候会引起加载图片错乱的问题，因此需要再加一个判断
	                    if (_this2 && _this2.canLoadImage && src === _this2.props.src) {
	                        _this2.loading = LOADED;
	                        _this2.setState({ src: src, loaded: true });
	                        if (callback) {
	                            callback();
	                        }
	                    }
	                };
	                tmpImg.src = src;
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var _props = this.props,
	                height = _props.height,
	                style = _props.style,
	                customAttr = _props.customAttr;
	
	            if (this.context.list) {
	                if (height == null && style.height == null) {
	                    throw Error('yo-lazyimage: 在List组件中使用LazyImage必须指定图片的高度。');
	                }
	            }
	
	            return _react2.default.createElement('img', _extends({}, (0, _util.inheritProps)(this.props, ['onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel', 'width', 'height', 'className', 'title', 'style']), {
	                alt: this.props.alt,
	                ref: function ref(img) {
	                    if (img) _this3.img = img;
	                },
	                src: this.state.src
	            }, customAttr));
	        }
	    }]);
	
	    return _class;
	}(_react.Component);
	
	_class.contextTypes = {
	    // 从父组件context接收的属性
	    // list/scroller组件实例的引用
	    list: _propTypes2.default.object,
	    scroller: _propTypes2.default.object,
	    // listitem的offsetY(infinite模式下)
	    offsetY: _propTypes2.default.number,
	    // listitem实例的引用
	    itemRef: _propTypes2.default.object,
	    // 是否是Scroller下面的Lazyload,而不是List下面的
	    isScroller: _propTypes2.default.bool,
	    // 是否是infinite列表
	    infinite: _propTypes2.default.bool
	};
	_class.propTypes = {
	    /**
	     * @property defaultImage
	     * @type String
	     * @default null
	     * @description 默认图片，在原图片还没有完成加载时展示。
	     */
	    defaultImage: _propTypes2.default.string,
	    /**
	     * @property src
	     * @type String
	     * @default null
	     * @description 图片src，必需。
	     */
	    src: _propTypes2.default.string.isRequired,
	    /**
	     * @property className
	     * @type String
	     * @default null
	     * @description 给img标签加的类名。
	     */
	    className: _propTypes2.default.string,
	    /**
	     * @property width
	     * @type Number
	     * @default null
	     * @description 图片宽度。
	     */
	    width: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property height
	     * @type Number
	     * @default null
	     * @description 图片高度。
	     */
	    height: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property customAttr
	     * @type Object
	     * @default null
	     * @description 附加给img dom节点的自定义属性，属性名需要以data-开头。
	     */
	    customAttr: _propTypes2.default.object,
	    /**
	     * @property style
	     * @type Object
	     * @default null
	     * @description 附加给img dom节点的style。
	     */
	    style: _propTypes2.default.object,
	    /**
	     * @property alt
	     * @type String
	     * @default null
	     * @description 和img标签的alt属性相同。
	     */
	    alt: _propTypes2.default.string,
	    /**
	     * @property title
	     * @type String
	     * @default null
	     * @description 和img标签的title属性相同。
	     */
	    title: _propTypes2.default.string,
	    onTouchStart: _propTypes2.default.func,
	    onTouchMove: _propTypes2.default.func,
	    onTouchEnd: _propTypes2.default.func,
	    onTouchCancel: _propTypes2.default.func
	};
	_class.defaultProps = {
	    defaultImage: null,
	    src: null,
	    className: null,
	    width: null,
	    height: null,
	    customAttr: {},
	    style: null
	};
	exports.default = _class;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Sticky
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description `Sticky` 组件，只能在 `Scroller` 内部或者列表系列组件的 `staticSection` 中使用，
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 它内部的子元素在 `Scroller` 滚动时将会获得吸顶效果。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * `Sticky` 是一个虚拟组件，它只会给它的唯一子元素添加额外的逻辑，而不会改变原有的 `dom` 结构。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./sticky.md}{instruUrl: scroller/sticky.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version  3.0.2
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var Sticky = function (_Component) {
	    _inherits(Sticky, _Component);
	
	    function Sticky() {
	        _classCallCheck(this, Sticky);
	
	        var _this = _possibleConstructorReturn(this, (Sticky.__proto__ || Object.getPrototypeOf(Sticky)).call(this));
	
	        _this.domNode = null;
	        _this.height = null;
	        _this.offsetTop = null;
	        _this.className = null;
	        return _this;
	    }
	
	    _createClass(Sticky, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.scroller = this.context.scroller;
	
	            if (this.scroller) {
	                this.initialize();
	                this.scroller.stickyHeaders.push(this);
	            }
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            this.initialize();
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            var _this2 = this;
	
	            if (this.scroller) {
	                this.scroller.stickyHeaders = this.scroller.stickyHeaders.filter(function (header) {
	                    return header !== _this2;
	                });
	            }
	        }
	    }, {
	        key: 'initialize',
	        value: function initialize() {
	            var height = this.props.height;
	
	            this.domNode = _reactDom2.default.findDOMNode(this);
	            if (height == null) {
	                this.height = this.domNode.offsetHeight;
	            } else {
	                this.height = this.props.height;
	            }
	            this.offsetTop = (0, _util.getElementOffsetY)(this.domNode, null);
	            this.className = this.domNode.className;
	            this.onlyChild = _react2.default.Children.only(this.props.children);
	            this.stickyExtraClass = this.props.stickyExtraClass;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            return _react2.default.Children.only(this.props.children);
	        }
	    }]);
	
	    return Sticky;
	}(_react.Component);
	
	Sticky.propTypes = {
	    /**
	     * @property stickyExtraClass
	     * @type String
	     * @default null
	     * @description 在Sticky的子元素处在吸顶状态时，为Scroller的sticky容器添加的额外样式类。
	     */
	    stickyExtraClass: _propTypes2.default.string,
	    /**
	     * @property height
	     * @type number
	     * @default null
	     * @version 3.0.6
	     * @description 吸顶元素的高度，在infinite的列表组件的staticSection中使用时，设置这个属性可以提高列表的滚动性能。
	     */
	    height: _propTypes2.default.number,
	    children: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.object, _propTypes2.default.string])
	};
	Sticky.defaultProps = {
	    stickyExtraClass: ''
	};
	Sticky.contextTypes = {
	    scroller: _propTypes2.default.object
	};
	exports.default = Sticky;

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _util = __webpack_require__(5);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 列表项组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var _class = function (_Component) {
	    _inherits(_class, _Component);
	
	    /**
	     * key和translateY在shouldComponentUpdate中会被使用
	     * 将会根据nextProps.item中对应的值,来决定是否render
	     * @param props
	     */
	    function _class(props) {
	        _classCallCheck(this, _class);
	
	        var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));
	
	        _this.key = props.item.key;
	        _this.translateY = props.item._translateY;
	        return _this;
	    }
	
	    _createClass(_class, [{
	        key: 'getChildContext',
	        value: function getChildContext() {
	            return { offsetY: this.props.item._translateY, itemRef: this };
	        }
	
	        /**
	         * 不定高的核心逻辑,在dom rendered以后更新对应列表项的定位信息,并渲染出下一个未经定位的列表项,直到填满visibleList的size
	         */
	
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _this2 = this;
	
	            var isHeightFixed = this.props.listModel.isHeightFixed;
	            // 不定高无穷列表的容器是flex-box的话, 浏览器会先渲染dom然后调整高度, 这时候取到的高度不准
	            // setTimeout是无奈之举，确实没有想到更好的办法，因为这个调整高度的时机用js根本无法准确获取
	
	            if (isHeightFixed) {
	                this.updateItemHeightWhenDomRendered();
	            } else {
	                this.domNode && (this.domNode.style.visibility = 'hidden');
	                setTimeout(function () {
	                    _this2.updateItemHeightWhenDomRendered();
	                    _this2.domNode && (_this2.domNode.style.visibility = 'visible');
	                }, _util.DELAY_TIME_FOR_INFINITE_WITHOUT_HEIGHT);
	            }
	        }
	
	        /**
	         * 根据之前的key和_translateY和接收到的props.item中的对应值,决定是否render
	         * 使用者定义的shouldItemUpdate可以接收到shouldComponentUpdate的结果,并返回一个新的结果
	         * @param nextProps
	         * @returns {Bool}
	         */
	
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps) {
	            var listModel = nextProps.listModel,
	                shouldItemUpdate = nextProps.shouldItemUpdate;
	
	            var ret = true;
	            // 当容器内部item的key和translateY发生变化时重新render
	            if (listModel.infinite && this.key === nextProps.item.key && this.translateY === nextProps.item._translateY) {
	                ret = false;
	            }
	
	            this.key = nextProps.item.key;
	            this.translateY = nextProps.item._translateY;
	
	            if (shouldItemUpdate && !ret) {
	                return shouldItemUpdate(nextProps.item.srcData, this.props.item.srcData);
	            }
	            return ret;
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            this.updateItemHeightWhenDomRendered();
	        }
	
	        /**
	         * 不定高模式的无穷列表需要在列表项渲染后更新它的位置信息
	         */
	
	    }, {
	        key: 'updateItemHeightWhenDomRendered',
	        value: function updateItemHeightWhenDomRendered() {
	            var _props = this.props,
	                item = _props.item,
	                listModel = _props.listModel,
	                onListItemUpdate = _props.onListItemUpdate;
	
	
	            if (this.domNode) {
	                if (!item._resolved && item._translateY !== undefined && listModel.infinite && !listModel.isHeightFixed) {
	                    listModel.resolveItem(item.key, this.domNode.offsetHeight);
	                }
	
	                onListItemUpdate(item.srcData, this.domNode);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var _props2 = this.props,
	                renderItem = _props2.renderItem,
	                item = _props2.item,
	                onItemTap = _props2.onItemTap,
	                listModel = _props2.listModel,
	                itemTouchClass = _props2.itemTouchClass,
	                itemExtraClass = _props2.itemExtraClass,
	                onItemTouchStart = _props2.onItemTouchStart;
	
	            var transform = 'translate(0,' + item._translateY + 'px) translateZ(0px)';
	            var infiniteStyle = {
	                WebkitTransform: transform,
	                transform: transform,
	                height: item.height,
	                position: 'absolute',
	                top: 0
	            };
	            var basicProps = {
	                ref: function ref(dom) {
	                    _this3.domNode = dom;
	                },
	                style: listModel.infinite ? infiniteStyle : null
	            };
	            var additionalProps = {
	                className: (0, _classnames2.default)(item._type !== 'groupTitle' ? 'item' : 'group-title label', itemExtraClass(item.srcData, item._index))
	            };
	
	            return _react2.default.createElement(
	                _touchable2.default,
	                {
	                    internalUse: true,
	                    onTap: onItemTap,
	                    touchClass: itemTouchClass(item.srcData, item._index),
	                    onTouchStart: function onTouchStart(evt) {
	                        onItemTouchStart(item.srcData, item._index, evt);
	                    }
	                },
	                _react2.default.createElement(
	                    'li',
	                    Object.assign({}, basicProps, additionalProps),
	                    renderItem(item.srcData, item._index)
	                )
	            );
	        }
	    }]);
	
	    return _class;
	}(_react.Component);
	
	_class.propTypes = {
	    item: _propTypes2.default.object,
	    listModel: _propTypes2.default.object,
	    itemTouchClass: _propTypes2.default.func,
	    itemExtraClass: _propTypes2.default.func,
	    scroller: _propTypes2.default.object,
	    onItemTouchStart: _propTypes2.default.func,
	    renderItem: _propTypes2.default.func,
	    onItemTap: _propTypes2.default.func,
	    onListItemUpdate: _propTypes2.default.func
	};
	_class.childContextTypes = {
	    offsetY: _propTypes2.default.number,
	    itemRef: _propTypes2.default.object
	};
	_class.defaultProps = {
	    onListItemUpdate: function onListItemUpdate() {}
	};
	exports.default = _class;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ComponentCore2 = __webpack_require__(44);
	
	var _ComponentCore3 = _interopRequireDefault(_ComponentCore2);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Grouplist核心逻辑,负责管理Grouplist组件的状态
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var GroupCore = function (_ComponentCore) {
	    _inherits(GroupCore, _ComponentCore);
	
	    /**
	     * 构造函数
	     * @param dataSource 数据源,将会被插入一些title对象
	     * @param itemHeight 列表项高度
	     * @param titleHeight title高度
	     * @param sort group排序规则
	     * @param infinite 是否开启无穷模式
	     * @param offsetY 初始偏移
	     */
	    function GroupCore(_ref) {
	        var dataSource = _ref.dataSource,
	            _ref$itemHeight = _ref.itemHeight,
	            itemHeight = _ref$itemHeight === undefined ? null : _ref$itemHeight,
	            _ref$staticSectionHei = _ref.staticSectionHeight,
	            staticSectionHeight = _ref$staticSectionHei === undefined ? 0 : _ref$staticSectionHei,
	            titleHeight = _ref.titleHeight,
	            sort = _ref.sort,
	            infinite = _ref.infinite,
	            _ref$offsetY = _ref.offsetY,
	            offsetY = _ref$offsetY === undefined ? 0 : _ref$offsetY,
	            _ref$isTitleStatic = _ref.isTitleStatic,
	            isTitleStatic = _ref$isTitleStatic === undefined ? true : _ref$isTitleStatic,
	            _ref$titleOffset = _ref.titleOffset,
	            titleOffset = _ref$titleOffset === undefined ? 0 : _ref$titleOffset;
	
	        _classCallCheck(this, GroupCore);
	
	        // stickyHeader是一个内部状态,保存了当前吸顶title的位置和key
	        var _this = _possibleConstructorReturn(this, (GroupCore.__proto__ || Object.getPrototypeOf(GroupCore)).call(this, 'grouplist'));
	
	        _this.stickyHeader = null;
	        _this.isTitleStatic = isTitleStatic;
	        // 调用initialize过程,这个过程在componentWillReceiveProps时也会被调用,可以init/reset组件的状态
	        _this.initialize({
	            offsetY: offsetY,
	            dataSource: dataSource,
	            sort: sort,
	            infinite: infinite,
	            staticSectionHeight: staticSectionHeight,
	            itemHeight: itemHeight,
	            titleHeight: titleHeight,
	            titleOffset: titleOffset
	        });
	        return _this;
	    }
	
	    /**
	     * 初始化/重置组件的状态
	     * @param offsetY
	     * @param dataSource
	     * @param sort
	     * @param infinite
	     * @param itemHeight
	     * @param titleHeight
	     */
	
	
	    _createClass(GroupCore, [{
	        key: 'initialize',
	        value: function initialize(_ref2) {
	            var _this2 = this;
	
	            var offsetY = _ref2.offsetY,
	                dataSource = _ref2.dataSource,
	                _ref2$sort = _ref2.sort,
	                sort = _ref2$sort === undefined ? this.sortFunc : _ref2$sort,
	                _ref2$infinite = _ref2.infinite,
	                infinite = _ref2$infinite === undefined ? this.infinite : _ref2$infinite,
	                _ref2$staticSectionHe = _ref2.staticSectionHeight,
	                staticSectionHeight = _ref2$staticSectionHe === undefined ? null : _ref2$staticSectionHe,
	                _ref2$itemHeight = _ref2.itemHeight,
	                itemHeight = _ref2$itemHeight === undefined ? this.itemHeight : _ref2$itemHeight,
	                _ref2$titleHeight = _ref2.titleHeight,
	                titleHeight = _ref2$titleHeight === undefined ? this.titleHeight : _ref2$titleHeight,
	                _ref2$titleOffset = _ref2.titleOffset,
	                titleOffset = _ref2$titleOffset === undefined ? this.titleOffset : _ref2$titleOffset;
	
	            this.infinite = infinite;
	            this.itemHeight = itemHeight;
	            this.titleHeight = titleHeight;
	            this.titleOffset = titleOffset;
	            this.currentGroup = {};
	            this.dataSource = this.renderData(dataSource, itemHeight, titleHeight, sort);
	            this.staticSectionHeight = staticSectionHeight;
	            this.groupTitles = this.getTitles();
	            this.isHeightFixed = this.dataSource.every(function (item) {
	                return _this2.getAttr(item, 'height') != null;
	            }) || !infinite;
	            this.offsetY = this.isHeightFixed ? offsetY : this.offsetY;
	        }
	
	        /**
	         * 调用initalize并触发change事件让组件更新,在componentWillReceiveProps中调用
	         * @param dataSource
	         * @param sortFunc
	         * @param infinite
	         * @param offsetY
	         */
	
	    }, {
	        key: 'refresh',
	        value: function refresh(_ref3) {
	            var _ref3$dataSource = _ref3.dataSource,
	                dataSource = _ref3$dataSource === undefined ? this.dataSource : _ref3$dataSource,
	                _ref3$sort = _ref3.sort,
	                sort = _ref3$sort === undefined ? this.sortFunc : _ref3$sort,
	                _ref3$infinite = _ref3.infinite,
	                infinite = _ref3$infinite === undefined ? this.infinite : _ref3$infinite,
	                _ref3$staticSectionHe = _ref3.staticSectionHeight,
	                staticSectionHeight = _ref3$staticSectionHe === undefined ? this.staticSectionHeight : _ref3$staticSectionHe,
	                _ref3$offsetY = _ref3.offsetY,
	                offsetY = _ref3$offsetY === undefined ? this.offsetY : _ref3$offsetY,
	                _ref3$titleHeight = _ref3.titleHeight,
	                titleHeight = _ref3$titleHeight === undefined ? this.titleHeight : _ref3$titleHeight,
	                _ref3$titleOffset = _ref3.titleOffset,
	                titleOffset = _ref3$titleOffset === undefined ? this.titleOffset : _ref3$titleOffset;
	
	            this.initialize({ offsetY: offsetY, dataSource: dataSource, sort: sort, infinite: infinite, staticSectionHeight: staticSectionHeight, titleHeight: titleHeight, titleOffset: titleOffset });
	            this.emitEvent('refresh', this.dataSource, this.groupTitles);
	        }
	
	        /**
	         * 处理数据源,计算出数据源的所有title并插入
	         * @param dataSource
	         * @param itemHeight
	         * @param titleHeight
	         * @param sortFunc
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'renderData',
	        value: function renderData(dataSource) {
	            var itemHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.itemHeight;
	
	            var _this3 = this;
	
	            var titleHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.titleHeight;
	            var sortFunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.sortFunc;
	
	            if (!(0, _util.isArrayLike)(dataSource)) {
	                if (typeof dataSource.toArray === 'function') {
	                    dataSource = dataSource.toArray();
	                } else {
	                    throw new Error('yo-grouplist: dataSource 必须为（类）数组或者 Immutable List!');
	                }
	            }
	
	            this.dataSource = this.insertGroupTitles(dataSource, this.extractGroupKeys(dataSource, sortFunc)).map(function (item) {
	                var height = null;
	                if (item._type === 'groupTitle') {
	                    height = titleHeight;
	                } else if (_this3.getAttr(item, 'height')) {
	                    // 优先读取item中的height属性
	                    height = _this3.getAttr(item, 'height');
	                } else {
	                    // 否则读取itemHeight属性
	                    height = itemHeight;
	                }
	                return item._type === 'groupTitle' ? _this3.setAttr(item, 'height', height) : {
	                    srcData: item,
	                    height: height,
	                    key: _this3.getAttr(item, 'key')
	                };
	            });
	            return this.dataSource;
	        }
	
	        /**
	         * 从数据源中提取出所有groupKey并根据sortFunc排序
	         * @param dataSource
	         * @param sortFunc
	         * @returns {Array.<string>}
	         */
	
	    }, {
	        key: 'extractGroupKeys',
	        value: function extractGroupKeys(dataSource, sortFunc) {
	            var _this4 = this;
	
	            var keyListWithoutNotGrouped = dataSource.map(function (item) {
	                return _this4.getAttr(item, 'groupKey');
	            }).filter(function (key) {
	                return key !== 'notGrouped';
	            }).reduce(function (acc, groupKey) {
	                if (acc.find(function (it) {
	                    return it === groupKey;
	                }) == null) {
	                    acc.push(groupKey);
	                }
	                return acc;
	            }, []);
	
	            if (sortFunc) {
	                keyListWithoutNotGrouped = keyListWithoutNotGrouped.sort(sortFunc);
	            }
	
	            this.groupKeys = ['notGrouped'].concat(keyListWithoutNotGrouped);
	            return this.groupKeys;
	        }
	
	        /**
	         * 将提取出的title与数据源merge,形成新的数据源
	         * @param dataSource
	         * @param groupKeys
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'insertGroupTitles',
	        value: function insertGroupTitles(dataSource, groupKeys) {
	            var _this5 = this;
	
	            return groupKeys.reduce(function (acc, key) {
	                var title = {
	                    _type: 'groupTitle',
	                    groupKey: key,
	                    key: 'group_title_' + key + (_this5.isTitleStatic ? '' : '_' + ++GroupCore.guid)
	                };
	                var ret = acc.concat(title, dataSource.filter(function (it) {
	                    return _this5.getAttr(it, 'groupKey') === key;
	                }));
	
	                return key !== 'notGrouped' ? ret : ret.filter(function (item) {
	                    return !(item._type === 'groupTitle' && _this5.getAttr(item, 'groupKey') === 'notGrouped');
	                });
	            }, []);
	        }
	
	        /**
	         * 从数据源中获取所有title
	         * @param dataSource
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'getTitles',
	        value: function getTitles() {
	            var dataSource = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.dataSource;
	
	            return dataSource.filter(function (item) {
	                return item._type === 'groupTitle';
	            });
	        }
	
	        /**
	         * 更新title的高度
	         * 在无穷列表和静态列表模式中,titleHeight都是dom渲染之后才获取到的,这个高度会被用来计算stickyHeader的偏移量
	         * @param item
	         * @param domNode
	         */
	
	    }, {
	        key: 'updateGroupTitle',
	        value: function updateGroupTitle(item, domNode) {
	            var _this6 = this;
	
	            if (item._type === 'groupTitle') {
	                if (!this.infinite) {
	                    item = Object.assign({}, item, {
	                        _translateY: domNode.offsetTop,
	                        height: domNode.offsetHeight
	                    });
	                }
	                item = Object.assign(item, {
	                    display: getComputedStyle(domNode).getPropertyValue('display')
	                });
	
	                this.groupTitles = this.groupTitles.map(function (title) {
	                    return _this6.getAttr(title, 'groupKey') === _this6.getAttr(item, 'groupKey') ? item : title;
	                });
	                return this.groupTitles;
	            }
	            return null;
	        }
	
	        /**
	         * 根据当前列表的偏移量更新吸顶title的位置和内容
	         * @param offsetY
	         */
	
	    }, {
	        key: 'refreshStickyHeader',
	        value: function refreshStickyHeader() {
	            var offsetY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offsetY;
	
	            offsetY = offsetY - this.staticSectionHeight;
	            var title = this.getCurrentTitle(offsetY),
	                offset = this.getCurrentTitleOffsetY(offsetY),
	                groupKey = title ? this.getAttr(title, 'groupKey') : null;
	
	            if (this.currentGroup.offset !== offset || this.currentGroup.key !== groupKey) {
	                this.currentGroup = { key: groupKey, offset: offset };
	                this.stickyHeader = {
	                    title: title,
	                    offset: offset
	                };
	
	                this.emitEvent('refreshStickyHeader', this.stickyHeader);
	            }
	        }
	
	        /**
	         * 根据列表的偏移量计算吸顶title的偏移量
	         * @param offsetY
	         * @returns {number}
	         */
	
	    }, {
	        key: 'getCurrentTitleOffsetY',
	        value: function getCurrentTitleOffsetY(offsetY) {
	            var nextTitle = this.getNextTitle(offsetY),
	                currentTitle = this.getCurrentTitle(offsetY),
	                nextTitleTranslateY = nextTitle && nextTitle._translateY;
	
	            offsetY = offsetY + this.titleOffset;
	            if (nextTitle && offsetY > nextTitleTranslateY - currentTitle.height && offsetY < nextTitleTranslateY) {
	                return -(currentTitle.height - (nextTitleTranslateY - offsetY));
	            }
	
	            return 0;
	        }
	
	        /**
	         * 根据列表偏移量获取当前吸顶的title的下一个title
	         * @param offsetY
	         * @param groupTitles
	         * @returns {Object}
	         */
	
	    }, {
	        key: 'getNextTitle',
	        value: function getNextTitle(offsetY) {
	            var groupTitles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.groupTitles;
	
	            var currentTitle = this.getCurrentTitle(offsetY),
	                currentTitleIndex = groupTitles.indexOf(currentTitle);
	
	            if (currentTitleIndex !== -1 && currentTitleIndex !== groupTitles.length - 1) {
	                return groupTitles[currentTitleIndex + 1];
	            }
	
	            return null;
	        }
	
	        /**
	         * 根据偏移量获取当前被吸顶的title
	         * @param offsetY
	         * @param groupTitles
	         * @returns {Object}
	         */
	
	    }, {
	        key: 'getCurrentTitle',
	        value: function getCurrentTitle(offsetY) {
	            var _this7 = this;
	
	            var groupTitles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.groupTitles;
	
	            var titlesAboveOffsetY = groupTitles.filter(function (title) {
	                return title._translateY != null && title._translateY <= offsetY + _this7.titleOffset;
	            });
	            return titlesAboveOffsetY[titlesAboveOffsetY.length - 1];
	        }
	
	        /**
	         * 根据groupkey返回该分组title的translateY(用来做分组导航)
	         * @param groupKey
	         * @returns {Number}
	         */
	
	    }, {
	        key: 'getGroupOffsetY',
	        value: function getGroupOffsetY(groupKey) {
	            var _this8 = this;
	
	            var targetGroup = this.groupTitles.find(function (title) {
	                return _this8.getAttr(title, 'groupKey') === groupKey;
	            });
	
	            if (targetGroup) {
	                return targetGroup._translateY + this.staticSectionHeight;
	            }
	
	            return null;
	        }
	    }]);
	
	    return GroupCore;
	}(_ComponentCore3.default);
	
	GroupCore.guid = -1;
	exports.default = GroupCore;

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 分组导航组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var defaultProps = {
	    onNavItemFocus: function onNavItemFocus() {}
	};
	
	var ItemNavBar = function (_Component) {
	    _inherits(ItemNavBar, _Component);
	
	    function ItemNavBar(props) {
	        _classCallCheck(this, ItemNavBar);
	
	        var _this = _possibleConstructorReturn(this, (ItemNavBar.__proto__ || Object.getPrototypeOf(ItemNavBar)).call(this, props));
	
	        _this.navItemList = [];
	        return _this;
	    }
	
	    _createClass(ItemNavBar, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.containerDom) {
	                this.baseY = this.containerDom.getBoundingClientRect().top;
	            }
	        }
	
	        /**
	         * 完全根据title列表的引用是否改变来决定是否render
	         * @param props
	         * @returns {boolean}
	         */
	
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(props) {
	            return props.list !== this.props.list;
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            if (this.containerDom) {
	                this.baseY = this.containerDom.getBoundingClientRect().top;
	            }
	        }
	
	        /**
	         * 导航项目被hover时触发的回调
	         * @param item
	         */
	
	    }, {
	        key: 'onNavItemFocus',
	        value: function onNavItemFocus(item) {
	            var onNavItemFocus = this.props.onNavItemFocus;
	
	            onNavItemFocus(item);
	        }
	
	        /**
	         * 给导航栏容器绑定的onTouchStart事件
	         * @param evt
	         */
	
	    }, {
	        key: 'onNavBarStart',
	        value: function onNavBarStart(evt) {
	            evt.preventDefault();
	
	            var target = evt.target;
	
	            if (target) {
	                var focusedItem = this.getNavItemByDom(target);
	                var onNavItemFocus = this.props.onNavItemFocus;
	
	                onNavItemFocus(focusedItem);
	            }
	        }
	
	        /**
	         * 给导航栏容器绑定的move事件,随着move的改变,导航栏项目的hover状态也随着改变并触发对应组件的onNavItemFocus
	         * @param evt
	         */
	
	    }, {
	        key: 'onNavBarMove',
	        value: function onNavBarMove(evt) {
	            evt.preventDefault();
	
	            var offsetY = evt.touches && evt.touches[0].clientY - this.baseY;
	
	            if (!isNaN(offsetY)) {
	                var focusedItem = this.getNavItemByOffsetY(offsetY);
	                var onNavItemFocus = this.props.onNavItemFocus;
	
	                onNavItemFocus(focusedItem);
	            }
	        }
	
	        /**
	         * 获取当前hover住的导航项
	         * @param offsetY
	         * @returns {*}
	         */
	
	    }, {
	        key: 'getNavItemByOffsetY',
	        value: function getNavItemByOffsetY(offsetY) {
	            var _this2 = this;
	
	            var ret = null;
	            if (offsetY <= 0 && this.navItemList.length > 0) {
	                ret = this.navItemList[0];
	            } else {
	                ret = this.navItemList.find(function (item, i) {
	                    var list = _this2.navItemList;
	                    if (i < list.length - 1) {
	                        return item.top <= offsetY && list[i + 1].top > offsetY;
	                    } else if (item.top <= offsetY) {
	                        return true;
	                    }
	                    return false;
	                });
	            }
	            return ret;
	        }
	
	        /**
	         * 根据dom节点获取对应的导航项组件
	         * @param dom
	         * @returns {*}
	         */
	
	    }, {
	        key: 'getNavItemByDom',
	        value: function getNavItemByDom(dom) {
	            return this.navItemList.find(function (item) {
	                return item.dom === dom;
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var _props = this.props,
	                renderItem = _props.renderItem,
	                list = _props.list;
	            // 每次itemlist可能发生变化时必须重置navItemList
	
	            this.navItemList = [];
	
	            return _react2.default.createElement(
	                'ul',
	                {
	                    className: 'index',
	                    ref: function ref(dom) {
	                        _this3.containerDom = dom;
	                    },
	                    onTouchStart: function onTouchStart(evt) {
	                        return _this3.onNavBarStart(evt);
	                    },
	                    onTouchMove: function onTouchMove(evt) {
	                        return _this3.onNavBarMove(evt);
	                    }
	                },
	                list.map(function (groupTitle, i) {
	                    return _react2.default.createElement(
	                        'li',
	                        {
	                            ref: function ref(dom) {
	                                if (dom) {
	                                    _this3.navItemList[i] = {
	                                        dom: dom,
	                                        groupKey: groupTitle.groupKey,
	                                        top: dom.offsetTop
	                                    };
	                                }
	                            },
	                            key: groupTitle.groupKey
	                        },
	                        renderItem(groupTitle.groupKey)
	                    );
	                })
	            );
	        }
	    }]);
	
	    return ItemNavBar;
	}(_react.Component);
	
	ItemNavBar.propTypes = {
	    list: _propTypes2.default.array,
	    onNavItemFocus: _propTypes2.default.func,
	    renderItem: _propTypes2.default.func
	};
	exports.default = ItemNavBar;
	
	
	ItemNavBar.defaultProps = defaultProps;

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(73);
	
	var _carousel = __webpack_require__(74);
	
	var _carousel2 = _interopRequireDefault(_carousel);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _carousel2.default;

/***/ },
/* 73 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _aniScrollx = __webpack_require__(75);
	
	var _aniScrollx2 = _interopRequireDefault(_aniScrollx);
	
	var _carouselItem = __webpack_require__(76);
	
	var _carouselItem2 = _interopRequireDefault(_carouselItem);
	
	var _carouselLocat = __webpack_require__(79);
	
	var _carouselLocat2 = _interopRequireDefault(_carouselLocat);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Carousel
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.8
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 走马灯组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 支持用户自定义动画对象，支持用户自定义css动画
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 支持用户自定义子节点
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 默认动画：
	横向滚动动画
	为当前页加上on的类名，因此可以附加css动画效果。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 默认走马灯子节点：
	支持图片懒加载
	图片加载失败的替换图模板
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 查看Demo获得实例：
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 使用自定义动画实现图片查看器
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 内置动画配合css动画效果
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 使用注意：
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * - `Carousel`组件的父节点需要有宽度，`Carousel`组件默认宽度为‘100%’，如果父节点没有宽度会导致默认滚动动画失效。
	`Carousel`组件不能直接嵌套在`Touchable`组件中，请使用`CarouselItem`的`onTap`来给它的Item绑定tap事件回调，
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 或者用`Touchable`组件包裹Item。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eva.li
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./carousel.md}{instruUrl: carousel/index.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	// import PureRenderMixin from 'react-addons-pure-render-mixin';
	
	
	var Carousel = function (_PureComponent) {
	    _inherits(Carousel, _PureComponent);
	
	    function Carousel(props) {
	        _classCallCheck(this, Carousel);
	
	        var _this = _possibleConstructorReturn(this, (Carousel.__proto__ || Object.getPrototypeOf(Carousel)).call(this, props));
	
	        _this.state = {
	            page: 1
	        };
	        // this.shouldComponentUpdate = PureRenderMixin.shouldComponentUpdate.bind(this);
	        _this.dragDom = null;
	        _this.dragEvt = null;
	        return _this;
	    }
	
	    _createClass(Carousel, [{
	        key: 'getChildContext',
	        value: function getChildContext() {
	            return {
	                currentPage: this.state.page,
	                pagesNum: this.props.children.length
	            };
	        }
	    }, {
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            this.ani = Object.assign({}, this.props.aniObj || (0, _aniScrollx2.default)());
	            this.aniObj = {
	                delay: this.props.delay,
	                speed: this.props.speed,
	                pageNow: 1,
	                pagesNum: this.props.children.length,
	                aniSpeed: this.props.aniSpeed,
	                loop: this.props.loop,
	                operationTimer: 0,
	                touchstartLocation: {},
	                touchendLocation: {}
	            };
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.widgetDOM) {
	                this.aniObj.stageDOM = this.widgetDOM.parentNode;
	                this.aniObj.width = this.widgetDOM.clientWidth;
	                this.aniObj.containerDOM = this.widgetDOM.querySelector('.cont');
	            } else {
	                this.aniObj.stageDOM = null;
	                this.aniObj.width = 0;
	                this.aniObj.containerDOM = null;
	            }
	            this.arrive(this.props.defaultPage, false);
	            this.launchAuto();
	            this.handleResize = this.handleResize.bind(this);
	            window.addEventListener('resize', this.handleResize);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(props) {
	            this.aniObj.delay = props.delay;
	            this.aniObj.speed = props.speed;
	            this.aniObj.pagesNum = props.children.length;
	            this.aniObj.aniSpeed = props.aniSpeed;
	            this.aniObj.loop = props.loop;
	        }
	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate(nextProps, nextState) {
	            if (nextState.page !== this.state.page) {
	                this.props.beforeChange(nextState.page);
	            }
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate(prevProps, prevState) {
	            if (prevState.page !== this.state.page) {
	                this.props.afterChange(this.state.page);
	            }
	            if (prevProps.autoplay !== this.props.autoplay || prevProps.loop !== this.props.loop) {
	                this.pause();
	                this.play();
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.pause();
	            window.removeEventListener('resize', this.handleResize);
	        }
	        /**
	         * @description 当元素容器宽度发生变化时调用，用于重设组件内容器 `translate` 的值
	         * @method handleResize
	         * @version 3.0.8
	         */
	
	    }, {
	        key: 'handleResize',
	        value: function handleResize() {
	            if (this.widgetDOM) {
	                this.aniObj.width = this.widgetDOM.clientWidth;
	            } else {
	                this.aniObj.width = 0;
	            }
	            this.arrive(this.state.page, false);
	            this.forceUpdate();
	        }
	        /**
	         * @description 到达方法
	         * @method arrive
	         * @param  {number} num 到达的页数
	         * @param {isAni} boolean 是否需要动画
	         */
	
	    }, {
	        key: 'arrive',
	        value: function arrive(num) {
	            var isAni = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            this.aniObj.operationTimer = num - 1;
	            this.pause();
	            if (num > 0 && num <= _react2.default.Children.count(this.props.children)) {
	                var page = this.ani.arrive(this.aniObj, num, isAni);
	                this.setState({
	                    page: page
	                });
	                this.aniObj.pageNow = page;
	            }
	            this.play();
	        }
	    }, {
	        key: 'launchAuto',
	        value: function launchAuto() {
	            var _this2 = this;
	
	            if (this.autoplay) {
	                window.clearInterval(this.autoplay);
	            }
	            if (this.props.autoplay && (this.props.loop || this.aniObj.pageNow < this.aniObj.pagesNum)) {
	                this.autoplay = window.setInterval(function () {
	                    _this2.next();
	                }, this.props.delay * 1000);
	            }
	        }
	    }, {
	        key: 'format',
	        value: function format(children) {
	            var childrenList = children;
	            if (children[0].type === _carouselItem2.default) {
	                childrenList = _react2.default.Children.map(children, function (childElement, index) {
	                    return _react2.default.cloneElement(childElement, {
	                        index: index + 1
	                    });
	                });
	            }
	            return this.ani.handleData(this.aniObj, childrenList);
	        }
	
	        // getEndX(distanceX) {
	        //     let pageNow = this.aniObj.pageNow;
	        //     if (Math.abs(distanceX) < 40) {
	        //         return -(pageNow - 1);
	        //     }
	        //     if (distanceX > 0) {
	        //         pageNow = pageNow - 2;
	        //         this.aniObj.operationTimer --;
	        //     } else {
	        //         this.aniObj.operationTimer ++;
	        //     }
	        //     return -pageNow;
	        // }
	        /**
	         * @method play
	         * @description 播放动画
	         */
	
	    }, {
	        key: 'play',
	        value: function play() {
	            this.launchAuto();
	        }
	
	        /**
	         * @method pause
	         * @description 暂停动画
	         */
	
	    }, {
	        key: 'pause',
	        value: function pause() {
	            if (this.autoplay) {
	                window.clearInterval(this.autoplay);
	            }
	        }
	
	        /**
	         * @method prev
	         * @description 播放上一页
	         */
	
	    }, {
	        key: 'prev',
	        value: function prev() {
	            this.aniObj.operationTimer--;
	            var page = this.ani.prev(this.aniObj);
	            this.setState({ page: page });
	            this.aniObj.pageNow = page;
	        }
	
	        /**
	         * @method next
	         * @description 播放下一页
	         */
	
	    }, {
	        key: 'next',
	        value: function next() {
	            this.aniObj.operationTimer++;
	            var page = this.ani.next(this.aniObj);
	            this.setState({ page: page });
	            this.aniObj.pageNow = page;
	            if (page >= this.aniObj.pagesNum && !this.props.loop) {
	                this.pause();
	            }
	        }
	    }, {
	        key: 'handleTouchStart',
	        value: function handleTouchStart(e) {
	            e.preventDefault();
	            this.pause();
	            this.aniObj.touchstartList = e.touches[0];
	            this.aniObj.touchstartLocation = [e.touches[0].clientX, e.touches[0].clientY];
	            this.ani.touchstart(this.aniObj);
	        }
	    }, {
	        key: 'handleTouchMove',
	        value: function handleTouchMove(e) {
	            e.preventDefault();
	            this.aniObj.touchmoveList = e.touches[0];
	            this.aniObj.touchmoveLocation = [e.touches[0].clientX, e.touches[0].clientY];
	
	            this.ani.touchmove(this.aniObj);
	        }
	    }, {
	        key: 'handleTouchEnd',
	        value: function handleTouchEnd(e) {
	            e.preventDefault();
	            this.aniObj.touchendList = e.touches.length > 0 ? e.touches[0] : this.aniObj.touchmoveList;
	            if (!this.aniObj.touchendList) {
	                this.play();
	                return;
	            }
	            this.aniObj.touchendLocation = [this.aniObj.touchendList.clientX, this.aniObj.touchendList.clientY];
	            this.aniObj.pageNow = this.ani.touchend(this.aniObj);
	            this.setState({
	                page: this.aniObj.pageNow
	            });
	            this.play();
	            this.clearTouchList();
	        }
	    }, {
	        key: 'handleTouchCancle',
	        value: function handleTouchCancle(e) {
	            e.preventDefault();
	            if (this.ani.touchcancel) {
	                this.ani.touchcancel(this.aniObj);
	                this.play();
	                return;
	            }
	            this.aniObj.touchendList = this.aniObj.touchmoveList || this.aniObj.touchstartList;
	            this.aniObj.touchendLocation = [this.aniObj.touchendList.clientX, this.aniObj.touchendList.clientY];
	            this.aniObj.pageNow = this.ani.touchend(this.aniObj);
	            this.setState({
	                page: this.aniObj.pageNow
	            });
	            this.clearTouchList();
	        }
	    }, {
	        key: 'clearTouchList',
	        value: function clearTouchList() {
	            Object.assign(this.aniObj, {
	                touchstartList: [],
	                touchmoveList: [],
	                touchstartLocation: [],
	                touchmoveLocation: [],
	                touchendLocation: []
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var classList = ['yo-carousel'];
	            if (this.props.extraClass != null) {
	                classList.push(this.props.extraClass);
	            }
	            var children = this.format(this.props.children);
	            return _react2.default.createElement(
	                'div',
	                {
	                    className: classList.join(' '),
	                    ref: function ref(node) {
	                        if (node) {
	                            _this3.widgetDOM = node;
	                        }
	                    },
	                    onTouchStart: function onTouchStart(evt) {
	                        _this3.props.disable || _this3.handleTouchStart(evt);
	                    },
	                    onTouchMove: function onTouchMove(evt) {
	                        _this3.props.disable || _this3.handleTouchMove(evt);
	                    },
	                    onTouchEnd: function onTouchEnd(evt) {
	                        _this3.props.disable || _this3.handleTouchEnd(evt);
	                    },
	                    onTouchCancel: function onTouchCancel(evt) {
	                        // this.dragEvt.dragCancel(evt)
	                        _this3.props.disable || _this3.handleTouchCancle(evt);
	                    }
	                },
	                _react2.default.createElement(
	                    'ul',
	                    { className: 'cont' },
	                    children
	                ),
	                this.props.dots ? _react2.default.createElement(_carouselLocat2.default, { num: this.aniObj.pagesNum, page: this.state.page, onItemTap: function onItemTap(num) {
	                        _this3.arrive(num);
	                    } }) : null
	            );
	        }
	    }]);
	
	    return Carousel;
	}(_react.PureComponent);
	
	Carousel.propTypes = {
	    /**
	     * @property dots
	     * @type Bool
	     * @default true
	     * @description 是否使用默认坐标展示，详细可以查看demo基础用法展示。
	     */
	    dots: _propTypes2.default.bool,
	    /**
	     * @property autoplay
	     * @type Bool
	     * @default true
	     * @description 是否自动换页。
	     */
	    autoplay: _propTypes2.default.bool,
	    /**
	     * @property loop
	     * @type Bool
	     * @default true
	     * @description 是否循环 循环防范受动画影响，因此循环的具体方案由动画对象提供。
	     */
	    loop: _propTypes2.default.bool,
	    /**
	     * @property beforeChange
	     * @type Function
	     * @param {num} 变化后页面索引
	     * @description 页面切换前提供的回调函数，索引值在carousel.children中设置从1开始。
	     */
	    beforeChange: _propTypes2.default.func,
	    /**
	     * @property afterChange
	     * @type Function
	     * @param {num} 变化后页面索引
	     * @description 页面切换后提供的回调函数，索引值在carousel.children中设置从1开始。
	     */
	    afterChange: _propTypes2.default.func,
	    /**
	     * @property extraClass
	     * @type String
	     * @description 为组件根节点提供额外的class。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property delay
	     * @type Number
	     * @description 自动播放时动画间隔，单位为s，因动画的实现方式而不同。
	     */
	    delay: _propTypes2.default.number,
	    /**
	     * @property speed
	     * @type Number
	     * @description 动画播放速度，单位为s,因动画的实现方式而不同。
	     */
	    speed: _propTypes2.default.number,
	    /**
	     * @property defaultPage
	     * @type Number
	     * @description 组件渲染时起始页面。
	     */
	    defaultPage: _propTypes2.default.number,
	    /**
	     * @property aniSpeed
	     * @type Number
	     * @description 如果使用css动画，该值为动画播放时间，用于在滚动循环时计算动画时机。
	     */
	    aniSpeed: _propTypes2.default.number,
	    /**
	     * @property aniObj
	     * @type Object
	     * @description 自定义动画对象，自定义动画需要提供以下方法。
	     *
	     * - handleData（aniObj, children）用于组件渲染前对于子节点的处理；
	     * - touchstart(aniObj) 动画处理的touchstart事件；
	     * - touchmove(aniObj) 动画处理的touchmove事件；
	     * - touchend(aniObj) 动画处理的touchend事件；
	     * - touchcancel(aniObj)动画处理的touchcancel事件；
	     * - next(aniObj) 下一帧 需返回动画结束后的当前索引；
	     * - arrive（aniObj,num) 跳转；
	     * - prev(aniObj) 上一帧 动画结束后的当前索引；
	     *
	     * carousel组件提供了两种自定义动画，使用者可以按需引用：
	     * + aniCss动画使用改变Index层级的方式来展示当前页面。
	     * + aniInfinate动画用有限的节点数（3个）渲染无限数量节点，其实现类似于list组件infinte模式，相较于默认动画实现减少了dom节点的数量，增加了dom操作的次数，适用于实现图片查看器等dom节点多的场景。
	     *
	     * **aniObj格式**
	     *
	     * ```
	     * {
	     *    aniSpeed:0,
	     *    containerDOM: ul.cont, //节点
	     *    delay: 1,
	     *    loop: true,
	     *    operationTimer: 5, //操作数动画运动的绝对值，交由动画控制
	     *    pageNow: 5,
	     *    speed: .5,
	     *    stageDOM: div,
	     *    width: 375 //这里需注意宽度在组件mount后才有
	     *    touchstartLocation:e
	     *    touchendLocation:e
	     *    touchmoveLocation:e
	     * }
	     * ```
	     */
	    aniObj: _propTypes2.default.object,
	    /**
	     * @property children
	     * @type Element
	     * @description carousel的展示内容。
	     */
	    children: _propTypes2.default.array.isRequired,
	    /**
	     * @property disable
	     * @type Boolean
	     * @description 禁止动画响应手势操作
	     * @version 3.0.10
	     */
	    disable: _propTypes2.default.bool
	};
	Carousel.defaultProps = {
	    dots: true,
	    autoplay: true,
	    loop: true,
	    effect: 'scrollX',
	    delay: 1.5,
	    speed: 0.5,
	    defaultPage: 1,
	    aniSpeed: 0,
	    disable: false,
	    beforeChange: function beforeChange() {},
	    afterChange: function afterChange() {}
	};
	Carousel.childContextTypes = {
	    /**
	     * @property currentPage
	     * @type PropTypes.number
	     * @description 子组件通过context获取到currentPage，currentPage表示当前展示的page索引。
	     */
	    currentPage: _propTypes2.default.number,
	    /**
	     * @property pagesNum
	     * @type PropTypes.number
	     * @description 子组件通过context获取到pagesNum，pagesNum表示carousel组件children的数量。
	     */
	    pagesNum: _propTypes2.default.number
	};
	
	Carousel.CarouselItem = _carouselItem2.default;
	Carousel.Item = _carouselItem2.default;
	
	exports.default = Carousel;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _carouselItem = __webpack_require__(76);
	
	var _carouselItem2 = _interopRequireDefault(_carouselItem);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = function () {
	    var ALLOWANCEAngle = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.57;
	    var ALLOWANCEDistance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;
	    var movePercentage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	    var K = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.2;
	
	    var _getRAF = (0, _util.getRAF)(),
	        rAF = _getRAF.rAF,
	        cancelrAF = _getRAF.cancelrAF;
	
	    var transitionendEndName = (0, _util.whichTransitionEventPrefix)() + 'end';
	    var ani = {
	        aniQue: [],
	        handleData: function handleData(_ref, children) {
	            var loop = _ref.loop,
	                pageNow = _ref.pageNow;
	
	            var newChildren = _react2.default.Children.toArray(children);
	            if (loop) {
	                var len = children.length;
	                var lastfakeDomStyle = {
	                    key: 0
	                };
	                var firstFakeDomStyle = {
	                    key: -1
	                };
	                if (children[0].type === _carouselItem2.default) {
	                    lastfakeDomStyle.index = len;
	                    lastfakeDomStyle.extraClass = children[len - 1].props.extraClass ? children[len - 1].props.extraClass + ' extra-item' : 'extra-item';
	                    firstFakeDomStyle.index = 1;
	                } else {
	                    lastfakeDomStyle.className = children[len - 1].props.className ? children[len - 1].props.className + ' extra-item' : 'extra-item';
	                }
	                var header = _react2.default.cloneElement(children[len - 1], lastfakeDomStyle);
	                var footer = _react2.default.cloneElement(children[0], firstFakeDomStyle);
	                newChildren.unshift(header);
	                newChildren.push(footer);
	            }
	            return newChildren;
	        },
	        _checkTouchAngle: function _checkTouchAngle(prev, next) {
	            var changeX = prev[0] - next[0];
	            var changeY = next[1] - prev[1];
	            var tan = Math.abs(changeX) / Math.abs(changeY);
	            return tan > ALLOWANCEAngle;
	        },
	        touchstart: function touchstart() {},
	        touchmove: function touchmove(_ref2) {
	            var touchstartLocation = _ref2.touchstartLocation,
	                touchmoveLocation = _ref2.touchmoveLocation,
	                pageNow = _ref2.pageNow,
	                containerDOM = _ref2.containerDOM,
	                width = _ref2.width,
	                pagesNum = _ref2.pagesNum,
	                loop = _ref2.loop;
	
	            if (!this._checkTouchAngle(touchstartLocation, touchmoveLocation)) {
	                return;
	            }
	            var k = this._caculateTranslate({
	                pageNow: pageNow,
	                pagesNum: pagesNum,
	                loop: loop
	            }, touchstartLocation[0] - touchmoveLocation[0]);
	            var translateX = (pageNow - 1) * width * movePercentage + k;
	            this._addCss({
	                dom: containerDOM,
	                speed: 0,
	                translateX: -translateX,
	                reset: true,
	                width: width
	            });
	        },
	        _caculateTranslate: function _caculateTranslate(_ref3, x) {
	            var loop = _ref3.loop,
	                pageNow = _ref3.pageNow,
	                pagesNum = _ref3.pagesNum;
	
	            if (!loop & (pageNow === 1 && x < 0 || pageNow === pagesNum && x > 0)) return K * x;
	            return x;
	        },
	        touchend: function touchend(aniObj) {
	            var touchstartLocation = aniObj.touchstartLocation,
	                touchendLocation = aniObj.touchendLocation,
	                pageNow = aniObj.pageNow;
	
	            var distanceX = touchendLocation[0] - touchstartLocation[0];
	            var newpageNow = pageNow;
	            if (Math.abs(distanceX) > ALLOWANCEDistance && this._checkTouchAngle(touchstartLocation, touchendLocation)) {
	                newpageNow = distanceX > 0 ? pageNow - 1 : pageNow + 1;
	            } else {
	                newpageNow = pageNow;
	            }
	            return this.checkAni(aniObj, newpageNow);
	        },
	        checkAni: function checkAni(aniObj, pageNow) {
	            var pagesNum = aniObj.pagesNum,
	                speed = aniObj.speed,
	                containerDOM = aniObj.containerDOM,
	                loop = aniObj.loop,
	                width = aniObj.width;
	
	            var self = this;
	            var translateX = width * (1 - pageNow) * movePercentage;
	            var newpageNow = pageNow;
	            if (pageNow < 1 || pageNow > pagesNum) {
	                if (loop) {
	                    containerDOM.addEventListener(transitionendEndName, function test() {
	                        var translate = pageNow === 0 ? width * (1 - pagesNum) * movePercentage : 0;
	                        self._addCss({
	                            dom: containerDOM,
	                            reset: true,
	                            translateX: translate,
	                            width: width
	                        });
	                        containerDOM.removeEventListener(transitionendEndName, test);
	                    }, false);
	                    newpageNow = pageNow === 0 ? pagesNum : 1;
	                } else {
	                    newpageNow = pageNow < 1 ? 1 : pagesNum;
	                    translateX = width * (1 - newpageNow) * movePercentage;
	                }
	            }
	            this._addCss({
	                dom: containerDOM,
	                reset: false,
	                speed: speed,
	                translateX: translateX,
	                width: width
	            });
	            return newpageNow;
	        },
	        next: function next(aniObj) {
	            var pageNow = aniObj.pageNow;
	
	            var pageNext = pageNow + 1;
	            return this.checkAni(aniObj, pageNext);
	        },
	        prev: function prev(aniObj) {
	            var pageNow = aniObj.pageNow,
	                containerDOM = aniObj.containerDOM,
	                speed = aniObj.speed,
	                width = aniObj.width;
	
	            var pageNext = pageNow - 1;
	            var translateX = width * (1 - pageNext);
	            this._addCss({
	                dom: containerDOM,
	                speed: speed,
	                translateX: translateX
	            });
	            return this.checkAni(aniObj, pageNext);
	        },
	        arrive: function arrive(aniObj, num, isAni) {
	            if (num >= 1 && num <= aniObj.pagesNum) {
	                var translateX = (1 - num) * aniObj.width * movePercentage;
	                this._addCss({
	                    dom: aniObj.containerDOM,
	                    speed: 0.1,
	                    translateX: translateX,
	                    reset: !isAni,
	                    width: aniObj.width
	                });
	            } else {
	                console.warn('\u4F20\u5165carousel\u7EC4\u5EFA\u7684arrive\u65B9\u6CD5\u7684\u9875\u9762\u4E3A' + num + ',\u8BE5\u503C\u4E0D\u5408\u6CD5');
	            }
	            return num;
	        },
	        _addCss: function _addCss(_ref4) {
	            var dom = _ref4.dom,
	                _ref4$translateX = _ref4.translateX,
	                translateX = _ref4$translateX === undefined ? 0 : _ref4$translateX,
	                reset = _ref4.reset;
	
	            var that = this;
	            // 此处为Dom操作
	            this.aniQue.push({ translateX: translateX, reset: reset });
	            if (this.reqAni) {
	                cancelrAF(this.reqAni);
	            }
	            this.reqAni = rAF(function () {
	                if (!that.aniQue.length) return;
	                var last = that.aniQue.pop();
	                that.aniQue.length = 0;
	                if (last.reset) {
	                    dom.style.webkitTransition = 'none';
	                    dom.style.transition = 'none';
	                } else {
	                    dom.style.webkitTransition = '';
	                    dom.style.transition = '';
	                }
	                dom.style.webkitTransform = 'translate(' + parseInt(last.translateX, 10) + 'px, 0) translateZ(0)';
	                dom.style.transform = 'translate(' + parseInt(last.translateX, 10) + 'px, 0) translateZ(0)';
	                that.reqAni = null;
	            });
	        }
	    };
	    return ani;
	}; /**
	    * @function aniScrollX
	    * @description 水平滚动动画，适用于有限数量的滚动展示
	    * @param [ALLOWANCEAngle, ALLOWANCEDistance, movePercentage, K] 触发事件处理的手势角度tan绝对值； 触发翻页的水平位移默认为1； 位移系数；触底拖动系数默认为0.2；
	    */

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _reactAddonsShallowCompare = __webpack_require__(77);
	
	var _reactAddonsShallowCompare2 = _interopRequireDefault(_reactAddonsShallowCompare);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Carousel.CarouselItem
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.8
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description Carousel组件内部的Item组件，和普通的dom节点相比增加了懒加载图片功能。也可以使用`onTap`给Item绑定tap事件回调。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 你可以通过Carousel.CarouselItem来使用这个组件，或者引用`yo3/component/carousel/src/carouselItem`的js模块来使用。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	注意：`CarouselItem`不能和`Touchable`一起使用，请使用它的`onTap`属性来绑定事件回调。 **
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var ALLOWANCE = 1;
	var LOADED = 1;
	var UNLOAD = 0;
	var FAIL = 2;
	
	var CarouselItem = function (_Component) {
	    _inherits(CarouselItem, _Component);
	
	    function CarouselItem(props) {
	        _classCallCheck(this, CarouselItem);
	
	        var _this = _possibleConstructorReturn(this, (CarouselItem.__proto__ || Object.getPrototypeOf(CarouselItem)).call(this, props));
	
	        if (props.img) {
	            _this.state = {
	                img: 0
	            };
	        }
	        _this.handleTap = _this.handleTap.bind(_this);
	        _this.hasUnmount = false;
	        return _this;
	    }
	
	    _createClass(CarouselItem, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            this.lazyload(this.context.currentPage);
	        }
	    }, {
	        key: 'shouldComponentUpdate',
	        value: function shouldComponentUpdate(nextProps, nextState, nextContext) {
	            var propsChange = (0, _reactAddonsShallowCompare2.default)(this, nextProps, nextState);
	            var contextChange = this.context.currentPage !== nextContext.currentPage || this.context.pagesNum !== nextContext.pagesNum;
	            return propsChange || contextChange;
	        }
	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate(nextProps, nextState, nextContext) {
	            this.lazyload(nextContext.currentPage);
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.hasUnmount = true;
	        }
	    }, {
	        key: 'handleTap',
	        value: function handleTap(e) {
	            this.props.onTap(e);
	        }
	    }, {
	        key: 'loadImg',
	        value: function loadImg() {
	            var _this2 = this;
	
	            if (!this.props.img) {
	                return;
	            }
	            this.imgNode = new Image();
	            this.imgNode.onload = function () {
	                var imgState = void 0;
	                imgState = 1;
	                if (_this2.props.checkImgFun && !_this2.props.checkImgFun(_this2.imgNode)) {
	                    imgState = 2;
	                }
	                if (!_this2.hasUnmount) {
	                    _this2.setState({
	                        img: imgState
	                    });
	                }
	            };
	            this.imgNode.onerror = function () {
	                if (!_this2.hasUnmount) {
	                    _this2.setState({
	                        img: 2
	                    });
	                }
	            };
	            this.imgNode.src = this.props.img;
	        }
	    }, {
	        key: 'lazyload',
	        value: function lazyload(currentPage) {
	            if (this.state.img) {
	                return;
	            }
	            if (!this.props.lazyload) {
	                this.loadImg();
	            } else {
	                if (Math.abs(currentPage - this.props.index) <= ALLOWANCE || this.props.index === 1 || this.props.index === this.context.pagesNum) {
	                    this.loadImg();
	                }
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var img = null;
	            var classList = void 0;
	            var activeClass = {};
	            if (this.props.img) {
	                switch (this.state.img) {
	                    case LOADED:
	                        img = _react2.default.createElement('img', { alt: '', src: this.props.img, className: 'img', draggable: 'false' });
	                        break;
	                    case FAIL:
	                        img = _react2.default.createElement('img', { alt: '', src: this.props.errorImg, className: 'img', draggable: 'false' });
	                        break;
	                    case UNLOAD:
	                    default:
	                        img = this.props.loadingEle;
	                        break;
	                }
	            }
	            activeClass[this.props.activeClass] = this.context.currentPage === this.props.index;
	            if (this.props.extraClass) {
	                activeClass[this.props.extraClass] = true;
	            }
	            classList = (0, _classnames2.default)('item', activeClass);
	            return _react2.default.createElement(
	                _touchable2.default,
	                { onTap: this.handleTap, internalUse: true },
	                _react2.default.createElement(
	                    'li',
	                    { className: classList, style: this.props.style },
	                    this.props.renderContent ? this.props.renderContent(img) : img
	                )
	            );
	        }
	    }]);
	
	    return CarouselItem;
	}(_react.Component);
	
	CarouselItem.propTypes = {
	    /**
	     * @type String
	     * @property img
	     * @description 图片地址。
	     */
	    img: _propTypes2.default.string,
	    /**
	     * @type String
	     * @property errorImg
	     * @description 图片加载失败时的替换图片。
	     */
	    errorImg: _propTypes2.default.string,
	    /**
	     * @type Function
	     * @property checkImgFun
	     * @description 目标图片onload时触发进行判断的函数。
	     * @param 图片实例
	     */
	    checkImgFun: _propTypes2.default.func,
	    /**
	     * @type Function
	     * @property onTap
	     * @param {e} 事件对象，传入组件数据
	     * @description item点击事件处理函数。
	     */
	    onTap: _propTypes2.default.func,
	    /**
	     * @property renderContent
	     * @type Function
	     * @param 图片实例
	     * @version 3.0.7
	     * @description 当所需要的渲染内容不仅仅是一张图片的时候，通过此方法渲染内容，该方法的参数是经过懒加载判断的图片节点。
	     * ** 示例 **
	     * ```
	     *  dataList.map((item, index)=>{
	     *     return (<CarouselItem
	     *         key={index + 1}
	     *         {...item}
	     *         renderContent={(img) => (
	     *             <div className="unit">
	     *                 {img}
	     *                 <span>这是第{index}张图片</span>
	     *             </div>
	     *         )}
	     *     ></CarouselItem>);
	     * };
	     * ```
	     */
	    renderContent: _propTypes2.default.func,
	    /**
	     * @property extraClass
	     * @type String
	     * @description 为组件根节点提供额外的class。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @type Element
	     * @property loadingEle
	     * @description 图片加载时的loading Element。
	     */
	    loadingEle: _propTypes2.default.element,
	    /**
	     * @type Bool
	     * @property lazyload
	     * @description 是否需要图片懒加载。默认值为true,当前图片的前后两个节点图片被加载。
	     */
	    lazyload: _propTypes2.default.bool,
	    /**
	     * item是当前展示item的样式名
	     * @type String
	     * @property activeClass
	     * @description item是当前展示item的样式名，默认值为'on'。
	     */
	    activeClass: _propTypes2.default.string,
	    index: _propTypes2.default.number,
	    style: _propTypes2.default.object
	};
	CarouselItem.defaultProps = {
	    errorImg: '//s.qunarzz.com/mobile_search_touch/intention-search-h5/loading.gif',
	    loadingEle: null,
	    lazyload: true,
	    activeClass: 'on',
	    onTap: function onTap() {}
	};
	CarouselItem.contextTypes = {
	    currentPage: _propTypes2.default.number.isRequired,
	    pagesNum: _propTypes2.default.number.isRequired
	};
	exports.default = CarouselItem;

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @providesModule shallowCompare
	 */
	
	'use strict';
	
	var shallowEqual = __webpack_require__(78);
	
	/**
	 * Does a shallow comparison for props and state.
	 * See ReactComponentWithPureRenderMixin
	 * See also https://facebook.github.io/react/docs/shallow-compare.html
	 */
	function shallowCompare(instance, nextProps, nextState) {
	  return (
	    !shallowEqual(instance.props, nextProps) ||
	    !shallowEqual(instance.state, nextState)
	  );
	}
	
	module.exports = shallowCompare;


/***/ },
/* 78 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 *
	 * @typechecks
	 * 
	 */
	
	/*eslint-disable no-self-compare */
	
	'use strict';
	
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	
	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  // SameValue algorithm
	  if (x === y) {
	    // Steps 1-5, 7-10
	    // Steps 6.b-6.e: +0 != -0
	    // Added the nonzero y check to make Flow happy, but it is redundant
	    return x !== 0 || y !== 0 || 1 / x === 1 / y;
	  } else {
	    // Step 6.a: NaN == NaN
	    return x !== x && y !== y;
	  }
	}
	
	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */
	function shallowEqual(objA, objB) {
	  if (is(objA, objB)) {
	    return true;
	  }
	
	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }
	
	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	
	  if (keysA.length !== keysB.length) {
	    return false;
	  }
	
	  // Test for A's keys different from B.
	  for (var i = 0; i < keysA.length; i++) {
	    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }
	
	  return true;
	}
	
	module.exports = shallowEqual;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CarouselLocat = function (_Component) {
	    _inherits(CarouselLocat, _Component);
	
	    function CarouselLocat() {
	        _classCallCheck(this, CarouselLocat);
	
	        return _possibleConstructorReturn(this, (CarouselLocat.__proto__ || Object.getPrototypeOf(CarouselLocat)).apply(this, arguments));
	    }
	
	    _createClass(CarouselLocat, [{
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var liNodes = [];
	
	            var _loop = function _loop(i) {
	                liNodes.push(_react2.default.createElement(
	                    _touchable2.default,
	                    { onTap: function onTap() {
	                            _this2.props.onItemTap(i);
	                        }, key: i, internalUse: true },
	                    _react2.default.createElement('li', { className: _this2.props.page === i ? 'on' : '' })
	                ));
	            };
	
	            for (var i = 1; i <= this.props.num; i++) {
	                _loop(i);
	            }
	            return _react2.default.createElement(
	                'ul',
	                { className: 'index' },
	                liNodes
	            );
	        }
	    }]);
	
	    return CarouselLocat;
	}(_react.Component);
	
	CarouselLocat.propTypes = {
	    num: _propTypes2.default.number.isRequired,
	    page: _propTypes2.default.number.isRequired,
	    onItemTap: _propTypes2.default.func.isRequired
	};
	exports.default = CarouselLocat;

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(81);
	
	var _confirm = __webpack_require__(38);
	
	var _confirm2 = _interopRequireDefault(_confirm);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _confirm2.default;

/***/ },
/* 81 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(83);
	
	var _datetimepicker = __webpack_require__(84);
	
	var _datetimepicker2 = _interopRequireDefault(_datetimepicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _datetimepicker2.default;

/***/ },
/* 83 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _picker = __webpack_require__(85);
	
	var _picker2 = _interopRequireDefault(_picker);
	
	var _datetimecore = __webpack_require__(89);
	
	var _datetimecore2 = _interopRequireDefault(_datetimecore);
	
	var _util = __webpack_require__(5);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 日期、时间选择
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component DateTimePicker
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 可提供一些日期或者时间序列供用户选择，并返回用户选择的结果。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./dateTimePicker.md}{instruUrl: datetimepicker.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zongze.li
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    /**
	     * 容器高度
	     *
	     * @property height
	     * @type Number
	     * @description 受控属性：决定容器展示的高度
	     * @default 150
	     */
	    height: _propTypes2.default.number,
	    /**
	     * 起止区间
	     *
	     * @property range
	     * @type Array<String>
	     * @description 受控属性：区间范围开始于, 结束于；可以用非数字符号做为分隔符;
	     * @default ['1900-01-01', format(new Date(), 'xxxx-xx-xx')]
	     */
	    range: _propTypes2.default.arrayOf(_propTypes2.default.string),
	    /**
	     * 当前区间默认显示的点
	     *
	     * @property value
	     * @type String
	     * @description 受控属性：区间范围内当前默认值，可以用非数字符号做为分隔符；
	     * @default '2016-8-28'
	     */
	    value: _propTypes2.default.string,
	    /**
	     * 循环滚动模式
	     *
	     * @property loop
	     * @type Array<Bool>
	     * @description 受控属性：设置为true，为无限循环滚动模式，反之为有限模式；默认为true
	     * @default [true, true, true]
	     */
	    loop: _propTypes2.default.arrayOf(_propTypes2.default.bool),
	    /**
	     * 内联单位
	     *
	     * @property unitsInline
	     * @type Array<String>
	     * @description 受控属性：在对应栏里的每个选项里添加对应的单位；
	     * @default []
	     */
	    unitsInline: _propTypes2.default.arrayOf(_propTypes2.default.string),
	    /**
	     * 右旁单位
	     *
	     * @property unitsAside
	     * @type Array<String>
	     * @description 受控属性：在对应栏里的垂直居中，水平偏右位置，显示当前栏目对应的单位；
	     * @default []
	     */
	    unitsAside: _propTypes2.default.arrayOf(_propTypes2.default.string),
	    /**
	     * 日期或者时间模式
	     *
	     * @property dateOrTime
	     * @type Enum {'date', 'time'},
	     * @description 受控属性：'date'代表日期模式，即年月日模式，'time'代表时间模式，即时分模式
	     * @default 'date'
	     */
	    dateOrTime: _propTypes2.default.oneOf(['date', 'time']),
	    /**
	     * 数字映射字符串函数
	     *
	     * @property format
	     * @type Function
	     * @description 受控属性：默认显示的date或者time是数字，传入该函数，会将数字作为参数，经该函数处理后，返回一个经过包装的字符串，这时将会以字符串作为默认的显示选项；该函数有两个参数(value, level)。
	     * @param {Number} value 对应栏目的序列中的单个值
	     * @param {Number} level 指代对应的栏目，从左往右递增，从0开始
	     * @default (value, level) => value
	     */
	    format: _propTypes2.default.func,
	    /**
	     * onChange回调函数
	     *
	     * @property onChange
	     * @type Function
	     * @description onChange回调函数，用以将当前选择的项目传递给上层，来触发更新。回传的参数有两个(value, item)。
	     * @param {Object} value 为当前组件应更新到的状态
	     * @param {Object} item 为当前滑到最中间位置的，选中的数据，包含了一些可能有用的较为详细的信息
	     * @default (value, item) => {}
	     */
	    onChange: _propTypes2.default.func,
	    /**
	     * 额外类名
	     *
	     * @property extraClass
	     * @type String
	     * @description 受控属性：本组件额外的css类
	     * @default []
	     */
	    extraClass: _propTypes2.default.string
	};
	
	function toStandardDateStr(value) {
	    return String(value).length < 2 ? '0' + value : value;
	}
	
	var DateTimePickerDefaultProps = {
	    height: 150,
	    loop: [true, true, true],
	    unitsInline: [],
	    unitsAside: [],
	    dateOrTime: 'date',
	    format: toStandardDateStr,
	    onChange: function onChange(value, level) {
	        console.log(value, level, '请设置onChange函数，自行setState更新状态');
	    },
	    extraClass: ''
	};
	
	var DateTimePicker = function (_Component) {
	    _inherits(DateTimePicker, _Component);
	
	    function DateTimePicker(props) {
	        _classCallCheck(this, DateTimePicker);
	
	        var _this = _possibleConstructorReturn(this, (DateTimePicker.__proto__ || Object.getPrototypeOf(DateTimePicker)).call(this, props));
	
	        var date = new Date();
	        _this.defaultRange = {
	            time: ['00:00', '23:59'],
	            date: ['1900-01-01', date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate()]
	        };
	        _this.regxNum = /[0-9]+/g;
	        _this.symbol = props.value.match(/\D/);
	        _this.splitStrToArray = function (str) {
	            return str.match(_this.regxNum).map(function (cur) {
	                return parseInt(cur, 10);
	            });
	        };
	        var len = _this.splitStrToArray(_this.props.value).length;
	        _this.levels = (0, _util.getArrayByLength)(len).fill(1).map(function (cur, index) {
	            return index;
	        });
	
	        var range = props.range,
	            value = props.value,
	            dateOrTime = props.dateOrTime,
	            format = props.format,
	            unitsInline = props.unitsInline,
	            newRange = range || _this.defaultRange[_this.props.dateOrTime],
	            rangeArr = newRange.map(function (curr) {
	            return _this.splitStrToArray(curr);
	        });
	
	        _this.dateTimeModel = new _datetimecore2.default(_this.splitStrToArray(value), rangeArr, unitsInline, dateOrTime, format);
	        _this.state = _extends({
	            levels: _this.levels
	        }, _this.dateTimeModel.multiPickerState);
	        return _this;
	    }
	
	    _createClass(DateTimePicker, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this2 = this;
	
	            var range = nextProps.range,
	                dateOrTime = nextProps.dateOrTime,
	                unitsInline = nextProps.unitsInline,
	                format = nextProps.format,
	                loop = nextProps.loop,
	                nextValue = this.splitStrToArray(nextProps.value);
	
	            if (this.props.format !== format || this.props.dateOrTime !== dateOrTime || range !== undefined && this.props.range !== range || this.props.unitsInline !== unitsInline || this.props.loop !== loop) {
	                var newRange = range || this.defaultRange[dateOrTime],
	                    rangeArr = newRange.map(function (curr) {
	                    return _this2.splitStrToArray(curr);
	                });
	
	                if (this.props.dateOrTime !== dateOrTime) {
	                    this.levels = (0, _util.getArrayByLength)(rangeArr[0].length).fill(1).map(function (cur, index) {
	                        return index;
	                    });
	                }
	                this.dateTimeModel.refresh(nextValue, rangeArr, dateOrTime, unitsInline, format, loop).deepUpdateMultiPickerState();
	            } else {
	                this.dateTimeModel.updateDateTime(nextValue);
	            }
	
	            this.setState(_extends({}, this.dateTimeModel.multiPickerState, { levels: this.levels }));
	        }
	    }, {
	        key: '_handleOnChange',
	        value: function _handleOnChange(item, level) {
	            var _this3 = this;
	
	            var nextValue = this.dateTimeModel.getNextValue(item.value, level),
	                newValueState = nextValue.map(function (value) {
	                return toStandardDateStr(value);
	            }).join(this.symbol),
	                text = nextValue.map(function (val, index) {
	                return _this3.props.format(val, index);
	            }).join(this.symbol);
	
	            if (this.props.onChange) {
	                this.props.onChange(newValueState, text, item, level);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;
	
	            return _react2.default.createElement(
	                'div',
	                { className: (0, _classnames2.default)('yo-datetimepicker', this.props.extraClass) },
	                this.state.levels.map(function (optId, level) {
	                    return _react2.default.createElement(_picker2.default, {
	                        key: 'picker' + level,
	                        stopPropagation: true,
	                        options: _this4.state[optId].options,
	                        value: _this4.state[optId].value,
	                        unit: _this4.props.unitsAside[level],
	                        looped: _this4.props.loop[level],
	                        onChange: function onChange(item) {
	                            _this4._handleOnChange(item, level);
	                        },
	                        height: _this4.props.height
	                    });
	                })
	            );
	        }
	    }]);
	
	    return DateTimePicker;
	}(_react.Component);
	
	exports.default = DateTimePicker;
	
	
	DateTimePicker.propTypes = propTypes;
	DateTimePicker.defaultProps = DateTimePickerDefaultProps;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _PickerCore = __webpack_require__(86);
	
	var _PickerCore2 = _interopRequireDefault(_PickerCore);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _scroller = __webpack_require__(52);
	
	var _scroller2 = _interopRequireDefault(_scroller);
	
	var _PickerItem = __webpack_require__(88);
	
	var _PickerItem2 = _interopRequireDefault(_PickerItem);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Picker
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description Picker组件，行为和特性与iOS原生的picker完全一致。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 支持两种模式:静态模式和循环模式。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 静态模式会完全按照传入的options渲染待选项，而循环模式会将options变成一个首尾循环的数据结构，可以无限地向上/向下滚动。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./picker.md}{instruUrl: picker.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var SIZE = 1000000;
	var ITEM_HEIGHT = 30;
	
	var Picker = function (_Component) {
	    _inherits(Picker, _Component);
	
	    function Picker(props) {
	        _classCallCheck(this, Picker);
	
	        var _this = _possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).call(this, props));
	
	        var options = props.options,
	            value = props.value,
	            height = props.height,
	            looped = props.looped,
	            itemHeight = props.itemHeight;
	
	        var size = looped ? SIZE * ITEM_HEIGHT / itemHeight : options.length;
	
	        _this.pickerModel = new _PickerCore2.default({
	            dataSource: options,
	            value: value,
	            loopedSize: size,
	            containerHeight: height,
	            itemHeight: itemHeight,
	            looped: looped
	        });
	        // 因为槽的数量和组件的高度有关,因此也在state中维护
	        _this.state = {
	            thunks: _this.pickerModel.thunks,
	            height: _this.pickerModel.containerHeight,
	            contentHeight: _this.pickerModel.contentHeight,
	            visibleList: _this.pickerModel.visibleList,
	            offsetY: _this.pickerModel.offsetY
	        };
	        return _this;
	    }
	
	    _createClass(Picker, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            var _this2 = this;
	
	            this.pickerModel.registerEventHandler('change', function (visibleList) {
	                _this2.setState({ visibleList: visibleList });
	            }).registerEventHandler('momentumStart', function (newY) {
	                if (_this2.scroller) {
	                    _this2.scroller.scrollTo(0, newY, 300);
	                }
	            }).registerEventHandler('resetValue', function (newY, needRefresh) {
	                _this2.setState({ offsetY: newY });
	
	                if (needRefresh) {
	                    _this2.refreshOffsetY(newY);
	                }
	            }).registerEventHandler('refresh', function (offsetY, visibleList, options, height, contentHeight, thunks) {
	                _this2.setState({ offsetY: offsetY, visibleList: visibleList, options: options, height: height, contentHeight: contentHeight, thunks: thunks });
	                _this2.refreshOffsetY(offsetY);
	                // 等待update结束,refresh scroller
	                if (_this2.scroller) {
	                    setTimeout(function () {
	                        _this2.scroller.refresh({
	                            scrollerHeight: contentHeight,
	                            wrapperHeight: height
	                        });
	                    }, 0);
	                }
	            });
	        }
	    }, {
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.scroller) {
	                this.scroller.refresh({
	                    scrollerHeight: this.state.contentHeight,
	                    wrapperHeight: this.state.height
	                });
	            }
	        }
	
	        /**
	         * 如果仅仅是value发生了改变,其他属性都没有改变,只调用setValue
	         * 这样可以跳过一些复杂的计算过程
	         * @param nextProps
	         */
	
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var value = nextProps.value,
	                options = nextProps.options,
	                height = nextProps.height,
	                looped = nextProps.looped,
	                itemHeight = nextProps.itemHeight;
	
	
	            if (options === this.props.options && height === this.state.height && looped === this.props.looped && itemHeight === this.props.itemHeight) {
	                if (this.props.value !== value) {
	                    this.pickerModel.setValue(value, true);
	                }
	            } else {
	                this.pickerModel.refresh({
	                    dataSource: options,
	                    value: value,
	                    containerHeight: height,
	                    loopedSize: looped ? SIZE * ITEM_HEIGHT / itemHeight : options.length,
	                    looped: looped,
	                    manually: true,
	                    itemHeight: itemHeight
	                });
	            }
	        }
	
	        /**
	         * 滚动停止时,校正位置(需要正好卡到某个option处)并触发onChange
	         * 然后验证外部组件是否重置了value,如果没有,回滚到之前的option
	         * @param evt
	         */
	
	    }, {
	        key: 'onScrollTerminate',
	        value: function onScrollTerminate(evt) {
	            var _this3 = this;
	
	            // console.log('term')
	            var currentY = evt.contentOffset.y,
	                destination = this.pickerModel.getScrollDestination(currentY);
	
	            // 滚动停止时再次校验是否滚到了正确的位置
	            // 因为用户可能在惯性滑动时再次点击,终止惯性滚动,所以可能滑不到正确位置
	            if (currentY !== destination.y) {
	                this.pickerModel.onMomentumStart(currentY);
	                return;
	            }
	            // 此处检验是否value真的发生了变化,这样可以减少很多onChange引起的render
	            var lastStateY = this.state.offsetY,
	                lastItem = this.pickerModel.getScrollDestination(lastStateY).item,
	                selectedItem = destination.item;
	            this.pickerModel.offsetY = currentY;
	            if (selectedItem.value !== lastItem.value) {
	                this.props.onChange(selectedItem);
	            }
	            // 在用户重设value之后验证value是否已经改变
	            // 如果没有改变,回滚到上一个状态的offsety
	            setTimeout(function () {
	                if (_this3.state.offsetY === lastStateY) {
	                    _this3.pickerModel.offsetY = lastStateY;
	                    _this3.refreshOffsetY(lastStateY);
	                }
	            }, 0);
	            // 重置isScrolling
	            // 放在timeout里是为了让tap先触发
	            // 200毫秒的延迟是为了防止使用者频繁点击导致错乱
	            setTimeout(function () {
	                _this3.isScrolling = false;
	            }, 200);
	        }
	
	        /**
	         * 根据当前的y重新计算visibleList
	         * @param y
	         */
	
	    }, {
	        key: 'refreshOffsetY',
	        value: function refreshOffsetY(y) {
	            this.scroller && this.scroller.scrollTo(0, y);
	            if (this.props.looped) {
	                this.pickerModel.onScrollTo(y);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;
	
	            var _props = this.props,
	                extraClass = _props.extraClass,
	                unit = _props.unit,
	                itemHeight = _props.itemHeight;
	
	            var looped = this.pickerModel.looped;
	            var _state = this.state,
	                visibleList = _state.visibleList,
	                offsetY = _state.offsetY,
	                height = _state.height,
	                contentHeight = _state.contentHeight,
	                thunks = _state.thunks;
	
	            return _react2.default.createElement(
	                'div',
	                { className: (0, _classnames2.default)('yo-picker', extraClass), style: { height: height } },
	                _react2.default.createElement('span', { className: 'mask' }),
	                _react2.default.createElement(
	                    _scroller2.default,
	                    {
	                        contentOffset: { x: 0, y: offsetY },
	                        ref: function ref(dom) {
	                            _this4.scroller = dom;
	                        },
	                        stopPropagation: this.props.stopPropagation,
	                        wrapper: { clientWidth: 0, clientHeight: height },
	                        useTransition: true,
	                        onScroll: function onScroll(evt) {
	                            if (looped) {
	                                _this4.pickerModel.onScrollTo(evt.contentOffset.y);
	                            }
	                            _this4.isScrolling = true;
	                        },
	                        autoRefresh: false,
	                        onScrollEnd: function onScrollEnd(evt) {
	                            _this4.onScrollTerminate(evt);
	                        }
	                        // scrollCancel对应着两种情况:1.在滚动过程中tap中断滚动,2.静止时tap,只有第一种情况
	                        // 才应该执行onScrollTerminate回调,在第二种情况会执行option的onOptionTap回调(直接滚动到目标option)
	                        // 因此此处必须加上isScrolling的判断
	                        , onScrollCancel: function onScrollCancel(evt) {
	                            if (_this4.isScrolling) {
	                                _this4.onScrollTerminate(evt);
	                            }
	                        },
	                        onMomentumScrollBegin: function onMomentumScrollBegin(evt) {
	                            return _this4.pickerModel.onMomentumStart(evt.param.targetY);
	                        },
	                        deceleration: 0.001,
	                        bounceTime: looped ? 600 : 200
	                    },
	                    _react2.default.createElement(
	                        'ul',
	                        {
	                            className: 'list',
	                            style: {
	                                height: contentHeight
	                            }
	                        },
	                        looped ? thunks.map(function (_, order) {
	                            var ele = visibleList.find(function (item) {
	                                return item.order === order;
	                            });
	                            return ele ? _react2.default.createElement(_PickerItem2.default, {
	                                onOptionTap: function onOptionTap(el) {
	                                    if (!_this4.isScrolling && _this4.scroller) {
	                                        _this4.scroller.scrollTo(0, _this4.pickerModel.getPositionByOpt(el), 300);
	                                    }
	                                },
	                                ele: ele,
	                                itemHeight: itemHeight,
	                                key: order,
	                                order: order
	                            }) : null;
	                        }) : visibleList.map(function (item, i) {
	                            return _react2.default.createElement(_PickerItem2.default, {
	                                onOptionTap: function onOptionTap(ele) {
	                                    if (!_this4.isScrolling && _this4.scroller) {
	                                        _this4.scroller.scrollTo(0, _this4.pickerModel.getPositionByOpt(ele), 300);
	                                    }
	                                },
	                                ele: item,
	                                itemHeight: itemHeight,
	                                key: 'notLooped_' + i,
	                                notLooped: true
	                            });
	                        })
	                    )
	                ),
	                unit ? _react2.default.createElement(
	                    'span',
	                    { className: 'yo-select-item-tag unit' },
	                    unit
	                ) : null
	            );
	        }
	    }]);
	
	    return Picker;
	}(_react.Component);
	
	Picker.propTypes = {
	    /**
	     * @property options
	     * @type Array
	     * @default null
	     * @description picker的options，数组形式，元素的格式为{text:string,value:string}。
	     *
	     * text为option显示的文本，value为option对应的真实值(参考网页option标签)。
	     *
	     * text的缺省值为value，value必须传入，且只能为字符串/数字类型。
	     */
	    options: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	        value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
	    })).isRequired,
	    /**
	     * @property value
	     * @type Number/String
	     * @default null
	     * @description 组件的value，参考网页select标签的value属性。
	     *
	     * value是一个严格受控属性，只能通过picker的父组件改变，你需要设置onChange属性来控制value属性的变化。
	     */
	    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	    /**
	     * @property onChange
	     * @type Function
	     * @default null
	     * @param value 当前的option的value
	     * @description 组件划动时触发的事件回调，如果不设置这个属性，这个picker的value将无法根据picker的滚动改变。
	     *
	     * onChange能够接收一个参数option，为当前选中的option的数据对象。
	     *
	     * 如果你不重新设置value，那么组件将会回滚到之前的值。
	     *
	     * onChange和value的使用和网页中select对应属性的使用完全一致。
	     */
	    onChange: _propTypes2.default.func,
	    /**
	     * @property height
	     * @type Number
	     * @default 150
	     * @description picker的高度，默认150。
	     *
	     * Picker组件不能自适应容器的高度，必须为Picker组件显式地指定高度。
	     */
	    height: _propTypes2.default.number.isRequired,
	    /**
	     * @property looped
	     * @type Bool
	     * @default true
	     * @description 是否采用循环模式，默认为true。
	     */
	    looped: _propTypes2.default.bool,
	    /**
	     * @property unit
	     * @type Number
	     * @default null
	     * @description 显示在picker右侧的单位。
	     */
	    unit: _propTypes2.default.string,
	    /**
	     * @property extraClass
	     * @type String
	     * @default null
	     * @description 附加给组件根节点的额外class。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property stopPropagation
	     * @type Bool
	     * @default false
	     * @description 是否阻止默认事件传播，默认为false不阻止。
	     */
	    stopPropagation: _propTypes2.default.bool,
	    /**
	     * @property itemHeight
	     * @version 3.0.9
	     * @skip
	     * @type Number
	     * @default 30
	     * @description 滚动Item的高度, 该属性的修改最好配合样式,如果设值为45，则需 extraClass传入 `yo-picker-xxx` 并扩展样式
	     * ```
	     * @include yo-picker(
	     *      $name: 'xxx',
	     *      $item-height: .45rem
	     *  );
	     * ```
	     */
	    itemHeight: _propTypes2.default.number
	};
	Picker.defaultProps = {
	    value: null,
	    onChange: function onChange() {},
	    height: 150,
	    looped: true,
	    unit: null,
	    stopPropagation: false,
	    extraClass: '',
	    itemHeight: ITEM_HEIGHT
	};
	exports.default = Picker;

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ComponentCore2 = __webpack_require__(44);
	
	var _ComponentCore3 = _interopRequireDefault(_ComponentCore2);
	
	var _LoopedArray = __webpack_require__(87);
	
	var _LoopedArray2 = _interopRequireDefault(_LoopedArray);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Picker核心逻辑,负责管理Picker的内部状态
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var PickerCore = function (_ComponentCore) {
	    _inherits(PickerCore, _ComponentCore);
	
	    function PickerCore(_ref) {
	        var dataSource = _ref.dataSource,
	            value = _ref.value,
	            loopedSize = _ref.loopedSize,
	            _ref$containerHeight = _ref.containerHeight,
	            containerHeight = _ref$containerHeight === undefined ? 150 : _ref$containerHeight,
	            _ref$itemHeight = _ref.itemHeight,
	            itemHeight = _ref$itemHeight === undefined ? 30 : _ref$itemHeight,
	            looped = _ref.looped;
	
	        _classCallCheck(this, PickerCore);
	
	        // static attributes
	        // 实际上这三个属性是常量
	        var _this = _possibleConstructorReturn(this, (PickerCore.__proto__ || Object.getPrototypeOf(PickerCore)).call(this, 'picker'));
	
	        _this.guid = -1;
	        _this.itemHeight = itemHeight;
	        _this.selectionHeight = itemHeight;
	        _this.loopedSize = loopedSize;
	        // mutable states
	        // 可以通过父组件render改变
	        _this.refresh({ dataSource: dataSource, value: value, containerHeight: containerHeight, looped: looped, itemHeight: itemHeight, loopedSize: loopedSize });
	        return _this;
	    }
	
	    /**
	     * 初始化/重置组件的状态
	     * @param dataSource
	     * @param value
	     * @param containerHeight
	     * @param looped
	     * @param manually
	     */
	
	
	    _createClass(PickerCore, [{
	        key: 'refresh',
	        value: function refresh(_ref2) {
	            var _this2 = this;
	
	            var dataSource = _ref2.dataSource,
	                value = _ref2.value,
	                _ref2$containerHeight = _ref2.containerHeight,
	                containerHeight = _ref2$containerHeight === undefined ? this.containerHeight : _ref2$containerHeight,
	                looped = _ref2.looped,
	                itemHeight = _ref2.itemHeight,
	                loopedSize = _ref2.loopedSize,
	                _ref2$manually = _ref2.manually,
	                manually = _ref2$manually === undefined ? false : _ref2$manually;
	
	            this.looped = looped;
	            this.loopedSize = loopedSize;
	            this.size = looped ? this.loopedSize : dataSource.length;
	            this.dataSource = dataSource;
	            this.containerHeight = containerHeight;
	            this.itemHeight = itemHeight;
	            this.middlePointY = (containerHeight - this.itemHeight) / 2;
	
	            var visibleSize = Math.floor(this.containerHeight / this.itemHeight * 1.5);
	            // 槽的数量,根据容器高度动态计算
	            this.visibleSize = this.looped ? visibleSize : dataSource.length;
	            // 静态模式下option列表的上下补白,高度为半个容器高度
	            this.contentPadding = this.looped ? 0 : this.middlePointY;
	            // option列表的容器高度,循环模式下为数据源放大一百万倍乘以option高度(30)
	            this.contentHeight = this.itemHeight * this.size + (this.looped ? 0 : 2 * this.contentPadding);
	            this.thunks = (0, _util.getArrayByLength)(this.visibleSize).fill(1);
	            // 根据数据源生成循环数组
	            this.loopedSource = new _LoopedArray2.default(dataSource).map(function (item, index) {
	                return Object.assign({}, item, {
	                    offset: _this2.contentPadding,
	                    looped: _this2.looped,
	                    index: index,
	                    guid: ++_this2.guid,
	                    order: index % _this2.visibleSize
	                });
	            });
	            // 根据value计算初始位置
	            var initialPosition = this.getInitialPosition(value, dataSource, this.size, this.itemHeight);
	            this.startIndex = initialPosition.index;
	            this.offsetY = initialPosition.offsetY;
	            this.visibleList = this.getVisibleList(this.offsetY);
	            // 如果不是通过构造函数调用(传入了manually参数),触发组件的更新
	            if (manually) {
	                this.emitEvent('refresh', this.offsetY, this.visibleList, dataSource, this.containerHeight, this.contentHeight, this.thunks, this.loopedSize, this.itemHeight);
	            }
	        }
	
	        /**
	         * 设置value,在onChange之后外部组件重置value时调用
	         * @param value
	         * @param manually
	         */
	
	    }, {
	        key: 'setValue',
	        value: function setValue(value, manually) {
	            var itemOnCurrentOffsetY = this.getScrollDestination(this.offsetY).item;
	            var targetY = this.offsetY;
	            var needRefresh = false;
	            // 根据value计算出新的y偏移
	            if (value !== itemOnCurrentOffsetY.value) {
	                needRefresh = true;
	                this.offsetY = targetY = this.getInitialPosition(value, this.dataSource, this.size, this.itemHeight).offsetY;
	            }
	            // 触发组件更新
	            if (manually) {
	                this.emitEvent('resetValue', targetY, needRefresh);
	            }
	        }
	
	        /**
	         * 根据偏移y计算出容器内保留的option列表
	         * @param offsetY
	         * @param looped
	         * @returns {Array}
	         */
	
	    }, {
	        key: 'getVisibleList',
	        value: function getVisibleList() {
	            var offsetY = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.offsetY;
	
	            this.startIndex = this.getStartIndex(offsetY);
	            var endIndex = this.getEndIndex(this.startIndex);
	            return this.loopedSource.slice(this.startIndex, endIndex);
	        }
	
	        /**
	         * 绑定给Scroller的onScroll回调,根据y的变化更新容器内的visibleList
	         * @param offsetY
	         */
	
	    }, {
	        key: 'onScrollTo',
	        value: function onScrollTo(offsetY) {
	            var prevStartIndex = this.startIndex;
	
	            this.offsetY = offsetY;
	            this.visibleList = this.getVisibleList(this.offsetY);
	
	            if (prevStartIndex !== this.startIndex) {
	                this.emitEvent('change', this.visibleList);
	            }
	        }
	
	        /**
	         * 绑定给Scroller的onMomentumStart事件回调
	         * 这个事件在惯性滚动开始时触发,并会提供惯性滚动的目标Y
	         * picker会根据这个Y找到离它最近的一个option,并调整滚动的目的地
	         * @param targetY
	         */
	
	    }, {
	        key: 'onMomentumStart',
	        value: function onMomentumStart(targetY) {
	            this.emitEvent('momentumStart', this.getScrollDestination(targetY).y);
	        }
	
	        /**
	         * 根据y计算出距离y最近的option
	         * @param y
	         * @param itemHeight
	         * @param selectionHeight
	         * @param contentPadding
	         * @param loopedSource
	         * @param middlePointY
	         * @returns {{y: number, item: Object}}
	         */
	
	    }, {
	        key: 'getScrollDestination',
	        value: function getScrollDestination(y) {
	            var itemHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.itemHeight;
	            var selectionHeight = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.selectionHeight;
	            var contentPadding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.contentPadding;
	            var loopedSource = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.loopedSource;
	            var middlePointY = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.middlePointY;
	
	            var absY = Math.abs(y),
	                middle = middlePointY,
	                selectionBarY = absY + middle - contentPadding,
	                selectionMiddle = selectionBarY + selectionHeight / 2,
	                nearest = Math.ceil(selectionMiddle / itemHeight) - 1,
	                targetY = nearest * itemHeight - middle + contentPadding;
	
	            return { y: -targetY, item: loopedSource.getItem(nearest) };
	        }
	
	        /**
	         * 根据value计算出初始的option
	         * @param dataSource
	         * @param size
	         * @param itemHeight
	         * @param value
	         * @param looped
	         * @param contentPadding
	         * @param middlePointY
	         * @returns {{offsetY: number, index: number}}
	         */
	
	    }, {
	        key: 'getInitialPosition',
	        value: function getInitialPosition() {
	            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
	            var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataSource;
	            var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.size;
	            var itemHeight = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.itemHeight;
	            var looped = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.looped;
	            var contentPadding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : this.contentPadding;
	            var middlePointY = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : this.middlePointY;
	
	            var len = dataSource.length,
	                proportion = Math.floor(size / len),
	                valueIndex = dataSource.findIndex(function (item) {
	                return item.value === value;
	            }),
	                initialIndex = Math.floor(proportion / 2) * dataSource.length + (valueIndex !== -1 ? valueIndex : 0);
	
	            return {
	                offsetY: -(initialIndex * itemHeight - middlePointY + contentPadding),
	                index: initialIndex
	            };
	        }
	    }, {
	        key: 'getPositionByOpt',
	        value: function getPositionByOpt(ele) {
	            return -(ele.index * this.itemHeight - this.middlePointY + ele.offset);
	        }
	
	        /**
	         * 获取visibleList的startIndex
	         * @param offsetY
	         * @param itemHeight
	         * @param looped
	         * @param visibleSize
	         * @returns {number}
	         */
	
	    }, {
	        key: 'getStartIndex',
	        value: function getStartIndex(offsetY) {
	            var itemHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.itemHeight;
	            var looped = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.looped;
	            var visibleSize = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.visibleSize;
	
	            var startIndex = looped ? Math.ceil(-offsetY / itemHeight) - Math.floor(visibleSize / 3) : 0;
	            return startIndex > 0 ? startIndex : 0;
	        }
	
	        /**
	         * 根据startIndex获取visibleList的endIndex
	         * @param startIndex
	         * @returns {Number}
	         */
	
	    }, {
	        key: 'getEndIndex',
	        value: function getEndIndex(startIndex) {
	            return this.looped ? startIndex + this.visibleSize : this.size;
	        }
	    }]);
	
	    return PickerCore;
	}(_ComponentCore3.default);
	
	exports.default = PickerCore;

/***/ },
/* 87 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * 循环数组类,接收一个数组,生成一个无限循环的数据结构
	 * 拥有和数组相似的API
	 */
	
	var LoopedArray = function () {
	    function LoopedArray(dataSource) {
	        _classCallCheck(this, LoopedArray);
	
	        this.dataSource = dataSource;
	    }
	
	    /**
	     * 获取循环数组中的第i项,通过模运算得到
	     * @param index
	     * @param dataSource
	     * @returns {item}
	     */
	
	
	    _createClass(LoopedArray, [{
	        key: "getItem",
	        value: function getItem(index) {
	            var dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dataSource;
	
	            return JSON.parse(JSON.stringify(dataSource[index % dataSource.length]));
	        }
	
	        /**
	         * 循环数组slice,返回一个数组
	         * @param start
	         * @param end
	         * @returns {Array}
	         */
	
	    }, {
	        key: "slice",
	        value: function slice(start, end) {
	            var ret = [];
	            for (var i = start; i < end; i++) {
	                ret.push(this.getItem(i));
	            }
	            return ret;
	        }
	
	        /**
	         * 循环数组map,返回一个新的循环数组
	         * 将operation引用于原有的getItem生成新循环数组的getItem
	         * @param operation
	         * @returns {LoopedArray}
	         */
	
	    }, {
	        key: "map",
	        value: function map(operation) {
	            var _this = this;
	
	            var ret = new LoopedArray([]);
	            ret.getItem = function (index) {
	                return operation(_this.getItem(index), index);
	            };
	            return ret;
	        }
	
	        /**
	         * 循环数组filter,返回一个数组
	         * @param prediction
	         * @returns {Array}
	         */
	
	    }, {
	        key: "filter",
	        value: function filter(prediction) {
	            return new LoopedArray(this.dataSource.filter(prediction));
	        }
	    }]);
	
	    return LoopedArray;
	}();
	
	exports.default = LoopedArray;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * option组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var _class = function (_Component) {
	    _inherits(_class, _Component);
	
	    function _class() {
	        _classCallCheck(this, _class);
	
	        return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
	    }
	
	    _createClass(_class, [{
	        key: 'shouldComponentUpdate',
	
	
	        /**
	         * option组件的render触发控制的比较苛刻,同样是为了优化低端手机的滚动性能
	         * @param nextProps
	         * @returns {boolean}
	         */
	        value: function shouldComponentUpdate(nextProps) {
	            return !!(nextProps.ele.value !== this.props.ele.value || nextProps.ele.text !== this.props.ele.text || nextProps.ele.index !== this.props.ele.index || nextProps.notLooped);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _props = this.props,
	                ele = _props.ele,
	                itemHeight = _props.itemHeight,
	                onOptionTap = _props.onOptionTap;
	
	            var y = ele.index * itemHeight;
	            var transform = 'translate(0,' + (y + ele.offset) + 'px) translateZ(0px)';
	
	            return _react2.default.createElement(
	                'li',
	                {
	                    onTouchTap: function onTouchTap() {
	                        onOptionTap(ele);
	                    },
	                    style: {
	                        transform: transform,
	                        WebkitTransform: transform,
	                        height: itemHeight + 'px',
	                        lineHeight: itemHeight + 'px'
	                    },
	                    className: 'item'
	                },
	                ele.text || ele.value
	            );
	        }
	    }]);
	
	    return _class;
	}(_react.Component);
	
	_class.propTypes = {
	    ele: _propTypes2.default.object,
	    onOptionTap: _propTypes2.default.func,
	    itemHeight: _propTypes2.default.number
	};
	exports.default = _class;

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _util = __webpack_require__(5);
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DateTimeCore = function () {
	    function DateTimeCore(value, range) {
	        var units = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
	        var dateOrTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'date';
	        var extraNumStrWrapper = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : function (val) {
	            return val;
	        };
	
	        _classCallCheck(this, DateTimeCore);
	
	        this.monthMapDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
	        this.monthRange = { min: 1, max: 12 };
	        this.minsRange = { min: 0, max: 59 };
	        this.refresh(value, range, dateOrTime, units, extraNumStrWrapper);
	        this.deepUpdateMultiPickerState();
	    }
	
	    _createClass(DateTimeCore, [{
	        key: 'refresh',
	        value: function refresh() {
	            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;
	            var range = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.range;
	            var dateOrTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dateOrTime;
	            var units = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.units;
	            var extraNumStrWrapper = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : this.extraNumStrWrapper.bind(this);
	
	            this.value = value;
	            this.range = range;
	            this.dateOrTime = dateOrTime;
	            this.levels = (0, _util.getArrayByLength)(value.length).fill(1).map(function (cur, index) {
	                return index;
	            });
	            this.units = units;
	            this.extraNumStrWrapper = extraNumStrWrapper;
	            this.rangeStore = this.calculateRange(this.range, this.dateOrTime);
	            this.value = this.trimValue(this.value);
	            this.currRange = this.getCurrRange();
	            return this;
	        }
	    }, {
	        key: 'deepUpdateMultiPickerState',
	        value: function deepUpdateMultiPickerState() {
	            var _this = this;
	
	            this.multiPickerState = this.levels.reduce(function (accState, level) {
	                accState[level] = _this.genPickerState(level, _this.currRange[level], _this.value[level]);
	                return accState;
	            }, {});
	        }
	
	        // 只有value及currRange 发生变化时，只需从已有的状态中取出需要更新的new options即可。
	
	    }, {
	        key: 'shallowUpdateMultiPickerState',
	        value: function shallowUpdateMultiPickerState(level, currRange, value) {
	            this.multiPickerState[level] = this.genPickerState(level, currRange, value);
	        }
	    }, {
	        key: 'updateDateTime',
	        value: function updateDateTime(newValues) {
	            var _this2 = this;
	
	            var levels = this.levels;
	            var startLevel = void 0;
	
	            newValues.forEach(function (newValue, level) {
	                var pickerState = _this2.multiPickerState[level];
	                if (newValue !== pickerState.value && pickerState.value !== undefined) {
	                    _this2.value[level] = newValue;
	                    if (startLevel === undefined) {
	                        startLevel = level;
	                    }
	                }
	            });
	            levels.forEach(function (level) {
	                var pickerState = _this2.multiPickerState[level];
	                if (level < startLevel || pickerState.value === undefined) {
	                    return;
	                }
	                var currRange = _this2.getCurrRange(),
	                    _currRange$level = currRange[level],
	                    min = _currRange$level.min,
	                    max = _currRange$level.max,
	                    currValue = _this2.value[level],
	                    newValue = _this2.cutNum(currValue, min, max),
	                    options = _this2.multiPickerState[level].options,
	                    minValue = options[0].value,
	                    maxValue = options[options.length - 1].value;
	
	
	                _this2.value[level] = newValue || _this2.value[level];
	                if (min !== minValue || max !== maxValue) {
	                    _this2.shallowUpdateMultiPickerState(level, currRange[level], newValue);
	                } else {
	                    _this2.multiPickerState[level].value = _this2.value[level];
	                }
	            });
	        }
	    }, {
	        key: 'genPickerState',
	        value: function genPickerState(level, currRange, value) {
	            var units = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.units;
	            var min = currRange.min,
	                max = currRange.max;
	
	            return {
	                options: this.mapRangeToOptions(min, max, level, units[level] || ''),
	                value: value
	            };
	        }
	    }, {
	        key: 'mapRangeToOptions',
	        value: function mapRangeToOptions(min, max, level, unit) {
	            var _this3 = this;
	
	            return (0, _util.getArrayByLength)(max - min + 1).fill(1).map(function (cur, index) {
	                return {
	                    value: index + min,
	                    text: _this3.extraNumStrWrapper(index + min, level) + unit
	                };
	            });
	        }
	
	        /**
	         * 获取合法的 新 value
	         * @method getNextValue
	         * @param {Number} changedValue 当前改变的 value
	         * @param {Number} changedLevel 当前改变的 value 所在的 level（年、月、日 or 时、分，0 1 2）
	         * @return {Array} 合法的新 value 数组。
	         *
	         * @description 输入当前改变的 value，及所在的 level，返回合法的 包含全部 level 的 value 的数据。
	         */
	
	    }, {
	        key: 'getNextValue',
	        value: function getNextValue(changedValue, changedLevel) {
	            var nextValue = [].concat(this.value);
	            nextValue[changedLevel] = changedValue;
	
	            return this.trimValue(nextValue);
	        }
	    }, {
	        key: 'trimValue',
	        value: function trimValue(unLegalValue) {
	            var _this4 = this;
	
	            return this.levels.reduce(function (legalValue, level) {
	                // 获取 当前 level 的 range 范围
	                var nextRange = _this4.getCurrRange(legalValue),
	                    _nextRange$level = nextRange[level],
	                    min = _nextRange$level.min,
	                    max = _nextRange$level.max,
	                    value = legalValue[level],
	                    trimedValue = _this4.cutNum(value, min, max);
	
	                // 将裁减过的合法 value 存入 legalValue 数组中，方便在下次循环中，
	                // 以此 value，算出下一级 新的 range，进而可通过裁减调整 得到下一级的 value
	                legalValue[level] = trimedValue;
	                return legalValue;
	            }, unLegalValue);
	        }
	
	        /* range: [[2000,7, 23], [2016, 9, 3]],
	            rangeStore: {
	                2000: {
	                    min: 7,
	                    max: 12,
	                    7: {min: 23, max: 31},
	                2016: {
	                    min: 1,
	                    max: 9,
	                    9: {min: 1, max: 3},
	                }
	            }
	        */
	
	    }, {
	        key: 'calculateRange',
	        value: function calculateRange() {
	            var _this5 = this;
	
	            var range = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.range;
	
	            var min = this.selectByMode(1, 0);
	            return range.reduce(function (rangeStore, cur, index) {
	                var high = cur[0],
	                    mid = cur[1],
	                    low = cur[2] || 0,
	                    days = _this5.getDaysByMonth(mid);
	
	                if (index === 0) {
	                    rangeStore[high] = { min: mid, max: _this5.selectByMode(12, 59) };
	                    rangeStore[high][mid] = { min: low, max: _this5.selectByMode(days, 59) };
	                } else {
	                    rangeStore[high] = Object.assign({ min: min }, rangeStore[high], { max: mid });
	                    rangeStore[high][mid] = Object.assign({ min: min }, rangeStore[high][mid], { max: low });
	                }
	                return rangeStore;
	            }, {});
	        }
	    }, {
	        key: 'getCurrRange',
	        value: function getCurrRange() {
	            var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.value;
	            var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.dateOrTime;
	            var rangeStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.rangeStore;
	
	            var midRange = rangeStore[value[0]],
	                lowRange = midRange && midRange[value[1]],
	                highRange = { min: this.range[0][0], max: this.range[1][0] },
	                monthRange = this.monthRange,
	                minsRange = this.minsRange,
	                dayRange = { min: 1, max: this.getDaysByMonth(value[1]) },
	                range = {
	                0: highRange,
	                1: midRange || this.selectByMode(monthRange, minsRange),
	                2: lowRange || this.selectByMode(dayRange, minsRange)
	            };
	            return range;
	        }
	    }, {
	        key: 'selectByMode',
	        value: function selectByMode(dateRange, timeRange) {
	            var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.dateOrTime;
	
	            return mode === 'date' ? dateRange : timeRange;
	        }
	    }, {
	        key: 'cutNum',
	        value: function cutNum(value, min, max) {
	            return Math.max(min, Math.min(max, value));
	        }
	    }, {
	        key: 'isLeapYear',
	        value: function isLeapYear(num) {
	            var mod4 = num % 4,
	                mod100 = num % 100,
	                mod400 = num % 400;
	            return !mod4 && (mod100 || !mod100 && !mod400);
	        }
	    }, {
	        key: 'getDaysByMonth',
	        value: function getDaysByMonth(month) {
	            var year = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.value[0];
	            var isLeap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.isLeapYear.bind(this);
	            var monthMapDays = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : this.monthMapDays;
	
	            var leap = isLeap(year);
	            return !(leap && month === 2) ? monthMapDays[month - 1] : monthMapDays[month - 1] + 1;
	        }
	    }]);
	
	    return DateTimeCore;
	}();
	
	exports.default = DateTimeCore;

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(91);
	
	var _dialog = __webpack_require__(39);
	
	var _dialog2 = _interopRequireDefault(_dialog);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _dialog2.default;

/***/ },
/* 91 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(93);
	
	var _grouplist = __webpack_require__(49);
	
	var _grouplist2 = _interopRequireDefault(_grouplist);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _grouplist2.default;

/***/ },
/* 93 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(95);
	
	var _inputnumber = __webpack_require__(96);
	
	var _inputnumber2 = _interopRequireDefault(_inputnumber);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _inputnumber2.default;

/***/ },
/* 95 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component InputNumber
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 数字输入框组件，输入特定范围内的数值。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * - 可设置组件显示的数值范围，每次改变的步长。
	组件数值超过设置范围，按钮不可击。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * - 超过边界值，会自动设定为边界值。
	可手动输入任意字符，若输入的不是数字，会自动回退到之前的数字。
	支持小数、负数形式。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./inputNumber.md}{instruUrl: inputnumber.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	var defaultProps = {
	    value: 0,
	    step: 1,
	    min: -10000,
	    max: 10000,
	    decimalNum: 0,
	    extraClass: '',
	    disable: false,
	    inputDisable: false,
	    onChange: function onChange() {}
	};
	
	var propTypes = {
	    /**
	     * @property value
	     * @description 组件默认显示的值
	     * @type Number
	     * @default 0
	     */
	    value: _propTypes2.default.number.isRequired,
	    /**
	     * @property step
	     * @description 单次加减的步长
	     * @type Number
	     * @default 1
	     */
	    step: _propTypes2.default.number,
	    /**
	     * @property min
	     * @description 组件显示的最小值
	     * @type Number
	     * @default -10000
	     */
	    min: _propTypes2.default.number,
	    /**
	     * @property max
	     * @description 组件显示的最大值
	     * @type Number
	     * @default 10000
	     */
	    max: _propTypes2.default.number,
	    /**
	     * @property decimalNum
	     * @description 组件显示的小数位数
	     * @type Number
	     * @default 0
	     */
	    decimalNum: _propTypes2.default.number,
	    /**
	     * @property extraClass
	     * @description 组件额外的样式类
	     * @type String
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property disable
	     * @description 组件可不可用
	     * @type Bool
	     * @default false
	     */
	    disable: _propTypes2.default.bool,
	    /**
	     * @property inputDisable
	     * @description 组件手动输入框是否不可用
	     * @type Bool
	     * @default false
	     */
	    inputDisable: _propTypes2.default.bool,
	    /**
	     * @property onChange
	     * @description 修改数字时触发的回调函数
	     * @param {Number} value 组件返回的数字
	     * @type Function
	     * @default () => {}
	     */
	    onChange: _propTypes2.default.func.isRequired
	};
	
	var Number = function (_Component) {
	    _inherits(Number, _Component);
	
	    function Number(props) {
	        _classCallCheck(this, Number);
	
	        var _this = _possibleConstructorReturn(this, (Number.__proto__ || Object.getPrototypeOf(Number)).call(this, props));
	
	        var value = props.value,
	            step = props.step,
	            min = props.min,
	            max = props.max,
	            decimalNum = props.decimalNum,
	            disable = props.disable,
	            inputDisable = props.inputDisable;
	
	        _this.state = {
	            min: min,
	            max: max,
	            step: step,
	            value: value,
	            decimalNum: decimalNum,
	            disable: disable,
	            inputDisable: inputDisable,
	            plusDisable: false,
	            minusDisable: false
	        };
	        _this._node = null;
	        if (isNaN(value)) {
	            throw new Error('不合法的value');
	        }
	        _this.cachedInput = value;
	        return _this;
	    }
	
	    _createClass(Number, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            window.addEventListener('resize', this.resizeEvent.bind(this), false);
	            this.resetState(this.state);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var newState = Object.assign({}, this.state, nextProps, {
	                plusDisable: false,
	                minusDisable: false
	            });
	            this.resetState(newState);
	        }
	
	        /**
	         * 返回一个合法的value
	         * 不合法的情况包括:
	         * value是NaN，这时候返回上一个合法的value
	         * value>max或者value<min，返回max或者min
	         * 否则返回原来的value
	         * @param val
	         * @param min
	         * @param max
	         * @returns {Number}
	         */
	
	    }, {
	        key: 'getValidValue',
	        value: function getValidValue(val) {
	            var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.props.min;
	            var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.props.max;
	
	            var value = parseFloat(val);
	            if (isNaN(value)) {
	                return parseFloat(this.cachedInput);
	            } else if (value < min) {
	                return min;
	            } else if (value > max) {
	                return max;
	            }
	            return value;
	        }
	    }, {
	        key: 'componentWillUnMount',
	        value: function componentWillUnMount() {
	            window.removeEventListener('resize', this.resizeEvent.bind(this), false);
	        }
	    }, {
	        key: 'resizeEvent',
	        value: function resizeEvent() {
	            this._node && this.wrapChange(this._node.value);
	        }
	
	        /**
	         * 重新渲染Number组件时更新组件的状态
	         * @param obj {Object} this.state对象形式
	         */
	
	    }, {
	        key: 'resetState',
	        value: function resetState(obj) {
	            var stateObj = obj;
	            stateObj.step = parseFloat(stateObj.step) || 0;
	            stateObj.max = parseFloat(stateObj.max) || 0;
	            stateObj.min = parseFloat(stateObj.min) || 0;
	            var disable = stateObj.disable,
	                min = stateObj.min,
	                max = stateObj.max,
	                decimalNum = stateObj.decimalNum;
	            var value = stateObj.value;
	            // 格式化更新的数字
	
	            value = this.getValidValue(value, min, max).toFixed(decimalNum);
	
	            // 组件不可用时， 输入框和加减按钮均不可用
	            if (disable) {
	                this.setState({ value: value, disable: disable, inputDisable: true, plusDisable: true, minusDisable: true });
	                return;
	            }
	            // 这里的比较要用toFixed以后的值
	            // 设想这种场景，用户输入0.3，min设为0，步长是0，那么显示在input的是0
	            // 但是value仍然是0.3，如果用0.3和min比较，显然0.3大于min，这时候minusDiable是false
	            // 结果就是input显示0，但是-按钮并没有被禁用，这是不正确的
	            if (parseFloat(value) === max) {
	                stateObj.plusDisable = true;
	            }
	            if (parseFloat(value) === min) {
	                stateObj.minusDisable = true;
	            }
	            stateObj.value = value;
	            this.setState(stateObj);
	        }
	
	        /**
	         * minusValue 减号触发的函数
	         * @param val {Number} input输入框的value值
	         */
	
	    }, {
	        key: 'minusValue',
	        value: function minusValue(val) {
	            if (this.state.minusDisable) {
	                return;
	            }
	            var value = parseFloat(val) || 0;
	            value -= this.state.step;
	            this.wrapChange(value);
	        }
	
	        /**
	         * plusValue 加好触发的函数， 参数为string形式，通过'+'运算符转为Number类型
	         * @param val {String}
	         */
	
	    }, {
	        key: 'plusValue',
	        value: function plusValue(val) {
	            if (this.state.plusDisable) {
	                return;
	            }
	            var value = parseFloat(val) || 0;
	            value += this.state.step;
	            this.wrapChange(value);
	        }
	
	        /**
	         * 在处理onChange的参数时要非常小心，因为允许用户通过键盘输入，可能会输入一个不符合decimalNum的数字
	         * 例如domNum=0，step=1，输入0.3的情况
	         * 这时候实际上组件会自动纠错，将0.3转化成0，这时候onChange的应该是纠错以后的value
	         * 还有可能出现用户输入非法字符例如aaa，这时候会通过getValidValue来恢复上一次的合法输入
	         * @param val
	         * @returns {Number}
	         */
	
	    }, {
	        key: 'wrapChange',
	        value: function wrapChange(val) {
	            var value = parseFloat(this.getValidValue(val).toFixed(this.state.decimalNum));
	            this.props.onChange(value);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _state = this.state,
	                inputDisable = _state.inputDisable,
	                plusDisable = _state.plusDisable,
	                minusDisable = _state.minusDisable;
	
	            var minusDisableClass = minusDisable ? 'disabled' : '';
	            var plusDisableClass = plusDisable ? 'disabled' : '';
	            return _react2.default.createElement(
	                'div',
	                { className: (0, _classnames2.default)('yo-number', this.props.extraClass) },
	                _react2.default.createElement(
	                    _touchable2.default,
	                    {
	                        touchClass: minusDisable ? '' : 'action-touch',
	                        onTap: function onTap() {
	                            return _this2._node && _this2.minusValue(_this2._node.value);
	                        }
	                    },
	                    _react2.default.createElement(
	                        'span',
	                        { className: (0, _classnames2.default)('minus', minusDisableClass) },
	                        '-'
	                    )
	                ),
	                _react2.default.createElement('input', {
	                    className: 'input', type: 'text', value: this.state.value,
	                    disabled: inputDisable ? 'disabled' : '',
	                    ref: function ref(target) {
	                        _this2._node = target;
	                    },
	                    onChange: function onChange(evt) {
	                        // 允许使用者输入任意字符，在blur的时候再去检测他的输入是否合法
	                        _this2.setState({ value: evt.target.value });
	                    },
	                    onBlur: function onBlur(evt) {
	                        _this2.wrapChange(evt.target.value);
	                    },
	                    onFocus: function onFocus(evt) {
	                        // 保存当前的value，这个value一定是合法的
	                        // 如果输入的字符不合法，就使用保存的value进行恢复
	                        // 同时，需要禁止+-按钮的点击
	                        _this2.cachedInput = evt.target.value;
	                        _this2.setState({ plusDisable: true, minusDisable: true });
	                    }
	                }),
	                _react2.default.createElement(
	                    _touchable2.default,
	                    {
	                        touchClass: plusDisable ? '' : 'action-touch',
	                        onTap: function onTap() {
	                            return _this2._node && _this2.plusValue(_this2._node.value);
	                        }
	                    },
	                    _react2.default.createElement(
	                        'span',
	                        { className: (0, _classnames2.default)('plus', plusDisableClass) },
	                        '+'
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Number;
	}(_react.Component);
	
	exports.default = Number;
	
	
	Number.defaultProps = defaultProps;
	Number.propTypes = propTypes;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(98);
	
	var _list = __webpack_require__(50);
	
	var _list2 = _interopRequireDefault(_list);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _list2.default;

/***/ },
/* 98 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.loading = undefined;
	
	__webpack_require__(3);
	
	__webpack_require__(100);
	
	var _loading = __webpack_require__(101);
	
	var _loading2 = _interopRequireDefault(_loading);
	
	var _loadingAPI = __webpack_require__(102);
	
	var _loadingAPI2 = _interopRequireDefault(_loadingAPI);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _loading2.default;
	exports.loading = _loadingAPI2.default;

/***/ },
/* 100 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 101 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 加载中组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component loading
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @type {Object}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 加载中组件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./loading.md}{instruUrl: loading.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    text: _propTypes2.default.string,
	    extraClass: _propTypes2.default.string
	};
	var LoadingDefaultProps = {
	    /**
	     * @property text
	     * @type PropTypes.string
	     * @default ''
	     * @description 组件属性：loading伴随动画图标的文字
	     */
	    text: '',
	    /**
	     * @property extraClass
	     * @type PropTypes.string
	     * @default ''
	     * @description 组件属性：附加给Loading组件的额外class
	     */
	    extraClass: ''
	};
	
	var Loading = function (_Component) {
	    _inherits(Loading, _Component);
	
	    function Loading() {
	        _classCallCheck(this, Loading);
	
	        return _possibleConstructorReturn(this, (Loading.__proto__ || Object.getPrototypeOf(Loading)).apply(this, arguments));
	    }
	
	    _createClass(Loading, [{
	        key: 'render',
	        value: function render() {
	            var props = this.props;
	            return _react2.default.createElement(
	                'div',
	                {
	                    className: (0, _classnames2.default)('yo-loading', props.extraClass)
	                },
	                _react2.default.createElement('i', { className: 'yo-ico' }),
	                !!props.text.toString().length && _react2.default.createElement(
	                    'span',
	                    { className: 'text' },
	                    props.text
	                )
	            );
	        }
	    }]);
	
	    return Loading;
	}(_react.Component);
	
	exports.default = Loading;
	
	
	Loading.propTypes = propTypes;
	Loading.defaultProps = LoadingDefaultProps;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _modal = __webpack_require__(32);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	var _loading = __webpack_require__(101);
	
	var _loading2 = _interopRequireDefault(_loading);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 加载动画api
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component loading
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @type {Object}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description Loading API，调用后显示一个带弹层的居中显示的加载中组件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./loadingapi.md}{instruUrl: loadingapi.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zongze.li
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var container = document.createElement('div');
	document.body.appendChild(container);
	
	var that = null;
	
	var loadingApiPropTypes = {
	    /**
	     * @property text
	     * @type String
	     * @default ''
	     * @description loading伴随动画图标的文字。
	     */
	    text: _propTypes2.default.string,
	    /**
	     * @property extraClass
	     * @type String
	     * @default ''
	     * @description 附加给loading组件内层的div的额外class。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property modalExtraClass
	     * @type String
	     * @default ''
	     * @description 附加给外层modal组件的额外class。
	     */
	    modalExtraClass: _propTypes2.default.string,
	    /**
	     * @property show
	     * @type Bool
	     * @default false
	     * @description 是否显示loading，true为显示loading动画，false为隐藏。
	     */
	    show: _propTypes2.default.bool,
	    /**
	     * @property contentOffset
	     * @type Array
	     * @default [0,0]
	     * @description 内容区在水平/垂直方向上的偏移,例如[0,-100]可以使模态框内容区向上偏移100个像素。
	     */
	    contentOffset: _propTypes2.default.arrayOf(_propTypes2.default.number),
	    /**
	     * @property maskOffset
	     * @type Array
	     * @default [0,0]
	     * @description 蒙层遮盖的范围。如果不需要蒙层遮盖住整个屏幕,可以设置这个属性。
	     *
	     * 数组的第一个元素代表蒙层上边缘距离屏幕顶部的距离,第二个元素代表下边缘距离底部的距离。
	     */
	    maskOffset: _propTypes2.default.arrayOf(_propTypes2.default.number)
	};
	
	var loadingApiDefaultProps = {
	    text: '',
	    extraClass: '',
	    show: false,
	    contentOffset: [0, 0],
	    maskOffset: [0, 0]
	};
	
	var LoadingApi = function (_Component) {
	    _inherits(LoadingApi, _Component);
	
	    function LoadingApi(props) {
	        _classCallCheck(this, LoadingApi);
	
	        var _this = _possibleConstructorReturn(this, (LoadingApi.__proto__ || Object.getPrototypeOf(LoadingApi)).call(this, props));
	
	        _this.state = _extends({}, props);
	        that = _this;
	        return _this;
	    }
	
	    _createClass(LoadingApi, [{
	        key: 'render',
	        value: function render() {
	            var _state = this.state,
	                text = _state.text,
	                modalExtraClass = _state.modalExtraClass,
	                extraClass = _state.extraClass,
	                restProps = _objectWithoutProperties(_state, ['text', 'modalExtraClass', 'extraClass']);
	
	            return _react2.default.createElement(
	                _modal2.default,
	                _extends({
	                    align: 'center',
	                    extraClass: modalExtraClass
	                }, restProps),
	                _react2.default.createElement(_loading2.default, {
	                    extraClass: extraClass,
	                    text: text
	                })
	            );
	        }
	    }]);
	
	    return LoadingApi;
	}(_react.Component);
	
	LoadingApi.propTypes = loadingApiPropTypes;
	LoadingApi.defaultProps = loadingApiDefaultProps;
	
	_reactDom2.default.render(_react2.default.createElement(LoadingApi, null), container);
	
	exports.default = {
	    /**
	     * show展示
	     * @method show
	     * @category loading
	     * @version 3.0.0
	     * @param {Object} options 需要设置的组件属性，如预留顶部高度，额外样式之类的，具体见上面的属性文档描述。
	     * @description api方法：显示Loding层，并设置传入的options参数中的属性。
	     */
	    show: function show(options) {
	        that.setState(Object.assign({}, options, { show: true }));
	    },
	    /**
	     * hide隐藏
	     * @method hide
	     * @category loading
	     * @version 3.0.0
	     * @description api方法：隐藏Loding层。
	     */
	    hide: function hide() {
	        that.setState({ show: false });
	    }
	};

/***/ },
/* 103 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(104);
	
	var _modal = __webpack_require__(32);
	
	var _modal2 = _interopRequireDefault(_modal);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _modal2.default;

/***/ },
/* 104 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(106);
	
	var _multilist = __webpack_require__(107);
	
	var _multilist2 = _interopRequireDefault(_multilist);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _multilist2.default;

/***/ },
/* 106 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _list = __webpack_require__(50);
	
	var _list2 = _interopRequireDefault(_list);
	
	var _multilistitem = __webpack_require__(108);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component MultiList
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.4
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 多级选择列表组件，该组件基于list组件封装，支持列表展示，支持自定义模板展示，内容异步加载等功能。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./multilist/product.md}{instruUrl: multilist/transport.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./multilist/async.md}{instruUrl: multilist/async.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./multilist/personal.md}{instruUrl: multilist/product.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var MultiList = function (_Component) {
	    _inherits(MultiList, _Component);
	
	    function MultiList(props) {
	        _classCallCheck(this, MultiList);
	
	        var _this = _possibleConstructorReturn(this, (MultiList.__proto__ || Object.getPrototypeOf(MultiList)).call(this, props));
	
	        _this.state = {
	            route: [],
	            dataSource: _this._handleDataSource(Object.assign({}, _this.props.dataSource), []),
	            valueItems: ''
	        };
	        _this.path = [];
	        _this.newItems = [];
	        return _this;
	    }
	
	    _createClass(MultiList, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            // this.calcPath();
	            // this.newItems = this._getItemsByValue(this.props.value);
	            this._recalculate(this.props);
	            var lastItem = this._getItemsByRoute(this.pathIndex).pop();
	            if (lastItem.subList === 'ASYNC') this.props.onUpdateData(lastItem);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _this2 = this;
	
	            if (nextProps.dataSource !== this.props.dataSource) {
	                // if setState is async
	                this.setState({
	                    dataSource: this._handleDataSource(Object.assign({}, nextProps.dataSource), [])
	                }, function () {
	                    return _this2._recalculate(nextProps);
	                });
	            } else {
	                this._recalculate(nextProps);
	            }
	            // 调用方保证 指定value时的 路径不存在 async
	        }
	
	        // shouldComponentUpdate(nextProps, nextState) {
	        //     const shouldItemUpdate = nextProps.dataSource !== this.props.dataSource
	        //     || this.state.route.join('-') !== nextState.route.join('-')
	        //     || this.props.value !== nextProps.value;
	        //     return shouldItemUpdate;
	        // }
	
	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate() {
	            this.prevValue = this.props.value.slice(0);
	        }
	    }, {
	        key: '_recalculate',
	        value: function _recalculate(props) {
	            this.calcPath();
	            this.newItems = this._getItemsByValue(props.value);
	        }
	    }, {
	        key: 'calcPath',
	        value: function calcPath() {
	            this.path = [];
	            this.pathIndex = [];
	            this._recursionDataSourceForPath(this.props.dataSource, 0);
	        }
	    }, {
	        key: '_handleDataSource',
	        value: function _handleDataSource(dataSource, prev) {
	            var _this3 = this;
	
	            if (Array.isArray(dataSource.subList)) {
	                dataSource.subList.forEach(function (item) {
	                    var key = prev.concat(item.value);
	                    if (!item.key) {
	                        item.key = key.join('-');
	                    }
	                    if (item.subList) {
	                        _this3._handleDataSource(item, key);
	                    }
	                });
	            }
	            return dataSource;
	        }
	    }, {
	        key: '_recursionDataSourceForPath',
	        value: function _recursionDataSourceForPath(data, level) {
	            var _this4 = this;
	
	            if (!Array.isArray(data.subList) || data.subList.length === 0) {
	                return;
	            }
	            var len = this.props.value.length;
	            var effectValue = void 0;
	            if (new RegExp('^' + this.state.route.slice(0, len - 1).join('_')).test(this.props.value.slice(0, len - 1).join('_'))) {
	                effectValue = this.props.value.slice(0)[level];
	                effectValue = Array.isArray(effectValue) ? effectValue[0] : effectValue;
	            }
	            var value = this.state.route[level] || effectValue || data.defaultValue || data.subList[0].value;
	            data.subList.some(function (item, index) {
	                if (item.value === value) {
	                    _this4.pathIndex[level] = index;
	                    _this4.path[level] = value;
	                    if (item.subList) {
	                        _this4._recursionDataSourceForPath(item, level + 1);
	                    }
	                    return true;
	                }
	                return false;
	            });
	        }
	    }, {
	        key: '_handleItemChecked',
	        value: function _handleItemChecked(_ref) {
	            var item = _ref.item,
	                level = _ref.level,
	                data = _ref.data;
	
	            if (this.path.slice(0, level).join('-') !== this.props.value.slice(0, level).join('-')) {
	                if (!item.subList && item.value === data.defaultValue) {
	                    return true;
	                }
	                return false;
	            }
	            if (Array.isArray(this.props.value[level])) {
	                return !!~this.props.value[level].indexOf(item.value);
	            }
	            if (item.value === this.props.value[level]) return true;
	            if (this.props.value[level] == null && !item.subList && item.value === data.defaultValue) {
	                return true;
	            }
	            return false;
	        }
	    }, {
	        key: '_handleItemRender',
	        value: function _handleItemRender(data, level, item, i) {
	            var isChecked = this._handleItemChecked({ item: item, level: level, data: data, index: i });
	            var type = item.itemType || data.subItemType;
	            var itemState = {
	                level: level,
	                index: this.path.slice(0, level).concat(item.value).join('-'),
	                route: this.pathIndex.slice(0, level).concat(i).join('>'),
	                isLeaf: !item.subList,
	                isSpread: item.value === this.path[level] && !!item.subList,
	                isChecked: isChecked,
	                data: item
	            };
	            switch (type) {
	                case 'MENU':
	                    return _react2.default.createElement(_multilistitem.MenuItem, itemState);
	                case 'RADIO':
	                    return _react2.default.createElement(_multilistitem.RadioItem, itemState);
	                case 'CHECKBOX':
	                    return _react2.default.createElement(_multilistitem.CheckboxItem, itemState);
	                default:
	                    return this.props.renderItem(_extends({ itemType: type }, itemState));
	            }
	        }
	    }, {
	        key: '_handleShouldItemUpdate',
	        value: function _handleShouldItemUpdate(level, isLastLevel, ret, nextItem, nowItem) {
	            var isUpdate = false;
	            if (isLastLevel) {
	                return true;
	            }
	            if (nextItem.value !== nowItem.value) {
	                isUpdate = true;
	            }
	            if (!isUpdate && this.prevValue[level] !== this.props.value[level] && (nowItem.value === this.prevValue[level] || nowItem.value === this.props.value[level])) {
	                isUpdate = true;
	            }
	            // 路径的更改
	            if (!isUpdate && this.prevPath[level] !== this.path[level]) {
	                isUpdate = nowItem.value === this.prevPath[level] || nowItem.value === this.path[level];
	            }
	            return isUpdate;
	        }
	    }, {
	        key: '_handleItemExtraClass',
	        value: function _handleItemExtraClass(data, level, item) {
	            return item.value === this.path[level] && item.subList ? 'spread' : '';
	        }
	    }, {
	        key: '_handleItemTap',
	        value: function _handleItemTap(data, level, item, index, target) {
	            var _this5 = this;
	
	            var type = item.itemType || data.subItemType;
	            var upLevel = level;
	            var newItems = this.newItems;
	            var newValue = void 0;
	            this.calcPath();
	            // setState is async
	            this.setState({
	                route: item.subList ? this.path.slice(0, level).concat(item.value) : this.path.slice(0, level)
	            }, function () {
	                switch (type) {
	                    case 'MENU':
	                        {
	                            var constDataSource = _this5.props.dataSource.subList;
	                            var syncItem = _this5.pathIndex.some(function (i) {
	                                if (constDataSource[i].subList === 'ASYNC') {
	                                    constDataSource = constDataSource[i];
	                                    return true;
	                                }
	                                constDataSource = constDataSource[i].subList;
	                                return false;
	                            });
	                            if (syncItem) {
	                                _this5.props.onUpdateData(constDataSource);
	                            }
	                            return;
	                        }
	                    case 'RADIO':
	                        newValue = _this5.path.slice(0, upLevel).concat(item.value);
	                        newItems = _this5._getItemsByRoute(_this5.pathIndex.slice(0, upLevel)).concat(item);
	                        break;
	                    case 'CHECKBOX':
	                        if (_this5.path.slice(0, upLevel).join('-') === _this5.props.value.slice(0, upLevel).join('-')) {
	                            newValue = _this5.props.value.slice(0);
	                            var tmpValue = newValue[level];
	                            if (Array.isArray(tmpValue) && tmpValue.length > 0) {
	                                var valueIndex = tmpValue.indexOf(item.value);
	                                if (valueIndex !== -1) {
	                                    tmpValue.splice(valueIndex, 1);
	                                    newItems[level].splice(valueIndex, 1);
	                                } else {
	                                    tmpValue.push(item.value);
	                                    newItems[level].push(item);
	                                }
	                            } else {
	                                tmpValue = [item.value];
	                                newItems[level] = [item];
	                            }
	                            // handle final value
	                            if (tmpValue.length > 0) {
	                                newValue[level] = tmpValue;
	                            } else {
	                                newValue = [];
	                                newItems = [];
	                            }
	                        } else {
	                            newValue = _this5.path.slice(0, upLevel);
	                            newValue.push([item.value]);
	                            newItems = _this5._getItemsByRoute(_this5.pathIndex.slice(0, upLevel));
	                            newItems.push([item]);
	                        }
	                        break;
	                    default:
	                        newValue = _this5.props.onItemTap({ data: data, level: level, item: item, index: index, target: target });
	                }
	                // if (newValue[newValue.length - 1] == null) {
	                // newValue = [];
	                // }
	                _this5.newItems = newItems;
	                _this5.props.onChange({ newValue: newValue, oldValue: _this5.props.value, level: level, newItems: newItems });
	            });
	        }
	    }, {
	        key: '_getItemsByRoute',
	        value: function _getItemsByRoute(route, dataSource) {
	            var _this6 = this;
	
	            var constDataSource = dataSource || this.props.dataSource;
	            return route.map(function (item) {
	                var ret = null;
	                if (Array.isArray(item)) {
	                    ret = _this6._getItemsByRoute(item, constDataSource);
	                } else {
	                    constDataSource = constDataSource.subList[item];
	                    ret = constDataSource;
	                }
	                return ret;
	            });
	        }
	    }, {
	        key: '_getItemsByValue',
	        value: function _getItemsByValue(value) {
	            var constDataSource = this.props.dataSource;
	            return value.map(function (item) {
	                var valueR = void 0;
	                if (Array.isArray(item)) {
	                    return constDataSource.subList.filter(function (i) {
	                        return ~item.indexOf(i.value);
	                    });
	                }
	                constDataSource.subList.some(function (i) {
	                    if (item === i.value) {
	                        valueR = i;
	                        constDataSource = i;
	                        return true;
	                    }
	                    return false;
	                });
	                return valueR;
	            });
	        }
	    }, {
	        key: '_recursionRender',
	        value: function _recursionRender(data, level) {
	            if (!data.subList) {
	                return;
	            }
	            if (Array.isArray(data.subList) && data.subList.length > 0) {
	                this.children.push(_react2.default.createElement(
	                    'div',
	                    { className: (0, _classnames2.default)('item', 'item-' + level), key: this.path.slice(0, level).join('_') },
	                    _react2.default.createElement(_list2.default, {
	                        dataSource: data.subList,
	                        infinite: false,
	                        extraClass: (0, _classnames2.default)(['yo-scroller-fullscreen', 'item', 'item-' + level]),
	                        onItemTap: this._handleItemTap.bind(this, data, level),
	                        renderItem: this._handleItemRender.bind(this, data, level),
	                        itemExtraClass: this._handleItemExtraClass.bind(this, data, level),
	                        shouldItemUpdate: this._handleShouldItemUpdate.bind(this, level, !data.subList[this.pathIndex[level]].subList)
	                    })
	                ));
	                this._recursionRender(data.subList[this.pathIndex[level]], level + 1);
	                return;
	            }
	            switch (data.subList) {
	                case 'EMPTY':
	                    this.children.push(_react2.default.createElement(
	                        'div',
	                        {
	                            className: (0, _classnames2.default)('item', 'item-' + level),
	                            key: this.path.slice(0, level).join('_')
	                        },
	                        _react2.default.createElement(_multilistitem.EmptyList, null)
	                    ));
	                    break;
	                case 'FAULT':
	                    this.children.push(_react2.default.createElement(
	                        'div',
	                        {
	                            className: (0, _classnames2.default)('item', 'item-' + level),
	                            key: this.path.slice(0, level).join('_')
	                        },
	                        _react2.default.createElement(_multilistitem.FaultList, null)
	                    ));
	                    break;
	                case 'ASYNC':
	                    this.children.push(_react2.default.createElement(
	                        'div',
	                        {
	                            className: (0, _classnames2.default)('item', 'item-' + level),
	                            key: this.path.slice(0, level).join('_')
	                        },
	                        _react2.default.createElement(_multilistitem.LoadingList, null)
	                    ));
	                    break;
	                default:
	                    this.children.push(_react2.default.createElement(
	                        'div',
	                        { className: (0, _classnames2.default)('item', 'item-' + level), key: this.path.slice(0, level).join('_') },
	                        this.props.renderContent({ type: data.subList, data: data, level: level })
	                    ));
	            }
	        }
	
	        /**
	         * @skip
	         * @description 渲染多级列表的调用函数
	         * @return {Array} 列表的虚拟dom树
	         */
	
	    }, {
	        key: 'renderList',
	        value: function renderList() {
	            this.children = [];
	            this.prevPath = this.path.slice(0);
	            this.calcPath();
	            this._recursionRender(this.state.dataSource, 0);
	            return this.children;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var extraClass = this.props.extraClass;
	
	            return _react2.default.createElement(
	                'div',
	                { className: (0, _classnames2.default)(['yo-multilist'], extraClass) },
	                this.renderList()
	            );
	        }
	    }]);
	
	    return MultiList;
	}(_react.Component);
	
	MultiList.propTypes = {
	    /**
	     * 原始数据用于生成列表
	     * @property dataSource
	     * @type Array
	     * @description
	     * dataSource 是一个树形的结构，每一个层级会有defaultValue，表示默认展开该哪个item或者默认选中项（非必填），subList为下级层级的内容，subList的每个字项设置内容如下。
	     *
	     * - name 为文字描述
	     * - value 该项value
	     * - subItemType 用于设置下一层级的list item使用的组件，内置 `MENU`,`RADIO`,`CHECKBOX`。如果传入的字符不在默认序列中会触发组件的renderItem方法，由用户自行渲染。
	     * - itemType 用于定义当前item 使用的组件，优先级高于父层级的 `subItemType`。
	     * - subList支持数组和String类型，当传入array类型渲染为列表，
	     * 内置String为`FAULT`，`ASYNC`，`EMPTY`对应内置模板分别用于展示加载错误，加载中，加载内容为空三种情况，
	     * 其中加载`ASYNC`会触发onUpdateData事件，通知用户更新数据。用户可以通过自定义字符串，触发renderContent方法，
	     * 返回ReactElement作为内容并进行其他操作。
	     * - defaultValue 表示该层级的默认值，若下一级为最后一层级表示，默认值[注意：默认值不会作为value]。
	     *
	     * @example
	     * const dataSource = {
	     *   defaultValue: 1,
	     *   subItemType: 'MENU',
	     *   subList: [{
	     *       name: '同步',
	     *      value: 1,
	     *      defaultValue: '1-1',
	     *      subItemType: 'RADIO',
	     *      subList: [{
	     *          name: '1-1  默认选项',
	     *          value: '1-1'
	     *      }, {
	     *          name: '1-2',
	     *          value: '1-2'
	     *      }, {
	     *          name: '1-3',
	     *          value: '1-3'
	     *      }, {
	     *          name: '1-4',
	     *          value: '1-4'
	     *      }]
	     *  }, {
	     *      name: '异步',
	     *      value: 2,
	     *      subItemType: 'RADIO',
	     *      defaultValue: '2-2',
	     *      subList: 'ASYNC',
	     *      asyncType: '2-2'
	     *   }]
	     *  };
	     */
	    dataSource: _propTypes2.default.shape({
	        subItemType: _propTypes2.default.string.isRequired,
	        onItemTapType: _propTypes2.default.string,
	        subList: _propTypes2.default.array.isRequired,
	        defaultValue: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string, _propTypes2.default.number])
	    }).isRequired,
	    /**
	     * @property value
	     * @type  Array
	     * @description mutliList的值，该值为点选的value
	     */
	    value: _propTypes2.default.array,
	    /**
	     * @property onChange
	     * @type Function
	     * @description
	     * 用于更新结果的回调函数
	     * @example
	     *  function({level, listValue, newValue, newItems}){
	     *  	level 表示当前菜单层级
	     *  	oldValue 表示当前multiList的value
	     *  	newValue 表示更新后的multiList的value
	     *      newItems 表示更新后的value对应的item
	     * 	}
	     */
	    onChange: _propTypes2.default.func.isRequired,
	    /**
	     * @property extraClass
	     * @type String
	     * @description 给组件根节点附加的额外样式类
	     * @default null
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property onItemTap
	     * @type Function
	     * @description 当Item的类型不是'MENU'、'CHECKBOX'、'RADIO'，该事件将会被触发。事件处理函数需要有返回值，该值将会作为`newValue`触发组件的`onChange`事件。
	     * @param {data, level, item, index, target} 父层数据，层级，改节点数据，该节点索引，
	     */
	    onItemTap: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	    /**
	     * @property renderItem
	     * @type Function
	     * @description 当Item的类型不是'MENU'、'CHECKBOX'、'RADIO'，该事件将会被触发。事件处理函数需要有返回值，返回值是`PropsTypes.element`类型作为`List`的 `item`。
	     * @param {itemType, data, level, item, index, target}  父层数据，节点所在层级，节点数据，该节点在父节点`subList`中的索引，
	     * @example
	     * renderItem={(item)=>{
	     *      const {itemType, data, isSpread, index} = item;
	     *      JSON.stringify(item);
	     *      // {  "itemType":"ProductMenu", 节点的Type类型（此时的`itemType`是组件根据父节点`subItemType`和该节点`itemType`按照优先级处理过的值。）
	     *      //    "level":0, item所在层级
	     *      //    "index":"2", item所在父节点subList
	     *      //    "route": "1>2>1", item在dataSource中的索引值
	     *      //    "isLeaf":false, 该节点是否为叶子节点
	     *      //    "isSpread":false, 如果该节点为父节点时该值表示该节点是否是展开的
	     *      //    "isChecked":false, 该节点是否是有效值
	     *      //    "data":{"name":"产品2","value":2,"subList":"product2","key":1,"_index":1} 原数据内容`key`值为组建计算由于优化List性能，如原数据中有设置则使用原数据，单请调用者保证key值在该层级中的唯一性。
	     *      // }
	     *      switch (itemType){
	     *          case 'ProductMenu':
	     *              return <ProductMenu data={data} isSpread={isSpread} index={index}/>
	     *      }
	     * }}
	     */
	    renderItem: _propTypes2.default.oneOfType([_propTypes2.default.func, _propTypes2.default.string]),
	    /**
	     * @property renderContent
	     * @type Function
	     * @description 当subList的类型不是array，该事件将会被触发，事件处理函数需要有返回值，返回值是`PropsTypes.element`类型作为`List`的 `item`。
	     * @param {itemType, data, level} 节点的Type类型， 父层数据，层级，改节点数据，该节点索引，
	     * @example
	     * renderContent={(item) => {
	     *      const {type} = item;
	     *      console.log(JSON.stringify(item));
	     *      // {"type":"product1","data":{"name":"产品1","value":1,"subList":"product1","key":"1"},"level":1}
	     *      switch (type){
	     *          case 'product1':
	     *              return <Product tit="product1" />;
	     *          case 'product2':
	     *              return <Product tit="product2" />;
	     *      }
	     *  }}
	     */
	    renderContent: _propTypes2.default.func,
	    /**
	     * @property onUpdateData
	     * @type Function
	     * @description 当加载的层级为`ASYNC`时触发，用于用户更新dataSource，用户通过获取数据中的内容判断如何更新dataSource。
	     * @param data 父节点的数据
	     */
	    onUpdateData: _propTypes2.default.func
	};
	MultiList.defaultProps = {
	    extraClass: '',
	    value: []
	};
	exports.default = MultiList;

/***/ },
/* 108 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.LoadingList = exports.FaultList = exports.EmptyList = exports.MenuItem = exports.RadioItem = exports.CheckboxItem = undefined;
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ITEMPROPSCONFIG = {
	    data: _propTypes2.default.object,
	    level: _propTypes2.default.number,
	    isChecked: _propTypes2.default.bool,
	    isSpread: _propTypes2.default.bool,
	    isLeaf: _propTypes2.default.bool,
	    index: _propTypes2.default.string,
	    route: _propTypes2.default.string
	};
	
	var CheckboxItem = exports.CheckboxItem = function CheckboxItem(props) {
	    return _react2.default.createElement(
	        'div',
	        {
	            className: 'select-checkbox',
	            'data-type': 'CHECKBOX',
	            'data-index': props.index || null,
	            'data-route': props.route || null
	        },
	        _react2.default.createElement(
	            'div',
	            { className: 'yo-checked yo-checked-checkbox' },
	            _react2.default.createElement('input', { type: 'radio', checked: props.isChecked, readOnly: 'readOnly' }),
	            _react2.default.createElement('span', { className: 'type' })
	        ),
	        _react2.default.createElement(
	            'p',
	            { className: 'content' },
	            props.data.name
	        )
	    );
	};
	CheckboxItem.propTypes = ITEMPROPSCONFIG;
	
	var RadioItem = exports.RadioItem = function RadioItem(props) {
	    return _react2.default.createElement(
	        'div',
	        {
	            className: (0, _classnames2.default)('select-checkbox', { checked: props.isChecked }),
	            'data-type': 'RADIO',
	            'data-index': props.index || null,
	            'data-route': props.route || null
	        },
	        _react2.default.createElement(
	            'div',
	            { className: 'yo-checked yo-checked-radio' },
	            _react2.default.createElement('input', { type: 'radio', checked: props.isChecked, readOnly: 'readOnly' }),
	            _react2.default.createElement('span', { className: 'type' })
	        ),
	        _react2.default.createElement(
	            'span',
	            { className: 'content' },
	            props.data.name
	        )
	    );
	};
	RadioItem.propTypes = ITEMPROPSCONFIG;
	
	var MenuItem = exports.MenuItem = function MenuItem(props) {
	    return _react2.default.createElement(
	        'div',
	        {
	            className: (0, _classnames2.default)('select-checkbox', 'multi-list-content', {
	                spread: props.isSpread,
	                effect: props.isChecked
	            }),
	            'data-type': 'MENU',
	            'data-index': props.index || null,
	            'data-route': props.route || null
	        },
	        _react2.default.createElement(
	            'div',
	            { className: 'yo-checked yo-checked-dot' },
	            _react2.default.createElement('input', { type: 'radio', checked: props.isChecked, readOnly: 'readOnly' }),
	            _react2.default.createElement('span', { className: 'type' })
	        ),
	        _react2.default.createElement(
	            'span',
	            { className: 'content' },
	            props.data.name
	        )
	    );
	};
	MenuItem.propTypes = ITEMPROPSCONFIG;
	
	var EmptyList = exports.EmptyList = function EmptyList() {
	    return _react2.default.createElement(
	        'p',
	        { className: 'multiList-container-tip' },
	        '\u6570\u636E\u4E3A\u7A7A'
	    );
	};
	var FaultList = exports.FaultList = function FaultList() {
	    return _react2.default.createElement(
	        'p',
	        { className: 'multiList-container-tip' },
	        '\u6570\u636E\u52A0\u8F7D\u5931\u8D25'
	    );
	};
	var LoadingList = exports.LoadingList = function LoadingList() {
	    return _react2.default.createElement(
	        'p',
	        { className: 'multiList-container-tip' },
	        '\u6570\u636E\u52A0\u8F7D\u4E2D......'
	    );
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(110);
	
	var _picker = __webpack_require__(85);
	
	var _picker2 = _interopRequireDefault(_picker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _picker2.default;

/***/ },
/* 110 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(112);
	
	var _popup = __webpack_require__(31);
	
	var _popup2 = _interopRequireDefault(_popup);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _popup2.default;

/***/ },
/* 112 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(114);
	
	var _popupdatetimepicker = __webpack_require__(115);
	
	var _popupdatetimepicker2 = _interopRequireDefault(_popupdatetimepicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _popupdatetimepicker2.default;

/***/ },
/* 114 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 115 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _popup = __webpack_require__(31);
	
	var _popup2 = _interopRequireDefault(_popup);
	
	var _datetimepicker = __webpack_require__(84);
	
	var _datetimepicker2 = _interopRequireDefault(_datetimepicker);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component PopupDateTimePicker
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.5
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 由`Popup`和`DateTimePicker`组件结合的组件，能够方便的创建一个可弹出的 DateTimePicker。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./popupDateTimepicker.md}{instruUrl: popupdatetimepicker.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author tianqi.tian
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    /**
	     * @property touchClass
	     * @type String
	     * @default null
	     * @description 定制触发区域和弹出式选择器触摸时附加的 className，必须。
	     */
	    touchClass: _propTypes2.default.string.isRequired,
	    /**
	     * @property value
	     * @type Number/String
	     * @default null
	     * @description 组件的 value，参考网页`select`标签的 value 属性。
	     *
	     * value是一个严格受控属性，只能通过的父组件改变，你需要设置 onChange 属性来控制 value 属性的变化。
	     */
	    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	    /**
	     * @property range
	     * @type array
	     * @default null
	     * @description 可选日期/时间的范围。格式为['YYYY-MM-DD','YYYY-MM-DD']或者['HH-MM','HH-MM']。
	     */
	    range: _propTypes2.default.array,
	    /**
	     * @property onChange
	     * @type Function
	     * @default () => {}
	     * @param value 当前 datetimepicker 的 value
	     * @description 弹出式选择器 Ok 按钮点击后的回调，必须。
	     */
	    onChange: _propTypes2.default.func.isRequired,
	    /**
	     * @property onSelect
	     * @type Function
	     * @param value 当前的 option 的 value，如果开启了多列模式，那么返回值将是一个包含了每一列value的数组。
	     * @version 3.0.16
	     * @description 当选择器选择值发生改变时的回调。
	     */
	    onSelect: _propTypes2.default.func,
	    /**
	     * @property popupHeader
	     * @type Object
	     * @default  {
	     *   title: '',
	     *   okBtn: { text: '确定', touchClass: 'action-touch' },
	     *   cancelBtn: { text: '取消', touchClass: 'action-touch' }
	     * }
	     * @description popup 区域头部的标题和按钮定制，分别为 title、okBtn 和 cancelBtn，
	     *
	     * 通过 title 键值定制 Popup 组件头部的标题文本。
	     *
	     * 通过 text 和 touchClass 键值定制按钮显示的文本和触摸按钮时附加的 className
	     */
	    popupHeader: _propTypes2.default.shape({
	        title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	        okBtn: _propTypes2.default.shape({
	            text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	            touchClass: _propTypes2.default.string
	        }),
	        cancelBtn: _propTypes2.default.shape({
	            text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	            touchClass: _propTypes2.default.string
	        })
	    }),
	    /**
	     * @property duration
	     * @type Number
	     * @default 200ms
	     * @description `Popup`组件的 duration 属性。组件内容显隐时，动画执行时间，单位：ms
	     */
	    duration: _propTypes2.default.number,
	    /**
	     * @property pickerHeight
	     * @type Number
	     * @default 150
	     * @description `DateTimePicker`组件的 height 属性。控制`Picker`组件显示的内容高度
	     */
	    pickerHeight: _propTypes2.default.number.isRequired,
	    /**
	     * `DateTimePicker`组件的 dateOrTime 属性。日期或者时间模式
	     *
	     * @property dateOrTime
	     * @type Enum {'date', 'time'},
	     * @description `DateTimePicker`组件的 dateOrTime 属性。受控属性：'date'代表日期模式，即年月日模式，'time'代表时间模式，即时分模式
	     * @default 'date'
	     */
	    dateOrTime: _propTypes2.default.oneOf(['date', 'time']),
	    /**
	     * `DateTimePicker`组件的 loop 属性。循环滚动模式
	     *
	     * @property loop
	     * @type Array<Bool>
	     * @description `DateTimePicker`组件的 loop 属性。受控属性：设置为 true，为无限循环滚动模式，反之为有限模式；默认为 true
	     * @default [true, true, true]
	     */
	    loop: _propTypes2.default.arrayOf(_propTypes2.default.bool),
	    /**
	     * `DateTimePicker`组件的 unitsInline 属性。内联单位
	     *
	     * @property unitsInline
	     * @type Array<String>
	     * @description `DateTimePicker`组件的 unitsInline 属性。受控属性：在对应栏里的每个选项里添加对应的单位
	     * @default []
	     */
	    unitsInline: _propTypes2.default.arrayOf(_propTypes2.default.string),
	    /**
	     * @property popupExtraClass
	     * @type String
	     * @default null
	     * @description 附加popup区域根节点的额外 class
	     */
	    popupExtraClass: _propTypes2.default.string,
	    /**
	     * @property beforePopupShow
	     * @type Function
	     * @default null
	     * @version 3.0.8
	     * @description 该函数在点击触发区域后，Popup 弹层弹出前执行。当其返回值为 false 时，Popup 弹层将不会弹出。
	     *
	     * 该属性可以用于 value 值的校验，当 value 值不合法时通过函数控制展示相应的提示。
	     */
	    beforePopupShow: _propTypes2.default.func,
	    children: _propTypes2.default.element
	};
	
	var defaultProps = {
	    touchClass: null,
	    dateOrTime: 'date',
	    value: null,
	    popupHeader: {
	        title: null,
	        okBtn: { text: '确定', touchClass: 'action-touch' },
	        cancelBtn: { text: '取消', touchClass: 'action-touch' }
	    },
	    onChange: function onChange() {},
	    onSelect: function onSelect() {},
	    pickerHeight: 150,
	    duration: 200,
	    loop: [true, true, true],
	    unitsInline: ['年', '月', '日'],
	    fieldExtraClass: null,
	    beforPopupShow: function beforPopupShow() {
	        return true;
	    },
	    popupExtraClass: null
	};
	
	// picker默认选择第一项
	function defaultPickerValue(dateOrTime, props) {
	    var now = new Date();
	    var range = props.range;
	
	    var value = null;
	
	    if (Array.isArray(range) && range.length > 0) {
	        value = range[0];
	    } else {
	        if (dateOrTime === 'date') {
	            value = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate();
	        } else if (dateOrTime === 'time') {
	            value = now.getHours() + ':' + now.getMinutes();
	        }
	    }
	    return value;
	}
	
	var PopupDateTimePicker = function (_Component) {
	    _inherits(PopupDateTimePicker, _Component);
	
	    function PopupDateTimePicker(props) {
	        _classCallCheck(this, PopupDateTimePicker);
	
	        var _this = _possibleConstructorReturn(this, (PopupDateTimePicker.__proto__ || Object.getPrototypeOf(PopupDateTimePicker)).call(this, props));
	
	        _this.state = {
	            show: false,
	            pickerValue: null
	        };
	        return _this;
	    }
	
	    _createClass(PopupDateTimePicker, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            var _props = this.props,
	                value = _props.value,
	                dateOrTime = _props.dateOrTime;
	
	            if (value === null || value === undefined) {
	                this.setState({
	                    pickerValue: defaultPickerValue(dateOrTime, this.props)
	                });
	            } else {
	                this.setState({
	                    pickerValue: value
	                });
	            }
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.value != null && nextProps.value !== this.state.pickerValue) {
	                this.setState({
	                    pickerValue: nextProps.value
	                });
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            document.body.removeChild(this.wrapper);
	        }
	    }, {
	        key: 'createWrapper',
	        value: function createWrapper() {
	            this.wrapper = document.createElement('div');
	            this.wrapper.className = 'this-element-is-a-tricky-hack-for-popupdatetimepicker-please-just-ignore-it';
	            document.body.appendChild(this.wrapper);
	        }
	    }, {
	        key: 'handleTap',
	        value: function handleTap() {
	            var beforePopupShow = this.props.beforePopupShow;
	
	            var _willShow = true;
	            if ((0, _util.isFunction)(beforePopupShow)) {
	                _willShow = beforePopupShow();
	            }
	            if (_willShow !== false) {
	                this.show();
	            }
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            this.setState({ show: true });
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this.setState({ show: false });
	        }
	    }, {
	        key: 'handlePopupOk',
	        value: function handlePopupOk() {
	            var _this2 = this;
	
	            var onChange = this.props.onChange;
	
	            return function () {
	                _this2.hide();
	                onChange(_this2.state.pickerValue);
	            };
	        }
	    }, {
	        key: 'handlePopupCancel',
	        value: function handlePopupCancel() {
	            var _props2 = this.props,
	                value = _props2.value,
	                dateOrTime = _props2.dateOrTime;
	
	            this.hide();
	            if (value === null || value === undefined) {
	                this.setState({
	                    pickerValue: defaultPickerValue(dateOrTime, this.props)
	                });
	            } else {
	                this.setState({
	                    pickerValue: value
	                });
	            }
	        }
	    }, {
	        key: 'handlePickerChange',
	        value: function handlePickerChange(value) {
	            var onSelect = this.props.onSelect;
	
	            this.setState({
	                pickerValue: value
	            });
	            onSelect && (0, _util.isFunction)(onSelect) && onSelect(this.state.pickerValue);
	        }
	    }, {
	        key: 'renderPicker',
	        value: function renderPicker() {
	            var _props3 = this.props,
	                dateOrTime = _props3.dateOrTime,
	                popupHeader = _props3.popupHeader,
	                pickerHeight = _props3.pickerHeight,
	                duration = _props3.duration,
	                loop = _props3.loop,
	                unitsInline = _props3.unitsInline,
	                popupExtraClass = _props3.popupExtraClass,
	                range = _props3.range;
	
	            var okBtn = null;
	            var cancelBtn = null;
	            var title = null;
	            if (popupHeader) {
	                title = popupHeader.title || defaultProps.popupHeader.title;
	                okBtn = popupHeader.okBtn || defaultProps.popupHeader.okBtn;
	                cancelBtn = popupHeader.cancelBtn || defaultProps.popupHeader.cancelBtn;
	            }
	            return _react2.default.createElement(
	                _popup2.default,
	                {
	                    show: this.state.show,
	                    duration: duration,
	                    extraClass: (0, _classnames2.default)(popupExtraClass, 'yo-popup yo-popup-picker'),
	                    onMaskTap: this.handlePopupCancel.bind(this)
	                },
	                _react2.default.createElement(
	                    'header',
	                    { className: 'yo-header' },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'title' },
	                        title
	                    ),
	                    _react2.default.createElement(
	                        _touchable2.default,
	                        {
	                            onTap: this.handlePopupCancel.bind(this),
	                            touchClass: cancelBtn.touchClass || defaultProps.popupHeader.cancelBtn.touchClass
	                        },
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'regret' },
	                            cancelBtn.text || defaultProps.popupHeader.cancelBtn.text
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _touchable2.default,
	                        {
	                            onTap: this.handlePopupOk(),
	                            touchClass: okBtn.touchClass || defaultProps.popupHeader.okBtn.touchClass
	                        },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'affirm' },
	                            okBtn.text || defaultProps.popupHeader.okBtn.text
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'bd' },
	                    _react2.default.createElement(_datetimepicker2.default, {
	                        value: this.state.pickerValue,
	                        unitsInline: unitsInline,
	                        dateOrTime: dateOrTime,
	                        onChange: this.handlePickerChange.bind(this),
	                        height: pickerHeight,
	                        loop: loop,
	                        range: range
	                    })
	                )
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var touchClass = this.props.touchClass;
	
	            if (this.wrapper == null) {
	                this.createWrapper();
	            }
	            return _react2.default.createElement(
	                _react.Fragment,
	                null,
	                _react2.default.createElement(
	                    _touchable2.default,
	                    {
	                        onTap: this.handleTap.bind(this),
	                        touchClass: touchClass
	                    },
	                    this.props.children
	                ),
	                _reactDom2.default.createPortal(this.renderPicker(), this.wrapper)
	            );
	        }
	    }]);
	
	    return PopupDateTimePicker;
	}(_react.Component);
	
	PopupDateTimePicker.propTypes = propTypes;
	PopupDateTimePicker.defaultProps = defaultProps;
	
	exports.default = PopupDateTimePicker;

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(117);
	
	var _popuppicker = __webpack_require__(118);
	
	var _popuppicker2 = _interopRequireDefault(_popuppicker);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _popuppicker2.default;

/***/ },
/* 117 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 118 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _popup = __webpack_require__(31);
	
	var _popup2 = _interopRequireDefault(_popup);
	
	var _picker = __webpack_require__(85);
	
	var _picker2 = _interopRequireDefault(_picker);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component PopupPicker
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.5
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 由`Popup`和`Picker`组件结合的组件，能够方便的创建一个可弹出的Picker。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./popuppicker.md}{instruUrl: popuppicker.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author tianqi.tian
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    /**
	     * @property touchClass
	     * @type String
	     * @default null
	     * @description 定制触发区域和弹出式选择器触摸时附加的 className，必须
	     */
	    touchClass: _propTypes2.default.string.isRequired,
	    /**
	     * @property value
	     * @type Number/String/Array <Number, String>
	     * @default null
	     * @description 组件的 value，参考网页`select`标签的 value 属性。
	     *
	     * value 是一个严格受控属性，只能通过的父组件改变，你需要设置 onChange 属性来控制 value 属性的变化。
	     *
	     * 在开启了多列模式的情况下（通过设置options属性为一个二维数组），这个属性也应该相应地传入一个数组，每个元素对应着该列的value。
	     * 如果value数组和options数组的length不相等，那么空缺的value会被设为null。
	     */
	    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]))]),
	    /**
	     * @property onChange
	     * @type Function
	     * @param value 当前的 option 的 value，如果开启了多列模式，那么返回值将是一个包含了每一列value的数组。
	     * @description 弹出式选择器 Ok 按钮点击后的回调，必须。
	     */
	    onChange: _propTypes2.default.func.isRequired,
	    /**
	     * @property onSelect
	     * @type Function
	     * @param value 当前的 option 的 value，如果开启了多列模式，那么返回值将是一个包含了每一列value的数组。
	     * @version 3.0.16
	     * @description 当选择器选择值发生改变时的回调。
	     */
	    onSelect: _propTypes2.default.func,
	    /**
	     * @property options
	     * @type Array/Array <Array>
	     * @default null
	     * @description `Picker`组件的 options 属性。数组形式，元素的格式为`{text:string,value:string}`，
	     *
	     * text 为 option 显示的文本，value 为 option 对应的真实值（参考网页 option 标签），
	     *
	     * text 的缺省值为 value，value 必须传入，且只能为字符串/数字类型。
	     *
	     * 如果你传入一个二维数组，那么PopupPicker将会是一个多列的Picker，二维数组的每一个子数组将会作为对应列的option。
	     */
	    options: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	        value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
	    })).isRequired, _propTypes2.default.arrayOf(_propTypes2.default.arrayOf(_propTypes2.default.shape({
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	        value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired
	    })))]),
	    /**
	     * @property popupHeader
	     * @type Object
	     * @default {
	     *   title: '',
	     *   okBtn: { text: '确定', touchClass: 'action-touch' },
	     *   cancelBtn: { text: '取消', touchClass: 'action-touch' }
	     * }
	     * @description popup 区域头部的标题和按钮定制，分别为 title、okBtn 和 cancelBtn，
	     *
	     * 通过 title 键值定制 Popup 组件头部的标题文本。
	     *
	     * 通过 text 和 touchClass 键值定制按钮显示的文本和触摸按钮时附加的 className
	     */
	    popupHeader: _propTypes2.default.shape({
	        title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	        okBtn: _propTypes2.default.shape({
	            text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	            touchClass: _propTypes2.default.string
	        }),
	        cancelBtn: _propTypes2.default.shape({
	            text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.element]),
	            touchClass: _propTypes2.default.string
	        })
	    }),
	    /**
	     * @property duration
	     * @type Number
	     * @default 200ms
	     * @description `Popup`组件的 duration 属性。组件内容显隐时，动画执行时间，单位：ms
	     */
	    duration: _propTypes2.default.number,
	    /**
	     * @property pickerHeight
	     * @type Number
	     * @default 150
	     * @description `Picker`组件的 height 属性。控制 Picker 组件显示的内容高度
	     */
	    pickerHeight: _propTypes2.default.number.isRequired,
	    /**
	     * @property looped
	     * @type Bool
	     * @default true
	     * @description `Picker`组件的 looped 属性。是否采用循环模式，默认为 true。
	     *
	     * 这个属性可以接收两种形式的参数，如果你传入Bool类型，那么将会应用于所有的列上（如果你使用了多列的Picker）。
	     * 如果传入一个数组，那么可以针对每一列的Picker分别定义。
	     */
	    looped: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.arrayOf(_propTypes2.default.bool)]),
	    /**
	     * @property unit
	     * @type Number/String/Array
	     * @default null
	     * @description `Picker`组件的 unit 属性。显示在 picker 右侧的单位。
	     *
	     * 这个属性可以接收两种形式的参数，如果你传入Number或者String类型，那么将会应用于所有的列上（如果你使用了多列的Picker）。
	     * 如果传入一个数组，那么可以针对每一列的Picker分别定义。
	     */
	    unit: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]))]),
	    /**
	     * @property popupExtraClass
	     * @type String
	     * @default null
	     * @description 附加 popup 区域根节点的额外 class
	     */
	    popupExtraClass: _propTypes2.default.string,
	    /**
	     * @property beforePopupShow
	     * @type Function
	     * @default null
	     * @version 3.0.8
	     * @description 该函数在点击触发区域后，Popup 弹层弹出前执行。当其返回值为 false 时，Popup 弹层将不会弹出。
	     *
	     * 该属性主要用于 value 值的校验，当 value 值不合法时通过函数控制展示相应的提示。
	     */
	    beforePopupShow: _propTypes2.default.func,
	    children: _propTypes2.default.element
	};
	
	var defaultProps = {
	    touchClass: '',
	    value: null,
	    options: null,
	    popupHeader: {
	        title: '',
	        okBtn: { text: '确定', touchClass: 'action-touch' },
	        cancelBtn: { text: '取消', touchClass: 'action-touch' }
	    },
	    onChange: function onChange() {},
	    onSelect: function onSelect() {},
	    pickerHeight: 150,
	    duration: 200,
	    looped: true,
	    unit: null,
	    fieldExtraClass: null,
	    beforePopupShow: function beforePopupShow() {
	        return true;
	    },
	    popupExtraClass: null
	};
	
	var PopupPicker = function (_Component) {
	    _inherits(PopupPicker, _Component);
	
	    function PopupPicker(props) {
	        _classCallCheck(this, PopupPicker);
	
	        var _this = _possibleConstructorReturn(this, (PopupPicker.__proto__ || Object.getPrototypeOf(PopupPicker)).call(this, props));
	
	        _this.state = {
	            show: false,
	            pickerValue: null
	        };
	        return _this;
	    }
	
	    _createClass(PopupPicker, [{
	        key: 'componentWillMount',
	        value: function componentWillMount() {
	            var _props = this.props,
	                value = _props.value,
	                options = _props.options;
	
	            this.resetValue(value, options);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.value != null && nextProps.value !== this.state.pickerValue) {
	                this.setState({
	                    pickerValue: this.formatPickerProp(nextProps.value)
	                });
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            document.body.removeChild(this.wrapper);
	        }
	    }, {
	        key: 'getMultiPickerConfig',
	        value: function getMultiPickerConfig(_ref) {
	            var options = _ref.options,
	                looped = _ref.looped,
	                unit = _ref.unit;
	
	            var value = this.state.pickerValue;
	            var renderedOpts = this.formatPickerOpt(options);
	            var renderedLooped = this.formatPickerProp(looped);
	            var renderedUnit = this.formatPickerProp(unit);
	
	            return renderedOpts.map(function (optGroup, i) {
	                return {
	                    options: optGroup,
	                    value: value[i],
	                    looped: renderedLooped[i] != null ? renderedLooped[i] : renderedLooped[0],
	                    unit: renderedUnit[i] != null ? renderedUnit[i] : renderedUnit[0]
	                };
	            });
	        }
	    }, {
	        key: 'getPickerValue',
	        value: function getPickerValue(val, options) {
	            var value = options.find(function (item) {
	                return item.value === val;
	            });
	            var defValue = options[0] ? options[0].value : null;
	            return value ? val : defValue;
	        }
	    }, {
	        key: 'getOnChangeValue',
	        value: function getOnChangeValue(value, i) {
	            return this.state.pickerValue.map(function (val, idx) {
	                return idx === i ? value : val;
	            });
	        }
	    }, {
	        key: 'resetValue',
	        value: function resetValue(value, options) {
	            if (value === null || value === undefined) {
	                this.setState({
	                    pickerValue: this.defaultPickerValue(options)
	                });
	            } else {
	                this.setState({
	                    pickerValue: this.formatPickerProp(value)
	                });
	            }
	        }
	    }, {
	        key: 'handleTap',
	        value: function handleTap() {
	            var beforePopupShow = this.props.beforePopupShow;
	
	            var _willShow = true;
	            if ((0, _util.isFunction)(beforePopupShow)) {
	                _willShow = beforePopupShow();
	            }
	            if (_willShow !== false) {
	                this.show();
	            }
	        }
	    }, {
	        key: 'show',
	        value: function show() {
	            this.setState({ show: true });
	        }
	    }, {
	        key: 'hide',
	        value: function hide() {
	            this.setState({ show: false });
	        }
	    }, {
	        key: 'handlePopupOk',
	        value: function handlePopupOk() {
	            var _this2 = this;
	
	            var onChange = this.props.onChange;
	
	            var renderedOpts = this.formatPickerOpt(this.props.options);
	            var pickerValue = this.state.pickerValue;
	
	            renderedOpts.forEach(function (opt, i) {
	                pickerValue[i] = _this2.getPickerValue(pickerValue[i], opt);
	            });
	            this.setState({ pickerValue: pickerValue });
	            this.hide();
	            onChange(this.state.pickerValue.length > 1 ? this.state.pickerValue : this.state.pickerValue[0]);
	        }
	    }, {
	        key: 'createWrapper',
	        value: function createWrapper() {
	            this.wrapper = document.createElement('div');
	            this.wrapper.className = 'this-element-is-a-tricky-hack-for-popuppicker-please-just-ignore-it';
	            document.body.appendChild(this.wrapper);
	        }
	    }, {
	        key: 'defaultPickerValue',
	        value: function defaultPickerValue(options) {
	            options = this.formatPickerOpt(options);
	            if (Array.isArray(options)) {
	                return options.map(function (pickerOpt) {
	                    return pickerOpt[0].value;
	                });
	            }
	            throw new Error('yo-popuppicker: option属性必须为一个对象数组或者二维数组，请检查。');
	        }
	    }, {
	        key: 'formatPickerOpt',
	        value: function formatPickerOpt(options) {
	            if (!Array.isArray(options[0])) {
	                return [options];
	            }
	            return options;
	        }
	    }, {
	        key: 'formatPickerProp',
	        value: function formatPickerProp(prop) {
	            return Array.isArray(prop) ? prop : [prop];
	        }
	    }, {
	        key: 'handlePopupCancel',
	        value: function handlePopupCancel() {
	            var _props2 = this.props,
	                value = _props2.value,
	                options = _props2.options;
	
	            this.hide();
	            this.resetValue(value, options);
	        }
	    }, {
	        key: 'handlePickerChange',
	        value: function handlePickerChange(option, i) {
	            var onSelect = this.props.onSelect;
	
	            this.setState({
	                pickerValue: this.getOnChangeValue(option.value, i)
	            });
	            onSelect && (0, _util.isFunction)(onSelect) && onSelect(this.state.pickerValue.length > 1 ? this.state.pickerValue : this.state.pickerValue[0]);
	        }
	    }, {
	        key: 'renderPicker',
	        value: function renderPicker() {
	            var _this3 = this;
	
	            var _props3 = this.props,
	                popupHeader = _props3.popupHeader,
	                duration = _props3.duration,
	                pickerHeight = _props3.pickerHeight,
	                popupExtraClass = _props3.popupExtraClass;
	
	            var pickerConfigs = this.getMultiPickerConfig(this.props);
	            var okBtn = null;
	            var cancelBtn = null;
	            var title = null;
	            if (popupHeader) {
	                title = popupHeader.title || defaultProps.popupHeader.title;
	                okBtn = popupHeader.okBtn || defaultProps.popupHeader.okBtn;
	                cancelBtn = popupHeader.cancelBtn || defaultProps.popupHeader.cancelBtn;
	            }
	
	            return _react2.default.createElement(
	                _popup2.default,
	                {
	                    show: this.state.show,
	                    duration: duration,
	                    extraClass: (0, _classnames2.default)(popupExtraClass, 'yo-popup yo-popup-picker'),
	                    onMaskTap: this.handlePopupCancel.bind(this)
	                },
	                _react2.default.createElement(
	                    'header',
	                    { className: 'yo-header yo-header-popup-picker' },
	                    _react2.default.createElement(
	                        'span',
	                        { className: 'title' },
	                        title
	                    ),
	                    _react2.default.createElement(
	                        _touchable2.default,
	                        {
	                            onTap: this.handlePopupCancel.bind(this),
	                            touchClass: cancelBtn.touchClass || defaultProps.popupHeader.cancelBtn.touchClass
	                        },
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'regret' },
	                            cancelBtn.text || defaultProps.popupHeader.cancelBtn.text
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _touchable2.default,
	                        {
	                            onTap: function onTap() {
	                                _this3.handlePopupOk();
	                            },
	                            touchClass: okBtn.touchClass || defaultProps.popupHeader.okBtn.touchClass
	                        },
	                        _react2.default.createElement(
	                            'div',
	                            { className: 'affirm' },
	                            okBtn.text || defaultProps.popupHeader.okBtn.text
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'bd' },
	                    pickerConfigs.map(function (cfg, i) {
	                        return _react2.default.createElement(_picker2.default, {
	                            key: i,
	                            options: cfg.options,
	                            value: cfg.value,
	                            height: pickerHeight,
	                            looped: cfg.looped,
	                            unit: cfg.unit,
	                            onChange: function onChange(option) {
	                                _this3.handlePickerChange(option, i);
	                            }
	                        });
	                    })
	                )
	            );
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var touchClass = this.props.touchClass;
	
	            if (this.wrapper == null) {
	                this.createWrapper();
	            }
	            return _react2.default.createElement(
	                _react.Fragment,
	                null,
	                _react2.default.createElement(
	                    _touchable2.default,
	                    {
	                        onTap: this.handleTap.bind(this),
	                        touchClass: touchClass
	                    },
	                    this.props.children
	                ),
	                _reactDom2.default.createPortal(this.renderPicker(), this.wrapper)
	            );
	        }
	    }]);
	
	    return PopupPicker;
	}(_react.Component);
	
	PopupPicker.propTypes = propTypes;
	PopupPicker.defaultProps = defaultProps;
	
	exports.default = PopupPicker;

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(120);
	
	var _range = __webpack_require__(121);
	
	var _range2 = _interopRequireDefault(_range);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _range2.default;

/***/ },
/* 120 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 121 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _RangeCore = __webpack_require__(122);
	
	var _RangeCore2 = _interopRequireDefault(_RangeCore);
	
	var _debounce = __webpack_require__(55);
	
	var _debounce2 = _interopRequireDefault(_debounce);
	
	var _util = __webpack_require__(5);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 区间选择
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Range
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 用户可通过滑动选定一个区间，组件返回这个区间值；支持单、双滑块模式，有step和无step模式等。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./range.md}{instruUrl: range.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author zongze.li
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    /**
	     * 禁用滑块
	     *
	     * @property disable
	     * @type Bool
	     * @description 受控属性：禁止滑块滑动，阻止touch事件。
	     * @default false
	     */
	    disable: _propTypes2.default.bool,
	    /**
	     * 滑块最右边表示的值
	     *
	     * @property max
	     * @type Number
	     * @description 受控属性：滑块滑到最右边应该表示的值。
	     *
	     * 注意：有传入step属性时，必须保证 (max - min) 能被 step 整除。
	     * @default 100
	     */
	    max: _propTypes2.default.number.isRequired,
	    /**
	     * 滑块最左边表示的值
	     *
	     * @property min
	     * @type Number
	     * @description 受控属性：滑块滑到最左边应该表示的值。
	     */
	    min: _propTypes2.default.number.isRequired,
	    /**
	     * 滑动步长
	     *
	     * @property step
	     * @type Number
	     * @description 受控属性：滑块单方向滑动一次后的最小步长。
	     *
	     * 注意：不设置该属性，表示移动时不设步长，step 必须为一正数。
	     *
	     * 注意：step自带的小数位点影响最后返回的数字的最大小数位数。
	     */
	    step: _propTypes2.default.number,
	    /**
	     * 滑块默认区间
	     *
	     * @property value
	     * @type Array<Number>/Number
	     * @description 受控属性：滑块初始化时默认选中的区间范围；
	     *
	     * 注意：类型提示：类型为Array，对应两个滑块的值，类型为Number，对应于1个滑块的值；
	     */
	    value: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.arrayOf(_propTypes2.default.number)]).isRequired,
	    /**
	     * 趋势阈值
	     *
	     * @property round
	     * @type Number
	     * @description 受控属性：滑块在当前滑动的方向上，累积滑动多大一段距离后，才判定应该到达该方向的下一个停驻点。默认为1/4的间距，也就是如果累积滑动了1/4间距后，即到达该方向上的一下个停驻点。
	     * @default 1/4
	     */
	    round: _propTypes2.default.number,
	    /**
	     * 方向灵敏度
	     *
	     * @property directionSensitivity
	     * @type Number
	     * @description 受控属性：反向移动多少"像素"算作方向改变，防止手指微动时导致方向改变，近而导致由于微动而很难移动到目标位置。
	     * @default 6
	     */
	    directionSensitivity: _propTypes2.default.number,
	    /**
	     * 单滑块模式
	     *
	     * @property isSingle
	     * @type Bool
	     * @description 受控属性：是否启用单滑块模式，默认为 false 不展示，设置为 true 即启用。
	     * @default false
	     */
	    isSingle: _propTypes2.default.bool,
	    /**
	     * 无标签
	     *
	     * @property showScale
	     * @type Bool
	     * @description 受控属性：是否展示标签，默认为 true 展示，设置为 false 即不展示且不生成标签
	     * @default true
	     */
	    showScale: _propTypes2.default.bool,
	    /**
	     * 自定义刻度标签
	     *
	     * @property scaleFormat
	     * @type Function
	     * @param {Number} [scale] 单个标签对应的 value 值
	     * @param {Number} [index] 当前标签对应的下标
	     * @returns {String} 单个标签所展示的字符串，支持返回jsx。
	     * @description 受控属性：滑块滑到某一刻度时所展示的刻度文本信息。
	     *
	     * 注意：如果 step 相对 max - min 足够小，则默认会产生很多个标签，导致显示时会全挤在一块而变成纯色的 bug 样式，这时可设置 showScale 为 false ，可禁用且不渲染标签。
	     * @default value => value
	     */
	    scaleFormat: _propTypes2.default.func,
	    /**
	     * 刻度标签位置
	     *
	     * @property scalePosition
	     * @type Enum {'top','bottom'}
	     * @description 受控属性：滑块在轨道线的上边显示，还是下边
	     * @default 'top'
	     */
	    scalePosition: _propTypes2.default.oneOf(['top', 'bottom']),
	    /**
	     * touchStart 回调函数
	     *
	     * @property onSliderTouchStart
	     * @type Function
	     * @description 触发touchStart事件后，在事件结束前进行调用的函数，该函数有4个参数，onSliderTouchStart(value, translateX, event, sliderIndex)。
	     * @param {Number/Array} [value] 当前选中区间，单滑块为Number，双滑块为Array；
	     * @param {Number/Array} [translateX] 当前滑块的translateX，单滑块为Number,双滑块为Array;
	     * @param {Object} [event] 事件对象；
	     * @param {Number} [sliderIndex] 当前鼠标拖动的滑块序号，0或1，0表示左滑块，1表示右滑块。
	     * @default null
	     */
	    onSliderTouchStart: _propTypes2.default.func,
	    /**
	     * touchMove 回调函数
	     *
	     * @property onSliderTouchMove
	     * @type Function
	     * @description 触发touchMove事件后，在事件结束前进行调用的函数，该函数有3个参数，onTouchMove(value, translateX, event, sliderIndex)。
	     * @param {Number/Array} [value] 当前选中区间，单滑块为Number，双滑块为Array；
	     * @param {Number/Array} [translateX] 当前滑块的translateX，单滑块为Number,双滑块为Array;
	     * @param {Object} [event] 事件对象；
	     * @param {Number} [sliderIndex] 当前鼠标拖动的滑块序号，0或1，0表示左滑块，1表示右滑块。
	     * @default null
	     */
	    onSliderTouchMove: _propTypes2.default.func,
	    /**
	     * touchEnd 回调函数
	     *
	     * @property onSliderTouchEnd
	     * @type Function
	     * @description 触发touchEnd事件后，在事件结束前进行调用的函数，该函数有4个参数，onSliderTouchEnd(value, translateX, event, sliderIndex)，event即事件对象。
	     * @param {Number/Array} [value] 当前选中区间，单滑块为Number，双滑块为Array；
	     * @param {Number/Array} [translateX] 当前滑块的translateX，单滑块为Number,双滑块为Array;
	     * @param {Object} [event] 事件对象；
	     * @param {Number} [sliderIndex] 当前鼠标拖动的滑块序号，0或1，0表示左滑块，1表示右滑块。
	     * @default null
	     */
	    onSliderTouchEnd: _propTypes2.default.func,
	    /**
	     * onChange 回调函数
	     *
	     * @property onChange
	     * @type Function
	     * @description 当滑动滑块后，滑块在停下时会通过调用上级的 onChange 回调函数，以来在上一层组件中调用 setState 来更新当前组件的状态。
	     * @param {Number/Array} [value] 待更新的当前选中区间的对应值
	     * @default value => console.log(value)
	     */
	    onChange: _propTypes2.default.func.isRequired,
	    /**
	     * 组件额外类
	     *
	     * @property extraClass
	     * @type String
	     * @description 受控属性：扩展range组件样式所需添加的额外的类
	     */
	    extraClass: _propTypes2.default.string
	};
	var RangeDefaultProps = {
	    disable: false,
	    isSingle: false,
	    round: 0.25,
	    scalePosition: 'top',
	    directionSensitivity: 6,
	    scaleFormat: function scaleFormat(value) {
	        return value;
	    },
	    showScale: true,
	    onSliderTouchStart: null,
	    onSliderTouchMove: null,
	    onSliderTouchEnd: null,
	    onChange: function onChange(value) {
	        return console.log(value);
	    },
	    extraClass: ''
	};
	
	var transitionClass = 'transition';
	var activeClass = 'divide-on';
	
	var Range = function (_Component) {
	    _inherits(Range, _Component);
	
	    function Range(props) {
	        _classCallCheck(this, Range);
	
	        // 初始化时设置的容器宽度，组件挂载后会获取容器渲染后的实时宽度。
	        var _this = _possibleConstructorReturn(this, (Range.__proto__ || Object.getPrototypeOf(Range)).call(this, props));
	
	        _this.trackLength = 292;
	        _this.activeIndex = {};
	        _this.sliderLeftJSX = _this.renderSlider('btnLeft');
	        _this.sliderRightJSX = _this.renderSlider('btnRight');
	        var min = props.min,
	            max = props.max,
	            value = props.value,
	            round = props.round,
	            isSingle = props.isSingle,
	            step = props.step,
	            directionSensitivity = props.directionSensitivity;
	
	        var newValue = typeof value === 'number' ? [value, value] : value;
	        _this.rangeCore = new _RangeCore2.default(step, _this.trackLength, isSingle, [min, max], newValue, round, directionSensitivity);
	        _this.rangeCore.validateProps(props);
	        _this.refreshTicks(props, true);
	        _this.state = {
	            ticksJSX: _this.ticksJSX
	        };
	        _this.resize = _this.handleResize.bind(_this);
	
	        // delay 200ms
	        _this.handleResizeDebounced = (0, _debounce2.default)(_this.resize, 200);
	        return _this;
	    }
	
	    _createClass(Range, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            this.$sliderList = [this.btnLeft, this.btnRight];
	            this.$track = this.trackDom ? this.trackDom : null;
	            if (this.props.showScale && this.scale) {
	                this.$ticks = this.scale.querySelectorAll('.divide');
	            }
	            // 调用更新函数，目的是获得渲染后滑块的宽度和容器的宽度，并更新相应的逻辑，之前初始化的是一个不准确的默认值。
	            this.refreshBoth(this.props);
	
	            // 函数去抖（与节流相对）
	            window.addEventListener('resize', this.handleResizeDebounced, false);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            var _props = this.props,
	                step = _props.step,
	                min = _props.min,
	                max = _props.max,
	                round = _props.round,
	                scaleFormat = _props.scaleFormat,
	                isSingle = _props.isSingle,
	                showScale = _props.showScale,
	                scalePosition = _props.scalePosition,
	                directionSensitivity = _props.directionSensitivity;
	
	            // 一些影响范围较大的受控属性发生改变，需更新组件相应状态
	
	            if (nextProps.round !== round || nextProps.max !== max || nextProps.min !== min || nextProps.step !== step || nextProps.isSingle !== isSingle || nextProps.scaleFormat !== scaleFormat || nextProps.scalePosition !== scalePosition || nextProps.directionSensitivity !== directionSensitivity || nextProps.showScale !== showScale) {
	                this.refreshBoth(nextProps);
	            }
	        }
	    }, {
	        key: 'componentWillUpdate',
	        value: function componentWillUpdate(nextProps) {
	            // 滑到nextProps.value对应的位置；附带效果：当父组件不触发value更新时，value不变，此时可回归原位
	            var value = nextProps.value,
	                newValue = typeof value === 'number' ? [value, value] : value;
	            this.rangeCore.syncFromState(newValue);
	            this.setCssTransX(this.rangeCore.getTransXList(), this.$sliderList);
	        }
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            // 当标签从“不显示”切换到“显示”时，如果在componentWillReceiveProps中，节点还未更新，
	            // 就不能更新此时的节点引用，此时this.$ticks为空，于是可在componentDidUpdate中更新。
	            if (this.props.isSingle) {
	                this.btnRight = undefined;
	                this.$sliderList = [this.btnLeft];
	            } else {
	                this.$sliderList = [this.btnLeft, this.btnRight];
	            }
	            if (this.props.showScale && this.scaleDom) {
	                this.$ticks = this.scaleDom.querySelectorAll('.divide');
	                this.toggleTicks();
	            }
	        }
	    }, {
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            this.handleResizeDebounced.cancel();
	            window.removeEventListener('resize', this.handleResizeDebounced);
	        }
	    }, {
	        key: 'setCssTransX',
	        value: function setCssTransX(transXList) {
	            var domList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$sliderList;
	
	            [].concat(domList).forEach(function (dom, index) {
	                if (dom) {
	                    dom.style.WebkitTransform = 'translateX(' + transXList[index] + 'px)';
	                    dom.style.transform = 'translateX(' + transXList[index] + 'px)';
	                }
	            });
	        }
	    }, {
	        key: 'refreshBoth',
	        value: function refreshBoth(props) {
	            this.rangeCore.validateProps(props);
	            this.refreshTrackLength();
	            this.refreshCore(props, this.trackLength);
	            this.refreshTicks(props);
	            var _rangeCore$exportedVa = this.rangeCore.exportedValue,
	                btnLeft = _rangeCore$exportedVa.btnLeft,
	                btnRight = _rangeCore$exportedVa.btnRight;
	
	            this.setCssTransX(this.rangeCore.getTransXList(), this.$sliderList);
	            this.props.onChange(props.isSingle ? btnLeft : [btnLeft, btnRight]);
	        }
	    }, {
	        key: 'refreshCore',
	        value: function refreshCore() {
	            var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	            var trackLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.trackLength;
	            var min = props.min,
	                max = props.max,
	                value = props.value,
	                round = props.round,
	                isSingle = props.isSingle,
	                step = props.step,
	                directionSensitivity = props.directionSensitivity;
	
	            var newValue = typeof value === 'number' ? [value, value] : value;
	            this.rangeCore.refresh(step, trackLength || 292, isSingle, [min, max], newValue, round, directionSensitivity);
	        }
	    }, {
	        key: 'refreshTrackLength',
	        value: function refreshTrackLength() {
	            var width = this.$track.clientWidth,
	                diam = this.btnLeft.clientWidth,
	                trackLength = width - parseInt(diam, 10) || 292;
	            this.trackLength = trackLength;
	        }
	    }, {
	        key: 'refreshTicks',
	        value: function refreshTicks(props) {
	            var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	            var max = props.max,
	                min = props.min,
	                scaleFormat = props.scaleFormat,
	                showScale = props.showScale,
	                step = props.step || (max - min) / this.trackLength,
	                scaleGapNum = parseInt(Math.round((max - min) / step), 10),
	                decimalNum = this.rangeCore.decimalLenOfValue,
	                ticksValue = !showScale ? [] : (0, _util.getArrayByLength)(scaleGapNum + 1).fill(1).map(function (_, index) {
	                return parseFloat(parseFloat(min + index * step).toFixed(decimalNum));
	            }),
	                ticksText = ticksValue.map(function (scale, index) {
	                return scaleFormat(scale, index);
	            }),
	                ticksJSX = this.renderTicks(ticksText);
	
	
	            this.ticksJSX = ticksJSX;
	            if (!init) {
	                this.setState({ ticksJSX: ticksJSX });
	            }
	        }
	    }, {
	        key: 'toggleTicks',
	        value: function toggleTicks() {
	            var _rangeCore$exportedIn = this.rangeCore.exportedIndex,
	                btnLeft = _rangeCore$exportedIn.btnLeft,
	                btnRight = _rangeCore$exportedIn.btnRight,
	                className = activeClass;
	
	            this.activeIndex.left = btnLeft;
	            this.activeIndex.right = btnRight;
	
	            var min = btnLeft,
	                max = this.props.isSingle ? btnLeft : btnRight,
	                scaleList = this.$ticks,
	                len = scaleList.length;
	            for (var i = 0; i < len; i++) {
	                if (i >= min && i <= max) {
	                    scaleList[i].classList.add(className);
	                } else {
	                    scaleList[i].classList.remove(className);
	                }
	            }
	        }
	    }, {
	        key: 'toggleAnimationClass',
	        value: function toggleAnimationClass() {
	            var action = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'add';
	            var domList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.$sliderList;
	
	            var className = transitionClass;
	            [].concat(domList).forEach(function (dom) {
	                if (dom) {
	                    if (action === 'add') {
	                        dom.classList.add(className);
	                    } else {
	                        dom.classList.remove(className);
	                    }
	                }
	            });
	        }
	
	        /**
	         * @method resize
	         * @description 当容器宽度改变时，可手动调用 resize 将滑块重置到正确的位置上，可通过ref得到的组件实例来调用（在组件上加个ref属性）。
	         * 使用场景1：使用 popup 或者 modal 推出来，由于之前被 display: none 掉，无容器宽度，此时在组件展示的动画之前，在此组件的ref引用上调用此resize方法刷新位置即可。
	         * @example
	         * this.refs.range.resize();
	         */
	        // this.resize = this.handleResize.bind(this);
	
	    }, {
	        key: 'handleResize',
	        value: function handleResize() {
	            this.toggleAnimationClass('remove');
	            this.refreshBoth(this.props);
	        }
	    }, {
	        key: 'handleTouchStart',
	        value: function handleTouchStart(which, evt) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            if (this.props.disable) {
	                return;
	            }
	            this.rangeCore.handleTouchStart(evt.touches[0].screenX, which);
	            this.toggleAnimationClass('remove');
	
	            if (this.props.onSliderTouchStart) {
	                var transX = this.rangeCore.getTransXList(),
	                    translateX = this.props.isSingle ? transX[0] : transX;
	                this.props.onSliderTouchStart(this.props.value, translateX, evt, which === 'btnLeft' ? 0 : 1);
	            }
	        }
	    }, {
	        key: 'handleTouchMove',
	        value: function handleTouchMove(which, evt) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            if (this.props.disable) {
	                return;
	            }
	
	            // 将 screenX 输入数字化模型，计算两个滑块的 translateX 、value 和 index
	            this.rangeCore.handleTouchMove(evt.touches[0].screenX, which);
	
	            var _rangeCore$exportedVa2 = this.rangeCore.exportedValue,
	                btnRight = _rangeCore$exportedVa2.btnRight,
	                btnLeft = _rangeCore$exportedVa2.btnLeft,
	                value = this.props.isSingle ? btnLeft : [btnLeft, btnRight],
	                transX = this.rangeCore.getTransXList();
	
	            // 导出 translateX，设置 css，以及高亮相应刻度
	
	            this.setCssTransX(transX, this.$sliderList);
	            if (this.props.showScale) {
	                this.toggleTicks();
	            }
	
	            // touchMove 回调
	            if (this.props.onSliderTouchMove) {
	                var translateX = this.props.isSingle ? transX[0] : transX;
	                this.props.onSliderTouchMove(value, translateX, evt, which === 'btnLeft' ? 0 : 1);
	            }
	        }
	    }, {
	        key: 'handleTouchEnd',
	        value: function handleTouchEnd(which, evt) {
	            evt.preventDefault();
	            evt.stopPropagation();
	            if (this.props.disable) {
	                return;
	            }
	            this.toggleAnimationClass('add');
	            this.rangeCore.handleTouchEnd(which);
	
	            // 导出 滑块当前位置 所代表的 value，以及对应的tanslateX
	            var _rangeCore$exportedVa3 = this.rangeCore.exportedValue,
	                btnLeft = _rangeCore$exportedVa3.btnLeft,
	                btnRight = _rangeCore$exportedVa3.btnRight,
	                value = this.props.isSingle ? btnLeft : [btnLeft, btnRight],
	                transX = this.rangeCore.getTransXList(),
	                translateX = this.props.isSingle ? transX[0] : transX;
	
	            // touchEnd 回调
	
	            if (this.props.onSliderTouchEnd) {
	                this.props.onSliderTouchEnd(value, translateX, evt, which === 'btnLeft' ? 0 : 1);
	            }
	
	            // 如果当父组件在onChange回调中没有触发value更新时，此时无生命周期触发，则无法将滑块回归到当前value对应的位置上。
	            // 调用this.forceUpdate()，可强制触发一个生命周期，进而通过componentWillUpdate可使滑块回归到value对应的位置上。
	            // this.forceUpdate();
	            this.forceUpdate();
	            this.props.onChange(value);
	        }
	    }, {
	        key: 'renderTicks',
	        value: function renderTicks(ticksText) {
	            var len = ticksText.length;
	            return ticksText.map(function (value, index) {
	                var cssObj = index === 0 || index === len - 1 ? {} : { left: index * 100 / (len - 1) + '%' };
	                return _react2.default.createElement(
	                    'li',
	                    {
	                        className: 'divide',
	                        key: 't' + index,
	                        style: cssObj
	                    },
	                    value
	                );
	            });
	        }
	    }, {
	        key: 'renderSlider',
	        value: function renderSlider() {
	            var _this2 = this;
	
	            var which = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'btnLeft';
	
	            return _react2.default.createElement('span', {
	                ref: function ref(dom) {
	                    _this2[which] = dom;
	                },
	                onTouchStart: function onTouchStart(evt) {
	                    return _this2.handleTouchStart(which, evt);
	                },
	                onTouchMove: function onTouchMove(evt) {
	                    return _this2.handleTouchMove(which, evt);
	                },
	                onTouchEnd: function onTouchEnd(evt) {
	                    return _this2.handleTouchEnd(which, evt);
	                },
	                className: 'thumb'
	            });
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this3 = this;
	
	            var scalePosition = this.props.scalePosition,
	                ticksJSX = this.props.showScale && this.state.ticksJSX,
	                scaleJSX = this.props.showScale && _react2.default.createElement(
	                'ul',
	                {
	                    className: 'scale',
	                    ref: function ref(dom) {
	                        _this3.scaleDom = dom;
	                    }
	                },
	                ticksJSX
	            );
	
	            return _react2.default.createElement(
	                'div',
	                {
	                    className: (0, _classnames2.default)('yo-range', this.props.extraClass)
	                },
	                scalePosition === 'top' && scaleJSX,
	                _react2.default.createElement(
	                    'div',
	                    {
	                        className: 'track',
	                        ref: function ref(dom) {
	                            _this3.trackDom = dom;
	                        }
	                    },
	                    this.sliderLeftJSX,
	                    !this.props.isSingle && this.sliderRightJSX
	                ),
	                scalePosition === 'bottom' && scaleJSX
	            );
	        }
	    }]);
	
	    return Range;
	}(_react.Component);
	
	exports.default = Range;
	
	
	Range.propTypes = propTypes;
	Range.defaultProps = RangeDefaultProps;

/***/ },
/* 122 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RangeCore = function () {
	    function RangeCore(step) {
	        var trackLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 292;
	        var single = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	        var range = arguments[3];
	        var value = arguments[4];
	        var round = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.25;
	        var directionSensitivity = arguments[6];
	
	        _classCallCheck(this, RangeCore);
	
	        this.BothMoved = false;
	        this.bothMovingDirection = 0;
	        this.separated = false;
	
	        // touch 方向灵敏度
	        this.directionSensitivity = 6;
	        this.exportedIndex = {};
	        this.exportedValue = {};
	        this.refresh(step, trackLength, single, range, value, round, directionSensitivity);
	    }
	
	    _createClass(RangeCore, [{
	        key: 'validateProps',
	        value: function validateProps(props) {
	            var isSingle = props.isSingle,
	                max = props.max,
	                min = props.min,
	                round = props.round,
	                step = props.step,
	                value = props.value,
	                range = [min, max];
	
	            if (range[0] > range[1] || range.length < 2) {
	                throw new Error('yo-range:range属性必须有两个元素,其中第二个元素(上限)的值必须大于第一个(下限)');
	            } else if (step !== undefined && step <= 0) {
	                throw new Error('yo-range:step必须为正数');
	            } else if (value[0] < range[0]) {
	                throw new Error('yo-range:左侧滑块的值不能小于range的下限');
	            } else if (round >= 1 || round <= 0) {
	                throw new Error('yo-range:round必须为0-1之间的数字');
	            } else if (step !== undefined) {
	                if (step > Math.abs(range[0] - range[1])) {
	                    throw new Error('yo-range:step不能大于可滑动范围');
	                } else if ((range[1] - range[0]) % step) {
	                    throw new Error('yo-range:(max - min)必须能被step整除');
	                } else if (isSingle && (value - min) % step) {
	                    throw new Error('yo-range:(value - min)在step不为0时，必须能被step整除');
	                }
	            }
	            if (!isSingle) {
	                if (value[0] > value[1] || value.length < 2) {
	                    throw new Error('yo-range:双滑块模式下,value属性必须有两个元素,其中第二个元素(右侧滑块)的值必须大于第一个(左侧滑块)');
	                } else if (value[1] > range[1]) {
	                    throw new Error('yo-range:右侧滑块的value不能大于range的上限');
	                } else if (step !== undefined) {
	                    if ((value[0] - min) % step || (value[1] - min) % step) {
	                        throw new Error('yo-range:(value[i] - min)必须能被step整除');
	                    }
	                }
	            }
	        }
	    }, {
	        key: 'refresh',
	        value: function refresh(step) {
	            var trackLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 292;
	            var single = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	            var range = arguments[3];
	            var value = arguments[4];
	            var round = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.25;
	            var directionSensitivity = arguments[6];
	
	            this.decimalLenOfValue = this.maxDecimalLenOfList([step]);
	            var valueRange = range[1] - range[0];
	            this.stepValue = step;
	            this.directionSensitivity = directionSensitivity;
	            if (step === undefined) {
	                this.stepValue = valueRange / trackLength;
	            }
	            // step 为 0 表示不设置步长 ，即为translateX步长为1px（this.step = 1）的特殊情况，
	            // 此时对应的Value值步长为 valueRange / trackLength
	            this.step = trackLength / (valueRange / this.stepValue);
	            this.maxEndTransX = trackLength;
	            this.rateXtoValue = valueRange / this.maxEndTransX;
	            this.range = range;
	            this.round = round;
	            this.single = single;
	
	            // 如果输入的不是停驻点的数，则往最近的点靠
	            this.btnLeft = {
	                maxTransX: single ? this.maxEndTransX : this.maxEndTransX - this.step,
	                minTransX: 0
	            };
	            this.btnRight = {
	                maxTransX: this.maxEndTransX,
	                minTransX: single ? 0 : this.step
	            };
	            this.syncFromState(value);
	        }
	    }, {
	        key: 'getTransXList',
	        value: function getTransXList() {
	            return [this.btnLeft.translateX, this.btnRight.translateX];
	        }
	    }, {
	        key: 'keepMaxDecimalNum',
	        value: function keepMaxDecimalNum(num) {
	            var decimalNum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.decimalLenOfValue;
	
	            return parseFloat(num.toFixed(decimalNum), 10);
	        }
	    }, {
	        key: 'maxDecimalLenOfList',
	        value: function maxDecimalLenOfList(numList) {
	            return numList.reduce(function (accMax, num) {
	                var decimal = String(num).split('.')[1],
	                    len = decimal && decimal.length;
	                return Math.max(len || 0, accMax);
	            }, 0);
	        }
	    }, {
	        key: 'mapValueToX',
	        value: function mapValueToX(value) {
	            return Math.round((value - this.range[0]) / this.rateXtoValue);
	        }
	    }, {
	        key: 'mapXtoValue',
	        value: function mapXtoValue(transX) {
	            return this.keepMaxDecimalNum(this.rateXtoValue * transX + this.range[0]);
	        }
	    }, {
	        key: '_cutNum',
	        value: function _cutNum(num, maxValue, minValue) {
	            return Math.min(maxValue, Math.max(minValue, num));
	        }
	    }, {
	        key: '_roundIndex',
	        value: function _roundIndex(index, direction) {
	            var error = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.round;
	
	            return direction > 0 ? Math.ceil(index - error) : Math.floor(index + error);
	        }
	    }, {
	        key: '_trimTranslateX',
	        value: function _trimTranslateX(direction) {
	            var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'btnLeft';
	
	            if (this.step !== 0) {
	                var slider = this[which],
	                    translateX = this._roundIndex(slider.translateX / this.step, direction) * this.step;
	                slider.translateX = this._cutNum(translateX, slider.maxTransX, slider.minTransX);
	            }
	        }
	    }, {
	        key: 'exportData',
	        value: function exportData(which, direction) {
	            // 计算出需要导出的数据 index, value
	            this.exportedIndex[which] = this._roundIndex(this[which].translateX / this.step, direction);
	            this.exportedValue[which] = this.mapXtoValue(this[which].translateX);
	        }
	    }, {
	        key: '_dealBothMoving',
	        value: function _dealBothMoving(which, gap, moveLength, direction) {
	            var theOtherIndex = which === 'btnLeft' ? 'btnRight' : 'btnLeft',
	                slider = this[theOtherIndex];
	
	            // 判断是否小于最小间隔 一个 step
	            if (gap < this.step) {
	                // 标记进入 同时移动 状态
	                this.bothMoved = true;
	
	                // 标记是否非同时移动后分开了
	                this.separated = false;
	
	                // 将 差值 补给 另一个滑块
	                var extraTransX = this.step - gap;
	                slider.translateX += moveLength < 0 ? -extraTransX : extraTransX;
	
	                this.exportData(theOtherIndex, direction);
	                this.bothMovingDirection = direction;
	            } else if (this.bothMoved === true) {
	                // 当一起移动结束后，记录下 不再滑动的 那个滑块的方向
	                if (!this.separated) {
	                    slider.direction = this.bothMovingDirection;
	                    this.separated = true;
	                }
	            }
	        }
	    }, {
	        key: 'handleTouchStart',
	        value: function handleTouchStart(startX) {
	            var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'btnLeft';
	
	            var slider = this[which];
	            this.bothMoved = false;
	            slider.movingX = startX;
	            slider.direction = 0;
	            slider.startX = startX;
	            slider.basic = slider.translateX;
	            return this;
	        }
	    }, {
	        key: 'handleTouchMove',
	        value: function handleTouchMove(movingX) {
	            var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'btnLeft';
	
	            var slider = this[which];
	            var diff = movingX - slider.movingX;
	            if (Math.abs(diff) > this.directionSensitivity) {
	                slider.direction = movingX - slider.movingX;
	                slider.movingX = movingX;
	            }
	            slider.moveLength = movingX - slider.startX;
	            var translateX = slider.basic + slider.moveLength;
	            slider.translateX = this._cutNum(translateX, slider.maxTransX, slider.minTransX);
	
	            var gapSection = this.btnRight.translateX - this.btnLeft.translateX;
	            if (!this.single) {
	                this._dealBothMoving(which, gapSection, slider.moveLength, slider.direction);
	            }
	            this.exportData(which, slider.direction);
	            return this;
	        }
	    }, {
	        key: 'handleTouchEnd',
	        value: function handleTouchEnd() {
	            var _this = this;
	
	            var which = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'btnLeft';
	
	            // 如果存在 A 滑块方向为 0 或 undefined ，则将 A 滑块方向默认值设为 另一个滑块的方向。
	            var direction = this.btnLeft.direction || this.btnRight.direction,
	                sliderList = this.bothMoved ? ['btnLeft', 'btnRight'] : [which];
	
	            sliderList.forEach(function (index) {
	                _this._trimTranslateX(_this[index].direction || direction, index);
	                _this.exportedIndex[index] = Math.round(_this[index].translateX / _this.step);
	                _this.exportedValue[index] = _this.mapXtoValue(_this[index].translateX);
	            });
	            return this.reInit();
	        }
	    }, {
	        key: 'syncFromState',
	        value: function syncFromState(value) {
	            var _this2 = this;
	
	            ['btnLeft', 'btnRight'].forEach(function (which, index) {
	                if (value[index] !== undefined) {
	                    _this2[which].translateX = _this2.mapValueToX(value[index]);
	                    _this2.exportedIndex[which] = Math.round(_this2[which].translateX / _this2.step);
	                    _this2.exportedValue[which] = value[index];
	                }
	            });
	        }
	    }, {
	        key: 'reInit',
	        value: function reInit() {
	            this.bothMoved = false;
	            this.separated = false;
	            this.bothMovingDirection = 0;
	            this.btnLeft.direction = 0;
	            this.btnRight.direction = 0;
	            return this;
	        }
	    }]);
	
	    return RangeCore;
	}();
	
	exports.default = RangeCore;

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(124);
	
	var _rating = __webpack_require__(125);
	
	var _rating2 = _interopRequireDefault(_rating);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _rating2.default;

/***/ },
/* 124 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 评分组件
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Rating
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 评分组件，既可以用来评分，也可以用来展示评分。这是一个受控的组件，当用户点击评分之后，需要通过回调设置当前的分数，否则分数不会变化。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./rating.md}{instruUrl: rating.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var defaultProps = {
	    extraClass: '',
	    total: 5,
	    value: 0,
	    readonly: false
	};
	
	var propTypes = {
	    /**
	     * 组件额外class
	     *
	     * @property extraClass
	     * @type String
	     * @description 为组件根节点提供额外的class。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * 总分数
	     *
	     * @property total
	     * @type Number
	     * @description 图标的总数量。
	     * @default 5
	     */
	    total: _propTypes2.default.number,
	    /**
	     * 当前分数
	     *
	     * @property value
	     * @type Number
	     * @description 当前点亮的图标数。
	     * @default 0
	     */
	    value: _propTypes2.default.number,
	    /**
	     * 是否只读
	     *
	     * @property readonly
	     * @type Bool
	     * @description 是否只读。当为 `true` 的时候，只能展示评分，不能点击；当为 `false` 的时候，可以点击评分
	     * @default false
	     */
	    readonly: _propTypes2.default.bool,
	    /**
	     * 点击评分的回调
	     *
	     * @property onChange
	     * @type Function
	     * @param {number} value 当前选择的图标数
	     * @description (value) => void
	     *
	     * 点击评分的回调。由于 `Number` 是一个受控的组件，需要在该回调中设置 value 参数。
	     */
	    onChange: _propTypes2.default.func
	};
	
	var Rating = function (_Component) {
	    _inherits(Rating, _Component);
	
	    function Rating() {
	        _classCallCheck(this, Rating);
	
	        return _possibleConstructorReturn(this, (Rating.__proto__ || Object.getPrototypeOf(Rating)).apply(this, arguments));
	    }
	
	    _createClass(Rating, [{
	        key: 'getItemStyle',
	        value: function getItemStyle(index) {
	            var _width = (this.props.value - index) * 100;
	            var _fixedWidth = parseInt(Math.max(Math.min(_width, 100), 0), 10);
	
	            return {
	                width: _fixedWidth.toString() + '%'
	            };
	        }
	    }, {
	        key: 'handleTap',
	        value: function handleTap(index) {
	            if (this.props.readonly) {
	                return;
	            }
	
	            if (this.props.onChange) {
	                this.props.onChange(index + 1);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _props = this.props,
	                extraClass = _props.extraClass,
	                total = _props.total;
	
	            var ratingClass = ['yo-rating', extraClass].join(' ');
	
	            return _react2.default.createElement(
	                'ul',
	                { className: ratingClass },
	                (0, _util.getArrayByLength)(total).fill('').map(function (item, index) {
	                    return _react2.default.createElement(
	                        'li',
	                        { className: 'item', key: index, onTouchTap: function onTouchTap() {
	                                return _this2.handleTap(index);
	                            } },
	                        _react2.default.createElement('span', { style: _this2.getItemStyle(index) })
	                    );
	                })
	            );
	        }
	    }]);
	
	    return Rating;
	}(_react.Component);
	
	exports.default = Rating;
	
	
	Rating.propTypes = propTypes;
	Rating.defaultProps = defaultProps;

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(127);
	
	var _scroller = __webpack_require__(52);
	
	var _scroller2 = _interopRequireDefault(_scroller);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _scroller2.default;

/***/ },
/* 127 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(129);
	
	var _suggest = __webpack_require__(130);
	
	var _suggest2 = _interopRequireDefault(_suggest);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _suggest2.default;

/***/ },
/* 129 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _list = __webpack_require__(50);
	
	var _list2 = _interopRequireDefault(_list);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	var _throttle = __webpack_require__(54);
	
	var _throttle2 = _interopRequireDefault(_throttle);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	var _util = __webpack_require__(5);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Suggest
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 输入提示组件, 根据用户的输入给出待选项并展示在输入框下方。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Suggest的内容分为两个区域, 推荐区域(recommendTmpl)会在用户输入开始前渲染, 可以用来给出一些热门推荐。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * 结果区域(resultTmpl)用来响应用户的输入, 根据用户的输入给出输入提示。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./suggest/suggest.md}{instruUrl: suggest/city_select_example.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./suggest/useWithPopup.md}{instruUrl: suggest/use_with_popup.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var propTypes = {
	    /**
	     * @property results
	     * @type Array
	     * @default null
	     * @description 渲染在结果区的数据源,数组类型,数组元素的类型可以是字符串/数字，它们会直接作为列表项的内容；
	     *
	     * 也可以是对象,这个对象必须有text属性。
	     */
	    results: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string, _propTypes2.default.shape({
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	    })])),
	    /**
	     * @property onConditionChange
	     * @type Function
	     * @param {String} value 输入框当前的value
	     * @default null
	     * @description 输入框onChange事件回调,必需。
	     *
	     * 为了使组件正常工作,你必须定义这个属性,根据每次的value来更新results。
	     */
	    onConditionChange: _propTypes2.default.func,
	    /**
	     * @property extraClass
	     * @type String
	     * @default null
	     * @description 附加给组件根节点的额外类名。
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property itemTouchClass
	     * @type String
	     * @default item-light
	     * @description 点击结果区域列表项时添加的className。
	     */
	    itemTouchClass: _propTypes2.default.string,
	    /**
	     * @property noDataTmpl
	     * @type Element
	     * @default null
	     * @description 没有suggest结果时的模板。
	     * noDataTpl
	     */
	    noDataTmpl: _propTypes2.default.element,
	    /**
	     * @property recommendTmpl
	     * @type Element
	     * @default null
	     * @description 推荐区域内容,在搜索条件为空时展示。
	     */
	    recommendTmpl: _propTypes2.default.element,
	    /**
	     * @property onItemTap
	     * @type Function
	     * @default () =>{}
	     * @param {Object} item 数据源中的元素
	     * @param {Number} index item在数据源中的index
	     * @description 点击结果项时的回调。
	     */
	    onItemTap: _propTypes2.default.func,
	    /**
	     * @property renderItem
	     * @type Function
	     * @default Suggest.renderItem
	     * @param {Object} item 结果项的数据对象,格式为{value,text}
	     * @description 自定义结果项的渲染方式,返回JSX或字符串。
	     */
	    renderItem: _propTypes2.default.func,
	    /**
	     * @property renderResult
	     * @type Function
	     * @default null
	     * @param results 结果列表
	     * @description 自定义结果容器的渲染方式,返回JSX。
	     *
	     * 组件默认以List的形式渲染结果区域,如果不希望以List的形式展示结果,可以传入这个函数。组件会使用这个函数返回的JSX渲染结果区域。
	     */
	    renderResult: _propTypes2.default.func,
	    /**
	     * @property infinite
	     * @type Bool
	     * @default false
	     * @version 3.0.4
	     * @description 是否在结果区域的列表开启Infinite模式。注意：开启Infinite模式后，你需要为列表项配置key属性。
	     */
	    infinite: _propTypes2.default.bool,
	    /**
	     * @property itemHeight
	     * @type Number
	     * @default 44
	     * @version 3.0.4
	     * @description 结果区域列表项的高度，只在Infinite模式下生效。
	     */
	    itemHeight: _propTypes2.default.number,
	    /**
	     * @property infiniteSize
	     * @type Number
	     * @default 20
	     * @version 3.0.4
	     * @description 无穷列表模式下,保留在列表容器中列表项的个数(参见List组件无穷列表模式的说明)。
	     */
	    infiniteSize: _propTypes2.default.number,
	    /**
	     * @property showCancelButton
	     * @type Bool
	     * @default false
	     * @description 是否显示取消按钮,默认不显示。
	     */
	    showCancelButton: _propTypes2.default.bool,
	    /**
	     * @property cancelButtonText
	     * @type String
	     * @default 取消
	     * @description 取消按钮文本。
	     */
	    cancelButtonText: _propTypes2.default.string,
	    /**
	     * @property onCancelButtonClick
	     * @type Function
	     * @default () =>{}
	     * @description 点击取消按钮时的回调。
	     */
	    onCancelButtonTap: _propTypes2.default.func,
	    /**
	     * @property onSubmit
	     * @type Function
	     * @default ()=>{}
	     * @param condition 当前输入框的value
	     * @description 点击键盘确定按钮时触发的回调。
	     */
	    onSubmit: _propTypes2.default.func,
	    /**
	     * @property onFocus
	     * @type Function
	     * @default () =>{}
	     * @param condition 当前输入框的value
	     * @description 输入框聚焦时的回调。
	     */
	    onFocus: _propTypes2.default.func,
	    /**
	     * @property onBlur
	     * @type Function
	     * @default () =>{}
	     * @param condition 当前输入框的value
	     * @description 输入框失去焦点时的回调。
	     */
	    onBlur: _propTypes2.default.func,
	    /**
	     * @property defaultCondition
	     * @type String
	     * @default null
	     * @description 展示在输入框中的默认值。
	     */
	    defaultCondition: _propTypes2.default.string,
	    /**
	     * @property placeholder
	     * @type String
	     * @default null
	     * @description 输入框的placeholder。
	     */
	    placeholder: _propTypes2.default.string,
	    /**
	     * @property inputIcon
	     * @type String
	     * @default 'delete'
	     * @description 展示在输入框右侧的icon,有四个icon可供选择:delete,loading,refresh和stop。
	     *
	     * delete图标点击以后会清除输入框的内容,其余的三个图标可以通过传入onIconTap属性来定制点击它们的回调。
	     */
	    inputIcon: _propTypes2.default.oneOf(['delete', 'loading', 'refresh', 'stop']),
	    /**
	     * @property onIconTap
	     * @type Function
	     * @default () =>{}
	     * @param iconName 图标名称
	     * @param condition 当前输入框的value
	     * @description 点击input icon触发的回调。
	     */
	    onIconTap: _propTypes2.default.func,
	    /**
	     * @property throttleGap
	     * @type Number
	     * @default 300
	     * @description 设置此属性以后,文本框的onChange事件的触发频率会降低,例如设置为300会使得onChange每300毫秒触发一次.
	     *
	     * 通过这种方式,可以控制组件结果区域的render次数,降低和服务器交互的频率。
	     */
	    throttleGap: _propTypes2.default.number,
	    /**
	     * @property showMask
	     * @type Bool
	     * @description 在弹起键盘时，是否显示遮罩层。
	     */
	    showMask: _propTypes2.default.bool
	};
	
	var Suggest = function (_Component) {
	    _inherits(Suggest, _Component);
	
	    _createClass(Suggest, null, [{
	        key: 'getResultText',
	        value: function getResultText(result) {
	            var ret = null;
	            if ((typeof result === 'undefined' ? 'undefined' : _typeof(result)) === 'object') {
	                ret = result.text;
	            } else if (typeof result === 'string' || typeof result === 'number') {
	                ret = result;
	            }
	            return ret;
	        }
	    }, {
	        key: 'renderItem',
	        value: function renderItem(result) {
	            return Suggest.getResultText(result);
	        }
	    }]);
	
	    function Suggest(props) {
	        _classCallCheck(this, Suggest);
	
	        var _this = _possibleConstructorReturn(this, (Suggest.__proto__ || Object.getPrototypeOf(Suggest)).call(this, props));
	
	        _this.prev = null;
	        _this.state = { condition: props.defaultCondition, showRecommendMask: false };
	        _this.wrapConditionChangeHandler();
	        return _this;
	    }
	
	    _createClass(Suggest, [{
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            if (nextProps.defaultCondition !== this.props.defaultCondition) {
	                this.setState({ condition: nextProps.defaultCondition });
	            }
	        }
	    }, {
	        key: 'onConditionChange',
	        value: function onConditionChange(value) {
	            this.onConditionChangeHandler(value);
	            this.setState({ condition: value });
	            if (this.resultList) {
	                this.resultList.stopAnimate();
	                this.resultList.scrollTo(0, 0);
	            }
	        }
	    }, {
	        key: 'getIconClass',
	        value: function getIconClass(iconName, animation) {
	            var _props = this.props,
	                showCancelButton = _props.showCancelButton,
	                inputIcon = _props.inputIcon;
	
	            var iconClass = ['yo-ico', 'yo-ico-' + iconName, showCancelButton ? 'show-cancel' : ''].join(' ').replace(/\s$/, '');
	
	            var show = null;
	            if (!inputIcon) {
	                show = '';
	            } else if (inputIcon === iconName) {
	                show = 'show';
	                if (iconName === 'delete' && this.state.condition === '') {
	                    show = '';
	                }
	            } else {
	                show = '';
	            }
	
	            return [iconClass, show, animation].join(' ').replace(/\s$/, '');
	        }
	
	        /**
	         * @method clearInput
	         * @description 清空输入框的内容
	         */
	
	    }, {
	        key: 'clearInput',
	        value: function clearInput() {
	            this.onConditionChange('');
	        }
	    }, {
	        key: 'wrapConditionChangeHandler',
	        value: function wrapConditionChangeHandler() {
	            var _this2 = this;
	
	            var gap = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.throttleGap;
	
	            if (gap) {
	                this.onConditionChangeHandler = (0, _throttle2.default)(function (value) {
	                    if (value !== _this2.prev) {
	                        _this2.prev = value;
	                        _this2.props.onConditionChange(value);
	                    }
	                }, gap);
	            } else {
	                this.onConditionChangeHandler = function (value) {
	                    if (value !== _this2.state.condition) {
	                        _this2.props.onConditionChange(value);
	                    }
	                };
	            }
	        }
	    }, {
	        key: 'renderResult',
	        value: function renderResult(results) {
	            var _this3 = this;
	
	            var _props2 = this.props,
	                renderItem = _props2.renderItem,
	                onItemTap = _props2.onItemTap,
	                noDataTmpl = _props2.noDataTmpl,
	                itemTouchClass = _props2.itemTouchClass,
	                infinite = _props2.infinite,
	                infiniteSize = _props2.infiniteSize,
	                itemHeight = _props2.itemHeight;
	
	
	            var ret = null;
	            if (results && results.length) {
	                ret = _react2.default.createElement(_list2.default, {
	                    extraClass: 'yo-scroller-fullscreen',
	                    ref: function ref(component) {
	                        if (component) {
	                            _this3.resultList = component;
	                        }
	                    },
	                    dataSource: results,
	                    renderItem: renderItem,
	                    infinite: infinite,
	                    infiniteSize: infiniteSize,
	                    itemHeight: itemHeight,
	                    onItemTap: onItemTap,
	                    itemTouchClass: itemTouchClass,
	                    onScrollStart: function onScrollStart() {
	                        if (_this3.input) {
	                            (0, _util.blur)(_this3.input);
	                        }
	                    }
	                });
	            } else {
	                ret = noDataTmpl;
	            }
	            return ret;
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this4 = this;
	
	            var condition = this.state.condition;
	            var _props3 = this.props,
	                results = _props3.results,
	                extraClass = _props3.extraClass,
	                renderResult = _props3.renderResult,
	                showCancelButton = _props3.showCancelButton,
	                onIconTap = _props3.onIconTap,
	                onCancelButtonTap = _props3.onCancelButtonTap,
	                placeholder = _props3.placeholder;
	
	            var rootClass = ['yo-suggest', extraClass, showCancelButton ? 'yo-suggest-modal' : ''].join(' ').trim();
	            var realRenderResult = renderResult || this.renderResult.bind(this);
	            var deleteIconClass = this.getIconClass('delete');
	            var loadingIconClass = this.getIconClass('loading');
	            var refreshIconClass = this.getIconClass('refresh');
	            var stopIconClass = this.getIconClass('stop');
	            var resultContent = realRenderResult(results);
	
	            return _react2.default.createElement(
	                'div',
	                { className: rootClass },
	                _react2.default.createElement(
	                    'div',
	                    { className: 'operate' },
	                    _react2.default.createElement(
	                        'form',
	                        {
	                            className: 'action'
	                            // 没有action ios上键盘右下按钮文本就不是搜索
	                            , action: '',
	                            onSubmit: function onSubmit(evt) {
	                                _this4.props.onSubmit(_this4.state.condition, evt);
	                                evt.preventDefault();
	                                return false;
	                            }
	                        },
	                        _react2.default.createElement(
	                            'i',
	                            { className: 'yo-ico yo-ico-suggest' },
	                            '\uF067'
	                        ),
	                        _react2.default.createElement('input', {
	                            autoComplete: 'off',
	                            ref: function ref(dom) {
	                                _this4.input = dom;
	                            },
	                            value: condition,
	                            onChange: function onChange(evt) {
	                                _this4.onConditionChange(evt.target.value);
	                            },
	                            onFocus: function onFocus(evt) {
	                                _this4.props.onFocus(evt.target.value);
	                                _this4.setState({ showRecommendMask: true });
	                            },
	                            onBlur: function onBlur(evt) {
	                                _this4.props.onBlur(evt.target.value);
	                                _this4.setState({ showRecommendMask: false });
	                            },
	                            type: 'search',
	                            className: 'input',
	                            id: 'yo-suggest-input',
	                            placeholder: placeholder
	                        }),
	                        _react2.default.createElement(
	                            'i',
	                            {
	                                className: deleteIconClass,
	                                onTouchTap: function onTouchTap(evt) {
	                                    evt.preventDefault();
	                                    _this4.clearInput();
	                                    if (_this4.input) {
	                                        _this4.input.focus();
	                                    }
	                                }
	                            },
	                            '\uF077'
	                        ),
	                        _react2.default.createElement(
	                            'i',
	                            { className: loadingIconClass },
	                            '\uF089'
	                        ),
	                        _react2.default.createElement(
	                            'i',
	                            { className: refreshIconClass, onTouchTap: function onTouchTap() {
	                                    return onIconTap('refresh', condition);
	                                } },
	                            '\uF07A'
	                        ),
	                        _react2.default.createElement(
	                            'i',
	                            { className: stopIconClass, onTouchTap: function onTouchTap() {
	                                    return onIconTap('stop', condition);
	                                } },
	                            '\uF063'
	                        )
	                    ),
	                    _react2.default.createElement(
	                        _touchable2.default,
	                        {
	                            touchClass: 'cancel-btn-touch',
	                            onTap: function onTap() {
	                                onCancelButtonTap();
	                            }
	                        },
	                        _react2.default.createElement(
	                            'span',
	                            { className: 'cancel' },
	                            this.props.cancelButtonText
	                        )
	                    )
	                ),
	                _react2.default.createElement(
	                    'div',
	                    { className: 'cont' },
	                    _react2.default.createElement('div', {
	                        onTouchTap: function onTouchTap() {
	                            return _this4.input && _this4.input.blur();
	                        },
	                        className: (0, _classnames2.default)('mask', this.props.showMask && this.state.showRecommendMask ? 'show' : '')
	                    }),
	                    _react2.default.createElement(
	                        'div',
	                        { className: 'recommend' },
	                        this.props.recommendTmpl
	                    ),
	                    _react2.default.createElement(
	                        'div',
	                        { className: (0, _classnames2.default)('result', this.state.condition ? 'show' : '') },
	                        resultContent
	                    )
	                )
	            );
	        }
	    }]);
	
	    return Suggest;
	}(_react.Component);
	
	exports.default = Suggest;
	
	
	Suggest.defaultProps = {
	    results: [],
	    onConditionChange: function onConditionChange() {},
	    extraClass: '',
	    itemTouchClass: 'item-touch',
	    noDataTmpl: null,
	    onItemTap: function onItemTap() {},
	    renderItem: Suggest.renderItem,
	    renderResult: null,
	    showCancelButton: false,
	    showLoadingIcon: false,
	    onFocus: function onFocus() {},
	    onBlur: function onBlur() {},
	
	    onIconTap: function onIconTap() {},
	    onSubmit: function onSubmit() {},
	
	    defaultCondition: '',
	    placeholder: '搜索',
	    inputIcon: 'delete',
	    onCancelButtonTap: function onCancelButtonTap() {},
	
	    recommendTmpl: null,
	    throttleGap: null,
	    cancelButtonText: '取消',
	    showMask: false,
	    infinite: false,
	    infiniteSize: 20,
	    itemHeight: 44
	};
	
	Suggest.propTypes = propTypes;

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(132);
	
	var _swipemenu = __webpack_require__(133);
	
	var _swipemenu2 = _interopRequireDefault(_swipemenu);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _swipemenu2.default;

/***/ },
/* 132 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _drag = __webpack_require__(134);
	
	var _drag2 = _interopRequireDefault(_drag);
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _classnames = __webpack_require__(34);
	
	var _classnames2 = _interopRequireDefault(_classnames);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component SwipeMenu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 滑动菜单组件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	支持向右或向左单向滑动，显示菜单按钮。
	默认拖动距离超过菜单按钮的一半时，组件自动打开，否则组件回到关闭状态。
	组件拖动条可拖离足够远位置。
	组件处于开启状态时，下次拖动不作响应，且组件会自动关闭，可通过轻点方式来关闭组件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./swipeMenu.md}{instruUrl: swipemenu.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var defaultProps = {
	    action: [],
	    direction: 'left',
	    extraClass: '',
	    disable: false,
	    onTouchStart: function onTouchStart() {},
	    onTouchMove: function onTouchMove() {},
	    onTouchEnd: function onTouchEnd() {},
	    onOpen: function onOpen() {},
	    onClose: function onClose() {}
	};
	
	var propTypes = {
	    /**
	     * @property action
	     * @description 组件打开状态显示菜单内容，额外类名，回调函数
	     *
	     * ```
	     * PropTypes.arrayOf(
	     *     PropTypes.shape({
	     *         text: PropTypes.string.isRequired,
	     *         className: PropTypes.string,
	     *         onTap: PropTypes.func.isRequired
	     *     })
	     * )
	     * ```
	     * @type Array
	     * @default []
	     */
	    action: _propTypes2.default.arrayOf(_propTypes2.default.shape({
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]).isRequired,
	        className: _propTypes2.default.string,
	        onTap: _propTypes2.default.func.isRequired
	    })),
	    /**
	     * @property open
	     * @description 默认组件是否打开
	     * @type Bool
	     * @default false
	     */
	    open: _propTypes2.default.bool,
	    /**
	     * @property direction
	     * @description 组件可以拖动的方向
	     * @type Enum {'left', 'right'}
	     * @default left
	     */
	    direction: _propTypes2.default.oneOf(['left', 'right']),
	    /**
	     * @property extraClass
	     * @description 组件的额外样式类
	     * @type String
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property disable
	     * @description 组件是否不可用
	     * @type Bool
	     * @default false
	     */
	    disable: _propTypes2.default.bool,
	    /**
	     * @method onTouchStart
	     * @description touchStart时期触发的回调
	     * @type Function
	     * @default () => {}
	     */
	    onTouchStart: _propTypes2.default.func,
	    /**
	     * @method onTouchMove
	     * @description touchMove时期触发的回调
	     * @type Function
	     * @default () => {}
	     */
	    onTouchMove: _propTypes2.default.func,
	    /**
	     * @method onTouchEnd
	     * @description touchEnd时期触发的回调
	     * @type Function
	     * @default () => {}
	     */
	    onTouchEnd: _propTypes2.default.func,
	    /**
	     * @method onOpen
	     * @description 组件打开时期触发的回调
	     * @type Function
	     * @default () => {}
	     */
	    onOpen: _propTypes2.default.func,
	    /**
	     * @method onClose
	     * @description 组件关闭时期触发的回调
	     * @type Function
	     * @default () => {}
	     */
	    onClose: _propTypes2.default.func,
	    children: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.array, _propTypes2.default.string, _propTypes2.default.number])
	};
	
	var SwipeMenu = function (_Component) {
	    _inherits(SwipeMenu, _Component);
	
	    function SwipeMenu(props) {
	        _classCallCheck(this, SwipeMenu);
	
	        var _this = _possibleConstructorReturn(this, (SwipeMenu.__proto__ || Object.getPrototypeOf(SwipeMenu)).call(this, props));
	
	        _this.drag = null;
	
	        // 标志， 组件是否在返回， 处理不能同时返回又向外拖的情况
	        _this.isBack = false;
	        _this.actBtn = null;
	
	        // action菜单按钮的宽度
	        _this.actBtnWidth = 0;
	        _this.startX = 0;
	        _this.timer = null;
	        return _this;
	    }
	
	    _createClass(SwipeMenu, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            var _props = this.props,
	                open = _props.open,
	                direction = _props.direction;
	
	            this.actBtnWidth = this.actBtn ? this.actBtn.offsetWidth : 0;
	            if (this.drag) {
	                this.dragEvt = new _drag2.default({ node: this.drag, aniClass: 'transition' });
	            } else {
	                this.dragEvt = null;
	            }
	            this.reset(open, direction);
	        }
	    }, {
	        key: 'componentWillReceiveProps',
	        value: function componentWillReceiveProps(nextProps) {
	            this.reset(nextProps.open, this.props.direction);
	        }
	
	        /**
	         * 获取拖动的距离， 作为common/drag.js 中dragMove的Middleware
	         * 主要处理超过最大值时缓慢拖动效果
	         * @param distanceX {Number} 实际拖动距离， 由drag.js传入
	         * @returns {*} 组件translate距离
	         */
	
	    }, {
	        key: 'getMoveDistance',
	        value: function getMoveDistance(distanceX) {
	            if (this.props.direction === 'right' && distanceX > 0) {
	                if (distanceX > this.actBtnWidth * 1.5) {
	                    return this.actBtnWidth + 0.35 * distanceX;
	                }
	                return distanceX;
	            }
	            if (this.props.direction === 'left' && distanceX < 0) {
	                if (Math.abs(distanceX) > this.actBtnWidth * 1.5) {
	                    return -this.actBtnWidth + 0.35 * distanceX;
	                }
	                return distanceX;
	            }
	            return 0;
	        }
	
	        /**
	         * 组件最终拖动的距离， 由此决定组件最终状态
	         * 作为common/drag.js里的dragEnd的middleware
	         * @param distanceX dragEnd中实际拖动的距离
	         * @returns {*} 组件最后的translate距离
	         */
	
	    }, {
	        key: 'getEndDistance',
	        value: function getEndDistance(distanceX) {
	            var dir = this.props.direction;
	            var max = this.actBtnWidth;
	            if (dir === 'left' && distanceX > 0 || dir === 'right' && distanceX < 0) {
	                this.props.onClose();
	                return 0;
	            }
	            var full = dir === 'left' ? -max : max;
	            if (Math.abs(distanceX) > max / 2) {
	                this.isBack = true;
	                this.props.onOpen();
	                return full;
	            }
	            this.props.onClose();
	            return 0;
	        }
	
	        /**
	         * reset 根据open的参数，确定组件关闭
	         * @param open {boolean} 是否开启
	         * @param direction {string} 组件拖动的方向
	         */
	
	    }, {
	        key: 'reset',
	        value: function reset(open, direction) {
	            var resetX = 0;
	            // 为传open， 不需要执行
	            if (open === undefined) {
	                return;
	            }
	            if (open) {
	                resetX = direction === 'right' ? this.actBtnWidth : -this.actBtnWidth;
	            }
	            if (this.dragEvt) {
	                this.dragEvt.setMove(resetX);
	            }
	            this.isBack = !!resetX;
	            (0, _drag.setTransform)({ node: this.drag, distanceX: resetX });
	        }
	
	        /**
	         * 组件的状态转换过程， 是否清楚过渡动画， 完毕之后再加上
	         * @param toStatus {Boolean} 目的状态是否是打开状态， true => open
	         * @param isClearTransition {Boolean} 是否清楚组件动画
	         */
	
	    }, {
	        key: 'toggle',
	        value: function toggle(toStatus, isClearTransition) {
	            var _this2 = this;
	
	            if (!isClearTransition) {
	                this.reset(toStatus, this.props.direction);
	                return;
	            }
	            if (this.drag) this.drag.className = 'front ';
	            this.reset(toStatus, this.props.direction);
	            this.timer = setTimeout(function () {
	                if (_this2.drag) _this2.drag.className = 'front transition';
	            }, 300);
	        }
	
	        /**
	         * @method open
	         * @description 打开SwipeMenu，能够接收一个参数，表示是否有过渡动画效果。
	         * @param {Boolean} isClearTransition
	         */
	
	    }, {
	        key: 'open',
	        value: function open() {
	            var _this3 = this;
	
	            var isClearTransition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            this.isBack = true;
	            this.toggle(true, isClearTransition);
	            setTimeout(function () {
	                _this3.props.onOpen();
	            }, isClearTransition ? 300 : 0);
	        }
	
	        /**
	         * @method close
	         * @description 关闭SwipeMenu，能够接收一个参数，表示是否有过渡动画效果。
	         * @param {Boolean} isClearTransition
	         */
	
	    }, {
	        key: 'close',
	        value: function close() {
	            var _this4 = this;
	
	            var isClearTransition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
	
	            this.isBack = false;
	            this.toggle(false, isClearTransition);
	            // 动画结束时触发onClose
	            setTimeout(function () {
	                _this4.props.onClose();
	            }, !isClearTransition ? 300 : 0);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this5 = this;
	
	            var _props2 = this.props,
	                action = _props2.action,
	                extraClass = _props2.extraClass,
	                disable = _props2.disable,
	                direction = _props2.direction,
	                _onTouchStart = _props2.onTouchStart,
	                _onTouchMove = _props2.onTouchMove,
	                _onTouchEnd = _props2.onTouchEnd;
	
	            var actionClass = direction === 'left' ? '' : 'action-start';
	            var actionElement = (0, _react.isValidElement)(action) ? action : action.map(function (item, i) {
	                item.className = item.className || '';
	                return _react2.default.createElement(
	                    'span',
	                    {
	                        className: (0, _classnames2.default)('item', item.className),
	                        key: i,
	                        onTouchTap: function onTouchTap() {
	                            return item.onTap(_this5);
	                        }
	                    },
	                    item.text
	                );
	            });
	            return _react2.default.createElement(
	                'div',
	                { className: (0, _classnames2.default)('yo-swipemenu', extraClass) },
	                _react2.default.createElement(
	                    'div',
	                    {
	                        className: 'front transition',
	                        ref: function ref(_ref) {
	                            _this5.drag = _ref;
	                        },
	                        onTouchStart: function onTouchStart(evt) {
	                            if (disable) {
	                                return;
	                            }
	                            if (_this5.dragEvt) {
	                                _this5.dragEvt.dragStart(evt);
	                            }
	                            if (Math.abs(_this5.dragEvt.getMove()) > _this5.actBtnWidth / 2) {
	                                _this5.isBack = true;
	                                if (_this5.drag) {
	                                    _this5.drag.className += 'transition';
	                                }
	                                if (_this5.dragEvt) {
	                                    _this5.dragEvt.refreshDrag();
	                                }
	                            }
	                            _onTouchStart();
	                        },
	                        onTouchMove: function onTouchMove(evt) {
	                            if (disable || _this5.isBack) {
	                                return;
	                            }
	                            if (_this5.dragEvt) {
	                                _this5.dragEvt.dragMove(evt, _this5.getMoveDistance.bind(_this5));
	                            }
	                            _onTouchMove();
	                        },
	                        onTouchEnd: function onTouchEnd(evt) {
	                            if (disable || _this5.isBack) {
	                                _this5.isBack = false;
	                                return;
	                            }
	                            _onTouchEnd();
	                            if (_this5.dragEvt) {
	                                _this5.dragEvt.dragEnd(evt, _this5.getEndDistance.bind(_this5));
	                            }
	                        },
	                        onTouchCancel: function onTouchCancel(evt) {
	                            if (_this5.dragEvt) {
	                                _this5.dragEvt.dragCancel(evt);
	                            }
	                        }
	                    },
	                    this.props.children
	                ),
	                _react2.default.createElement(
	                    'div',
	                    {
	                        className: (0, _classnames2.default)('action', actionClass),
	                        ref: function ref(_ref2) {
	                            _this5.actBtn = _ref2;
	                        }
	                    },
	                    actionElement
	                )
	            );
	        }
	    }]);
	
	    return SwipeMenu;
	}(_react.Component);
	
	exports.default = SwipeMenu;
	
	
	SwipeMenu.defaultProps = defaultProps;
	SwipeMenu.propTypes = propTypes;

/***/ },
/* 134 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Created by qingguo.xu on 16/9/13.
	 */
	/**
	 * getClient 获取touch事件的相对坐标 [x, y]
	 * @param evt {Event} Touch事件对象
	 * @param arr {Array} 相对坐标值, TouchStart时的坐标, 默认为[0, 0]
	 * @return {Array} 相对坐标 [x, y]
	 */
	var getClient = function getClient(evt) {
	    var arr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [0, 0];
	    return !!evt.touches[0] ? [evt.touches[0].clientX - arr[0], evt.touches[0].clientY - arr[1]] : [evt.changedTouches[0].clientX - arr[0], evt.changedTouches[0].clientY - arr[1]];
	};
	
	/**
	 * setTransform 设置node元素的translate属性
	 * @param node {Object} DOM节点
	 * @param isPercent {Boolean} 是否转换成百分比
	 * @param distanceX {Number} translateX值
	 * @param distanceY {Number} translateY值
	 */
	var setTransform = exports.setTransform = function setTransform(_ref) {
	    var node = _ref.node,
	        _ref$isPercent = _ref.isPercent,
	        isPercent = _ref$isPercent === undefined ? false : _ref$isPercent,
	        _ref$distanceX = _ref.distanceX,
	        distanceX = _ref$distanceX === undefined ? 0 : _ref$distanceX,
	        _ref$distanceY = _ref.distanceY,
	        distanceY = _ref$distanceY === undefined ? 0 : _ref$distanceY;
	
	    if (isPercent) {
	        distanceX = distanceX * 100;
	        distanceY = distanceY * 100;
	        node.style.WebkitTransform = "translate(" + distanceX + "%, " + distanceY + "%) translateZ(0)";
	        node.style.transform = "translate(" + distanceX + "%, " + distanceY + "%) translateZ(0)";
	        return;
	    }
	    if (node) {
	        node.style.WebkitTransform = "translate(" + distanceX + "px, " + distanceY + "px) translateZ(0)";
	        node.style.transform = "translate(" + distanceX + "px, " + distanceY + "px) translateZ(0)";
	    }
	};
	
	var _class = function () {
	    /**
	     * Drag 构造函数
	     * @param node {DOM} 拖动的DOM节点
	     * @param aniClass {String} transition动画, start时去掉, end时加上
	     * @param isPercent {Boolean} 是否转换成百分比
	     * @param isVertical {Boolean} 是否竖向拖动
	     */
	    function _class(_ref2) {
	        var node = _ref2.node,
	            _ref2$aniClass = _ref2.aniClass,
	            aniClass = _ref2$aniClass === undefined ? '' : _ref2$aniClass,
	            _ref2$isPercent = _ref2.isPercent,
	            isPercent = _ref2$isPercent === undefined ? false : _ref2$isPercent,
	            _ref2$isVertical = _ref2.isVertical,
	            isVertical = _ref2$isVertical === undefined ? false : _ref2$isVertical;
	
	        _classCallCheck(this, _class);
	
	        this.start = [];
	        this.move = 0;
	        this.targetNode = node;
	        this.aniClass = aniClass;
	        this.isPercent = isPercent;
	        this.isVertical = isVertical;
	        this.draging = false; // 是否拖动
	        this.hasDir = false; // 确定拖动距离是否满足方向
	        this.isFirst = true; // 是否第一次运算
	    }
	
	    /**
	     * getMove 获取当前的拖动距离
	     * @returns {*|number}
	     */
	
	
	    _createClass(_class, [{
	        key: "getMove",
	        value: function getMove() {
	            return this.move;
	        }
	
	        /**
	         * setMove 重置当前的拖动距离
	         * @param move {Number}
	         */
	
	    }, {
	        key: "setMove",
	        value: function setMove(move) {
	            this.move = move;
	        }
	
	        /**
	         * refreshDrag 刷新Drag, 回到原点
	         */
	
	    }, {
	        key: "refreshDrag",
	        value: function refreshDrag() {
	            this.move = 0;
	            setTransform({ node: this.targetNode, isPercent: this.isPercent });
	        }
	
	        /**
	         * ensureDir 根据第一个TouchMove来判断拖动的距离是否满足拖动方向
	         * @param evt {Object} 拖动事件对象
	         */
	
	    }, {
	        key: "ensureDir",
	        value: function ensureDir(evt) {
	            var _getClient = getClient(evt, this.start),
	                _getClient2 = _slicedToArray(_getClient, 2),
	                moveX = _getClient2[0],
	                moveY = _getClient2[1];
	
	            moveX = Math.abs(moveX);
	            moveY = Math.abs(moveY);
	            if (this.isVertical) {
	                if (moveX > 5) {
	                    this.isFirst = false;
	                    return;
	                }
	                if (moveY > 2 * moveX) {
	                    this.hasDir = true;
	                    return;
	                }
	            }
	            if (moveY > 5) {
	                this.isFirst = false;
	                return;
	            }
	            if (moveX > 2 * moveY) {
	                this.hasDir = true;
	                return;
	            }
	            return;
	        }
	
	        /**
	         * dragStart 拖动开始函数处理
	         * @param evt {Object} touchStart事件对象
	         */
	
	    }, {
	        key: "dragStart",
	        value: function dragStart(evt) {
	            evt.preventDefault();
	            this.draging = true;
	            this.start = getClient(evt);
	            this.targetNode.className = this.targetNode.className.replace(this.aniClass, '');
	        }
	
	        /**
	         * dragMove 拖动过程事件处理
	         * @param evt {Object} touchMove事件对象
	         * @param middleWare {Function} 对拖动距离的进一步处理
	         */
	
	    }, {
	        key: "dragMove",
	        value: function dragMove(evt, middleWare) {
	            evt.preventDefault();
	            if (!this.draging) {
	                return;
	            }
	            if (!this.hasDir) {
	                if (this.isFirst) this.ensureDir(evt);
	                return;
	            }
	            this.move = this.isVertical ? getClient(evt, this.start)[1] : getClient(evt, this.start)[0];
	            if (!!middleWare) {
	                this.move = middleWare(this.move);
	            }
	            this.isVertical ? setTransform({ node: this.targetNode, isPercent: this.isPercent, distanceY: this.move }) : setTransform({ node: this.targetNode, isPercent: this.isPercent, distanceX: this.move });
	        }
	
	        /**
	         * dragEnd 拖动结束时的事件处理
	         * @param evt {Object} touchEnd事件处理
	         * @param middleWare {Function}
	         * @returns {*|number|Number}
	         */
	
	    }, {
	        key: "dragEnd",
	        value: function dragEnd(evt, middleWare) {
	            evt.preventDefault();
	            this.isFirst = true;
	            if (!this.draging || !this.hasDir) {
	                return;
	            }
	            this.draging = false;
	            this.hasDir = false;
	            this.move = this.isVertical ? getClient(evt, this.start)[1] : getClient(evt, this.start)[0];
	            if (this.targetNode.className.search(this.aniClass) === -1) {
	                this.targetNode.className += this.aniClass;
	            }
	            if (!!middleWare) {
	                this.move = middleWare(this.move);
	                this.isVertical ? setTransform({ node: this.targetNode, isPercent: this.isPercent, distanceY: this.move }) : setTransform({ node: this.targetNode, isPercent: this.isPercent, distanceX: this.move });
	                return this.move;
	            }
	        }
	    }, {
	        key: "dragCancel",
	        value: function dragCancel(evt) {
	            evt.preventDefault();
	            // evt.stopPropagation();
	            this.draging = false;
	            this.hasDir = false;
	            this.isFirst = true;
	        }
	    }]);

	    return _class;
	}();

	exports.default = _class;

/***/ },
/* 135 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(136);
	
	var _swipemenulist = __webpack_require__(137);
	
	var _swipemenulist2 = _interopRequireDefault(_swipemenulist);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _swipemenulist2.default;

/***/ },
/* 136 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _list = __webpack_require__(50);
	
	var _list2 = _interopRequireDefault(_list);
	
	var _swipemenu = __webpack_require__(133);
	
	var _swipemenu2 = _interopRequireDefault(_swipemenu);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component SwipeMenuList
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description SwipeMenuList组件，使用List实现，列表项全部为SwipeMenu。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./swipeMenuList.md}{instruUrl: swipemenulist.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author jiao.shen
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var noop = function noop() {};
	
	var SwipeMenuList = function (_Component) {
	    _inherits(SwipeMenuList, _Component);
	
	    function SwipeMenuList(props) {
	        _classCallCheck(this, SwipeMenuList);
	
	        var _this = _possibleConstructorReturn(this, (SwipeMenuList.__proto__ || Object.getPrototypeOf(SwipeMenuList)).call(this, props));
	
	        _this.swipeMenuList = [];
	        // 当前打开的菜单index
	        _this.openIndex = -1;
	        // 之前打开菜单的index,用来判断菜单的打开/关闭状态是否有变化
	        _this.cachedOpenIndex = -1;
	        _this.state = {
	            dataSource: _this.ds,
	            openIndex: _this.openIndex
	        };
	        return _this;
	    }
	
	    _createClass(SwipeMenuList, [{
	        key: 'getChildContext',
	        value: function getChildContext() {
	            return { swipeMenuList: this };
	        }
	
	        /**
	         * 在render结束时重置缓存的上一个打开菜单的index，此时this.cachedOpenIndex===this.openIndex
	         */
	
	    }, {
	        key: 'componentDidUpdate',
	        value: function componentDidUpdate() {
	            this.cachedOpenIndex = this.openIndex;
	        }
	
	        /**
	         * 在一个菜单被打开/关闭时触发，改变openIndex
	         * @param index
	         */
	
	    }, {
	        key: 'updateOpenIndex',
	        value: function updateOpenIndex(index) {
	            // 保存当前的openIndex
	            this.cachedOpenIndex = this.openIndex;
	            // 更新openIndex
	            // 此时this.cachedOpenIndex!==this.openIndex
	            this.openIndex = index;
	            this.setState({ openIndex: index });
	
	            var _props = this.props,
	                onMenuOpen = _props.onMenuOpen,
	                onMenuClose = _props.onMenuClose,
	                dataSource = _props.dataSource;
	
	            var itemData = typeof dataSource.get === 'function' ? dataSource.get(index) : dataSource[index];
	            if (index !== -1) {
	                onMenuOpen(itemData, index);
	            } else {
	                var lastOpenedItemData = typeof dataSource.get === 'function' ? dataSource.get(this.cachedOpenIndex) : dataSource[this.cachedOpenIndex];
	                onMenuClose(lastOpenedItemData, this.cachedOpenIndex);
	            }
	        }
	
	        /**
	         * @method refresh
	         * @description 在GroupList容器尺寸发生变化时调用，刷新内部的Scroller组件。
	         * @version 3.0.6
	         */
	
	    }, {
	        key: 'refresh',
	        value: function refresh() {
	            if (this.list) this.list.refresh();
	        }
	
	        /**
	         * @method resetLoadStatus
	         * @param {Bool} hasLoadMore 是否能够加载更多，如果传入false，加载更多区域的文字将会变成 没有更多了，并且继续向下滚动时不会触发onLoadMore。
	         * @description 重置加载更多功能。
	         * @version 3.0.7
	         */
	
	    }, {
	        key: 'resetLoadStatus',
	        value: function resetLoadStatus(hasLoadMore) {
	            if (this.list) this.list.resetLoadStatus(hasLoadMore);
	        }
	
	        /**
	         * @description 滚动到某个位置
	         * @method scrollTo
	         * @param {Number} y y坐标
	         * @param {Number} [time] 动画持续时间
	         */
	
	    }, {
	        key: 'scrollTo',
	        value: function scrollTo(y, time) {
	            if (this.list) this.list.scrollTo(y, time);
	        }
	
	        /**
	         * @method stopRefreshing
	         * @param {Bool} [success] 下拉刷新是否成功，默认为 false。
	         * @param {Object} [config] 停止刷新的动画配置。
	         * @param {number} [config.duration] 回到顶部的动画时间，默认是 300ms。
	         * @param {Function} [callback] 回到顶部的动画执行完毕的回调。
	         * @description 调用 Scroller 同名方法，中止下拉刷新过程。在列表发生下拉刷新之后你应该调用这个方法去中止它(比如服务器响应已经返回的时候),否则刷新不会自动终止。
	         */
	
	    }, {
	        key: 'stopRefreshing',
	        value: function stopRefreshing(success, config, callback) {
	            if (this.list) {
	                this.list.stopRefreshing(success, config, callback);
	            }
	        }
	
	        /**
	         * @method startRefreshing
	         * @description 模拟下拉刷新
	         */
	
	    }, {
	        key: 'startRefreshing',
	        value: function startRefreshing() {
	            if (this.list) this.list.startRefreshing();
	        }
	
	        /**
	         * @method stopAnimate
	         * @description 让列表立刻停止滚动。
	         */
	
	    }, {
	        key: 'stopAnimate',
	        value: function stopAnimate() {
	            if (this.list) this.list.stopAnimate();
	        }
	
	        /**
	         * @description 停止加载更多
	         * @method stopLoading
	         * @param {Bool} success 加载成功/加载失败
	         */
	
	    }, {
	        key: 'stopLoading',
	        value: function stopLoading(success) {
	            if (this.list) this.list.stopLoading(success);
	        }
	
	        /**
	         * 关闭打开的菜单
	         * 解锁Scroller
	         */
	
	    }, {
	        key: 'closeAll',
	        value: function closeAll(i) {
	            var swipeMenu = this.swipeMenuList[this.openIndex];
	            if (swipeMenu) {
	                if (i !== this.openIndex) {
	                    swipeMenu.close();
	                }
	                this.updateOpenIndex(-1);
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var _props2 = this.props,
	                _renderItem = _props2.renderItem,
	                getMenuConfig = _props2.getMenuConfig,
	                _shouldItemUpdate = _props2.shouldItemUpdate;
	
	
	            return _react2.default.createElement(_list2.default, _extends({}, this.props, {
	                // 如果有菜单被打开,锁定滚动
	                disabled: this.openIndex !== -1,
	                directionLockThreshold: 3,
	                ref: function ref(list) {
	                    if (list) _this2.list = list;
	                }
	                // 根据菜单打开/关闭状态是否有变化,决定是否需要render列表项
	                , shouldItemUpdate: function shouldItemUpdate(next, now) {
	                    if (_this2.props.infinite) {
	                        return _this2.cachedOpenIndex !== _this2.openIndex || _shouldItemUpdate(next, now);
	                    }
	                    return false;
	                }
	                // 渲染列表项
	                , renderItem: function renderItem(item, i) {
	                    var menuConfig = getMenuConfig(item, i);
	                    var action = menuConfig.action,
	                        disable = menuConfig.disable;
	                    // 重新包装action 菜单配置对象的tap方法,使其能够接收item,i,component为参数
	
	                    action.forEach(function (actionObj) {
	                        var origTap = actionObj.onTap;
	                        //  以包裹后的tap方法替换原有tap方法,为了tap能够拿到参数
	                        //  binded标志可以防止重复绑定
	                        if (!origTap.binded) {
	                            actionObj.onTap = function (component) {
	                                origTap(item, i, component);
	                            };
	                            actionObj.onTap.binded = true;
	                        }
	                    });
	                    return _react2.default.createElement(
	                        _swipemenu2.default,
	                        _extends({}, menuConfig, {
	                            ref: function ref(component) {
	                                if (component) {
	                                    _this2.swipeMenuList[i] = component;
	                                }
	                            },
	                            disable: disable || _this2.openIndex !== -1 && i !== _this2.openIndex,
	                            onOpen: function onOpen() {
	                                return _this2.updateOpenIndex(i);
	                            },
	                            onClose: function onClose() {
	                                if (_this2.state.openIndex !== -1) {
	                                    _this2.updateOpenIndex(-1);
	                                }
	                            },
	                            action: action,
	                            extraClass: 'swipemenu-list-menu'
	                        }),
	                        _renderItem(item, i)
	                    );
	                },
	                onItemTap: function onItemTap(item, i, target) {
	                    // 只有在内容区域的点击才触发onItemTap
	                    _this2.props.onItemTap(item, i, target);
	                },
	                onItemTouchStart: function onItemTouchStart(item, i, evt) {
	                    evt.preventDefault();
	
	                    var currentTarget = evt.currentTarget;
	                    var front = currentTarget.childNodes[0].childNodes[0];
	                    var action = currentTarget.childNodes[0].childNodes[1];
	                    var target = evt.target;
	                    var touchInFront = target === front;
	                    while (target !== front && target !== action) {
	                        if (target == null) {
	                            touchInFront = true;
	                            break;
	                        }
	                        if (target.parentNode === front) {
	                            touchInFront = true;
	                            break;
	                        }
	                        if (target.parentNode === action) {
	                            touchInFront = false;
	                            break;
	                        }
	                        target = target.parentNode;
	                    }
	
	                    if (touchInFront) {
	                        _this2.closeAll(i, evt);
	                    }
	                }
	            }));
	        }
	    }]);
	
	    return SwipeMenuList;
	}(_react.Component);
	
	SwipeMenuList.propTypes = {
	    /**
	     * @property dataSource
	     * @type Array/Immutable List
	     * @default null
	     * @description 组件数据源，数组类型，与`List`同名属性完全一致。
	     */
	    dataSource: _propTypes2.default.oneOfType([_propTypes2.default.arrayOf(_propTypes2.default.shape({
	        height: _propTypes2.default.number,
	        text: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string]),
	        key: _propTypes2.default.oneOfType([_propTypes2.default.number, _propTypes2.default.string])
	    })), _propTypes2.default.object]).isRequired,
	    /**
	     * @property uniqueKeyName
	     * @type String
	     * @default 'key'
	     * @version 3.1.3
	     * @description dataSource 数组项的唯一标识的键值，默认为 key。
	     *
	     * 例子:`` renderItem={(item)=><p>{item.someAttr}</p>} ``
	     */
	    uniqueKeyName: _propTypes2.default.string,
	    /**
	     * @property getMenuConfig
	     * @default null
	     * @version 3.0.3
	     * @type Function
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的index
	     * @description 这个函数应该返回一个列表项菜单对应的SwipeMenu组件配置对象，
	     * 可配置的属性请参考`SwipeMenu`组件。
	     */
	    getMenuConfig: _propTypes2.default.func.isRequired,
	    /**
	     * @property renderItem
	     * @type Function
	     * @default null
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的index
	     * @description 渲染列表项的函数，接受参数item(该项对应的数据源中的配置对象)，index(配置对象在数据源中的index)，返回JSX或者string
	     * 作为SwipeMenu的内容
	     */
	    renderItem: _propTypes2.default.func,
	    /**
	     * @property staticSection
	     * @type Element
	     * @default null
	     * @version 3.0.3
	     * @description 在所有列表项之上渲染的一块静态区域，在开启Infinite模式时，这块区域不会参与列表项的回收复用。
	     */
	    staticSection: _propTypes2.default.element,
	    /**
	     * @property infinite
	     * @type Bool
	     * @default false
	     * @description 是否开启无穷列表模式，参考List同名属性
	     */
	    infinite: _propTypes2.default.bool,
	    /**
	     * @property infiniteSize
	     * @type Bool
	     * @default 20
	     * @description 无穷列表模式中，设置保留在容器中的列表项数量，参考List同名属性
	     */
	    infiniteSize: _propTypes2.default.number,
	    /**
	     * @property itemHeight
	     * @type Number
	     * @default null
	     * @description 列表项高度，参考List同名属性
	     */
	    itemHeight: _propTypes2.default.number,
	    /**
	     * @property itemExtraClass
	     * @type Function
	     * @default "item swipemenu-list-item"
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的偏移
	     * @description 列表项class，可以传入函数/字符串，参考List同名属性
	     */
	    itemExtraClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @property onItemTap
	     * @type Function
	     * @default null
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的偏移
	     * @param {Array} dataSource 数据源
	     * @description item点击事件回调，参考List同名属性。
	     *
	     * 注意:点击swipemenu的按钮区域以及菜单展开时不会触发这个事件。
	     */
	    onItemTap: _propTypes2.default.func,
	    /**
	     * @property itemTouchClass
	     * @type String/Function
	     * @default item-touch
	     * @param {Object} item 列表项对应的数据对象
	     * @param {Number} index 列表项在数据源中的index
	     * @description 列表项被点击时的className，可以接收字符串或者函数，使用方式与itemExtraClass一致。
	     * @version 3.0.2
	     */
	    itemTouchClass: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.func]),
	    /**
	     * @property extraClass
	     * @type String
	     * @default null
	     * @description 给List容器dom添加的额外class
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property style
	     * @type Object
	     * @default null
	     * @description 给组件容器节点绑定的额外样式
	     * @version 3.0.2
	     */
	    style: _propTypes2.default.object,
	    /**
	     * @property usePullRefresh
	     * @type Bool
	     * @default false
	     * @description 是否开启下拉刷新
	     */
	    usePullRefresh: _propTypes2.default.bool,
	    /**
	     * 下拉刷新高度
	     *
	     * @property pullRefreshHeight
	     * @type Number
	     * @description 触发下拉刷新状态的高度（一般即为下拉刷新提示区域的高度）
	     * @default 40
	     */
	    pullRefreshHeight: _propTypes2.default.number,
	    /**
	     * 下拉刷新渲染函数
	     *
	     * @property renderPullRefresh
	     * @type Function
	     * @returns {Element} 用来渲染 pullRefresh 的 JSX
	     * @description
	     *
	     * 自定义的下拉刷新渲染函数
	     */
	    renderPullRefresh: _propTypes2.default.func,
	    /**
	     * @property onRefresh
	     * @type Function
	     * @default null
	     * @param {Array} dataSource 列表数据源
	     * @description 下拉刷新完成回调
	     */
	    onRefresh: _propTypes2.default.func,
	    /**
	     * @property useLoadMore
	     * @type Bool
	     * @default false
	     * @description 是否开启加载更多
	     */
	    useLoadMore: _propTypes2.default.bool,
	    /**
	     * 加载更多高度
	     *
	     * @property loadMoreHeight
	     * @type Number
	     * @description 触发加载更多状态的高度（一般即为加载更多提示区域的高度）
	     * @default 40
	     */
	    loadMoreHeight: _propTypes2.default.number,
	    /**
	     * 加载更多渲染函数
	     *
	     * @property renderLoadMore
	     * @type Function
	     * @returns {Element} 用来渲染 loadMore 的 JSX
	     * @description
	     * 自定义的加载更多渲染函数
	     */
	    renderLoadMore: _propTypes2.default.func,
	    /**
	     * @property onLoad
	     * @type Function
	     * @default null
	     * @param {Array} dataSource 列表数据源
	     * @description 加载更多回调
	     */
	    onLoad: _propTypes2.default.func,
	    /**
	     * @property offsetY
	     * @type Number
	     * @default 0
	     * @description 列表初始Y轴偏移
	     */
	    offsetY: _propTypes2.default.number,
	    /**
	     * 内容底部留白
	     *
	     * @property contentInset
	     * @type Number
	     * @description 内容区域周围的留白，**目前仅支持 bottom**。主要用于适配 iPhoneX，在下方留出一定间隙。有『加载更多』时，显示在『加载更多』的下方。可以通过设置背景色来改变留白的颜色。
	     * @default {bottom:0}
	     * @version 3.0.13
	     */
	    contentInset: _propTypes2.default.shape({
	        bottom: _propTypes2.default.number
	    }),
	    /**
	     * @property onScroll
	     * @type Function
	     * @default null
	     * @param {Number} offsetY y坐标
	     * @description 列表滚动时触发的回调
	     */
	    onScroll: _propTypes2.default.func,
	    /**
	     * @property onScrollEnd
	     * @type Function
	     * @param {Number} offsetY 当前 Scroller 的 y 轴偏移量
	     * @default null
	     * @version 3.1.4
	     * @description 滚动结束之后的回调
	     */
	    onScrollEnd: _propTypes2.default.func,
	    /**
	     * @property shouldItemUpdate
	     * @type Function
	     * @default null
	     * @param {Object} next 即将传给列表项组件的item对象
	     * @param {Object} now 当前列表项组件对应的item对象
	     * @description 绑定给列表项组件的shouldComponentUpdate，可以避免额外的render，用于提升列表的滚动性能。
	     * 详情请参考List组件同名属性。
	     */
	    shouldItemUpdate: _propTypes2.default.func,
	    /**
	     * @property deceleration
	     * @type Number
	     * @description 滚动视图开始惯性滚动时减速的加速度，默认为0.010。
	     * @version 3.0.6
	     */
	    deceleration: _propTypes2.default.number,
	    onInfiniteAppend: _propTypes2.default.func,
	    /**
	     * @property onMenuOpen
	     * @type Function
	     * @default ()=>{}
	     * @param {Object} item 打开的菜单项对应的数据对象
	     * @param {Number} index 打开的菜单项在dataSource中的index
	     * @description 在某个菜单项打开的时候触发的回调函数。
	     * @version 3.0.2
	     */
	    onMenuOpen: _propTypes2.default.func,
	    /**
	     * @property onMenuClose
	     * @type Function
	     * @default ()=>{}
	     * @param {Object} item 打开的菜单项对应的数据对象
	     * @param {Number} index 打开的菜单项在dataSource中的index
	     * @description 在某个菜单项关闭时触发的回调函数。
	     * @version 3.0.2
	     */
	    onMenuClose: _propTypes2.default.func,
	    /**
	     * @property scrollWithoutTouchStart
	     * @type Bool
	     * @default false
	     * @description ** 实验中的属性 **
	     * 在默认情况下一次用户触发（非调用scrollTo方法）scroller的滚动需要由touchstart事件来启动，在某些情况下，例如scroller从disable状态切换到enable状态时，
	     * 可能不能接收到这一瞬间的touchstart事件，这可能导致用户期待的滚动过程没有发生。
	     * 开启这个属性为true以后将允许scroller用touchmove启动滚动过程，这可以解决上述场景的问题。
	     * @version 3.0.2
	     */
	    scrollWithoutTouchStart: _propTypes2.default.bool,
	    /**
	     * @property stickyOffset
	     * @type Number
	     * @default 0
	     * @description 给staticSection内部吸顶容器设置的y轴偏移。
	     * @version 3.0.6
	     */
	    stickyOffset: _propTypes2.default.number
	};
	SwipeMenuList.defaultProps = {
	    uniqueKeyName: 'key',
	    renderItem: function renderItem(item) {
	        return typeof item.get === 'function' ? item.get('text') : item.text;
	    },
	
	    infinite: false,
	    infiniteSize: 20,
	    itemHeight: null,
	    itemExtraClass: 'swipemenu-list-item',
	    extraClass: 'yo-list-absolute',
	    onItemTap: noop,
	    usePullRefresh: false,
	    onRefresh: noop,
	    useLoadMore: false,
	    onLoad: noop,
	    offsetY: 0,
	    onInfiniteAppend: noop,
	    onMenuOpen: function onMenuOpen() {},
	    onMenuClose: function onMenuClose() {},
	
	    scrollWithoutTouchStart: false,
	    staticSection: null,
	    shouldItemUpdate: function shouldItemUpdate() {
	        return false;
	    }
	};
	SwipeMenuList.childContextTypes = {
	    swipeMenuList: _propTypes2.default.object
	};
	exports.default = SwipeMenuList;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(139);
	
	var _switch = __webpack_require__(140);
	
	var _switch2 = _interopRequireDefault(_switch);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _switch2.default;

/***/ },
/* 139 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Switch
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 开关组件，在checkbox基础上封装，具有打开关闭以及过程动画、
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	支持设置禁用
	可配合样式扩展自定义样式，对颜色的修改请传入activeColor&defaultColor
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author eva.li
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./switch.md}{instruUrl: switch.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var ALLOWANCE = 4;
	var propTypes = {
	    /**
	     * @property disabled
	     * @type Bool
	     * @default false
	     * @description 是否禁用switch组件
	     * 禁用switch后，UI操作不会影响到switch Value的变化
	     */
	    disabled: _propTypes2.default.bool,
	    /**
	     * @property checked
	     * @type Bool
	     * @default true
	     * @description 当前switch组件的值
	     */
	    checked: _propTypes2.default.bool,
	    /**
	     * @property extraClass
	     * @type String
	     * @description 额外添加到根节点上的className
	     */
	    extraClass: _propTypes2.default.string,
	    /**
	     * @property onChange
	     * @type Function
	     * @description value值发生变化的时候触发
	     */
	    onChange: _propTypes2.default.func,
	    /**
	     * @property activeColor
	     * @type String
	     * @default '#4bd763'
	     * @description activeColor 响应颜色
	     * 当组件处于拖动状态时而非结果状态时需要JS辅助设置背景色
	     * 当用户扩展switch样式改变颜色时需要传入
	     */
	    activeColor: _propTypes2.default.string,
	    /**
	     * @property defaultColor
	     * @type String
	     * @default '#fafafa'
	     * @description defaultColor 关闭时的颜色
	     * 当组件处于拖动状态时而非结果状态时需要JS辅助设置背景色
	     * 当用户扩展switch样式改变颜色时需要传入
	     */
	    defaultColor: _propTypes2.default.string
	};
	
	var defaultProps = {
	    disabled: false,
	    checked: true,
	    activeColor: '#4bd763',
	    defaultColor: '#ccc'
	};
	
	var Switch = function (_Component) {
	    _inherits(Switch, _Component);
	
	    function Switch(props) {
	        _classCallCheck(this, Switch);
	
	        var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));
	
	        _this.state = {
	            isMoving: false
	        };
	        _this.touchstart = _this.touchstart.bind(_this);
	        _this.touchmove = _this.touchmove.bind(_this);
	        _this.touchend = _this.touchend.bind(_this);
	        _this.touchcancel = _this.touchcancel.bind(_this);
	        return _this;
	    }
	
	    _createClass(Switch, [{
	        key: 'componentDidMount',
	        value: function componentDidMount() {
	            if (this.handleDOM) {
	                this.handleDOM = '';
	            } else {
	                this.handleDOM = this.widgetDOM ? this.widgetDOM.querySelector('.handle') : '';
	            }
	            if (!this.handleDOM) {
	                this.trackDOM = '';
	            } else {
	                this.trackDOM = this.widgetDOM ? this.widgetDOM.querySelector('.track') : '';
	            }
	            var line = this.handleDOM.clientWidth;
	            this.maxline = this.trackDOM.clientWidth - line * 1.2 - 2;
	        }
	    }, {
	        key: 'touchstart',
	        value: function touchstart(e) {
	            e.preventDefault();
	            e.stopPropagation();
	            this.touchLocateStart = e.touches[0].clientX;
	            var translateX = this.props.checked ? this.maxline : 0;
	            this._setCSS(translateX);
	            this.setState({
	                isMoving: true
	            });
	        }
	    }, {
	        key: 'touchmove',
	        value: function touchmove(e) {
	            e.preventDefault();
	            e.stopPropagation();
	            var basic = this.props.checked ? this.maxline : 0;
	            var translateX = e.touches[0].clientX - this.touchLocateStart + basic;
	            if (Math.abs(translateX - basic) > ALLOWANCE) {
	                translateX = translateX < this.maxline / 2 ? 0 : this.maxline;
	                this._setCSS(translateX);
	                this.touchmoved = true;
	            }
	        }
	    }, {
	        key: 'touchend',
	        value: function touchend(e) {
	            e.preventDefault();
	            e.stopPropagation();
	            var prevresult = this.props.checked;
	            var result = void 0;
	            if (this.touchmoved) {
	                // 响应滑动事件
	                var translateX = e.changedTouches[0].clientX - this.touchLocateStart + this.maxline;
	                if (translateX < this.maxline / 2) {
	                    result = false;
	                } else {
	                    result = true;
	                }
	            } else {
	                // 响应tap事件
	                result = !prevresult;
	            }
	            if (result !== prevresult) {
	                this.props.onChange(result);
	            }
	            this.setState({
	                isMoving: false
	            });
	            this._setCSS();
	            this.touchmoved = false;
	        }
	    }, {
	        key: 'touchcancel',
	        value: function touchcancel(e) {
	            e.preventDefault();
	            e.stopPropagation();
	            this._setCSS();
	            this.touchmoved = false;
	            this.setState({
	                isMoving: false
	            });
	        }
	    }, {
	        key: '_setCSS',
	        value: function _setCSS(translateX) {
	            if (translateX != null) {
	                this.handleDOM.style.transform = 'translateX(' + Math.round(translateX) + 'px) translateZ(0)';
	                this.handleDOM.style.webkitTransform = 'translateX(' + Math.round(translateX) + 'px) translateZ(0)';
	                // debugger
	                this.trackDOM.style.backgroundColor = translateX === 0 ? this.props.defaultColor : this.props.activeColor;
	            } else {
	                this.handleDOM.style.transform = '';
	                this.handleDOM.style.webkitTransform = '';
	                this.trackDOM.style.backgroundColor = '';
	            }
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _this2 = this;
	
	            var classlist = ['yo-switch'];
	            if (this.props.extraClass) classlist.push(this.props.extraClass.split(' '));
	            return _react2.default.createElement(
	                'label',
	                {
	                    className: classlist.join(' '),
	                    ref: function ref(node) {
	                        if (node) {
	                            _this2.widgetDOM = node;
	                        }
	                    },
	                    onTouchStart: this.props.disabled ? null : this.touchstart,
	                    onTouchEnd: this.props.disabled ? null : this.touchend,
	                    onTouchMove: this.props.disabled ? null : this.touchmove,
	                    onTouchCancel: this.props.disabled ? null : this.touchcancel
	                },
	                _react2.default.createElement('input', {
	                    type: 'checkbox',
	                    disabled: this.props.disabled,
	                    checked: this.props.checked,
	                    onChange: function onChange() {}
	                }),
	                _react2.default.createElement(
	                    'div',
	                    {
	                        className: this.state.isMoving ? 'track moving' : 'track'
	                    },
	                    _react2.default.createElement('span', { className: 'handle' })
	                )
	            );
	        }
	    }]);
	
	    return Switch;
	}(_react.Component);
	
	Switch.propTypes = propTypes;
	Switch.defaultProps = defaultProps;
	
	exports.default = Switch;

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(142);
	
	var _toast = __webpack_require__(143);
	
	var _toast2 = _interopRequireDefault(_toast);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _toast2.default;

/***/ },
/* 142 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _react = __webpack_require__(23);
	
	var _react2 = _interopRequireDefault(_react);
	
	var _propTypes = __webpack_require__(25);
	
	var _propTypes2 = _interopRequireDefault(_propTypes);
	
	var _reactDom = __webpack_require__(10);
	
	var _reactDom2 = _interopRequireDefault(_reactDom);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @component Toast
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @version 3.0.0
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @description 面包屑提示组件，页面居中显示一条提示信息。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	是一个对象，包含show/hide函数，支持简单的链式调用。
	通过调用show函数打开组件，默认显示2s。
	通过调用hide函数立刻关闭组件。
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @instructions {instruInfo: ./toast.md}{instruUrl: toast.html?hideIcon}
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * @author qingguo.xu
	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */
	
	
	var that = null;
	var container = document.createElement('div'),
	    defaultProps = {
	    show: false
	},
	    propTypes = {
	    /**
	     * @property show
	     * @description 是否显示，默认false
	     * @type Boolean
	     * @default false
	     * @skip
	     */
	    show: _propTypes2.default.bool
	};
	
	document.body.appendChild(container);
	
	var ToastReact = function (_Component) {
	    _inherits(ToastReact, _Component);
	
	    function ToastReact(props) {
	        _classCallCheck(this, ToastReact);
	
	        var _this = _possibleConstructorReturn(this, (ToastReact.__proto__ || Object.getPrototypeOf(ToastReact)).call(this, props));
	
	        _this.state = {
	            show: props.show,
	            content: ''
	        };
	        _this._timer = null;
	        that = _this;
	        return _this;
	    }
	
	    _createClass(ToastReact, [{
	        key: 'componentWillUnmount',
	        value: function componentWillUnmount() {
	            clearTimeout(this._timer);
	            document.body.removeChild(container);
	        }
	    }, {
	        key: 'render',
	        value: function render() {
	            var _state = this.state,
	                show = _state.show,
	                content = _state.content;
	
	            return _react2.default.createElement(
	                'div',
	                {
	                    className: 'yo-toast',
	                    style: {
	                        display: show ? null : 'none'
	                    }
	                },
	                content
	            );
	        }
	    }]);
	
	    return ToastReact;
	}(_react.Component);
	
	ToastReact.propTypes = propTypes;
	ToastReact.defaultProps = defaultProps;
	
	_reactDom2.default.render(_react2.default.createElement(ToastReact, null), container);
	
	/**
	 * Toast显隐函数
	 * @returns {Object}
	 */
	exports.default = {
	    /**
	     * @method show
	     * @type Function
	     * @description 打开组件，显示传入的内容
	     * @param {String} content 组件显示的内容
	     * @param {Number} [autoHideTime] 内容显示的持续时间，默认2000ms
	     * @param {Function} [callback] 内容显示后触发的回调 <3.0.13>
	     */
	    show: function show() {
	        var content = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'no content';
	
	        var _this2 = this;
	
	        var autoHideTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;
	        var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function () {};
	
	        that.setState({
	            content: content,
	            show: true
	        }, callback);
	        if (!!that.timer) {
	            clearTimeout(that.timer);
	            that.timer = null;
	        }
	        that.timer = setTimeout(function () {
	            return _this2.hide();
	        }, autoHideTime);
	        return this;
	    },
	
	    /**
	     * @method hide
	     * @type Function
	     * @description 关闭正在显示的组件
	     * @param {Function} [callback] 内容隐藏后触发的回调 <3.0.13>
	     */
	    hide: function hide() {
	        var callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};
	
	        if (!!that.timer) {
	            clearTimeout(that.timer);
	            that.timer = null;
	        }
	        that.setState({ show: false }, callback);
	        return this;
	    }
	};

/***/ },
/* 144 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	__webpack_require__(3);
	
	__webpack_require__(145);
	
	var _touchable = __webpack_require__(24);
	
	var _touchable2 = _interopRequireDefault(_touchable);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	exports.default = _touchable2.default;

/***/ },
/* 145 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin

/***/ }
/******/ ])
});
;
//# sourceMappingURL=yo3.react.js.map